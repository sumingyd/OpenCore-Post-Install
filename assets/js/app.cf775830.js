(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var o,a,s=n[0],l=n[1],c=n[2],p=0,d=[];p<s.length;p++)a=s[p],Object.prototype.hasOwnProperty.call(r,a)&&r[a]&&d.push(r[a][0]),r[a]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(u&&u(n);d.length;)d.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var e,n=0;n<i.length;n++){for(var t=i[n],o=!0,s=1;s<t.length;s++){var l=t[s];0!==r[l]&&(o=!1)}o&&(i.splice(n--,1),e=a(a.s=t[0]))}return e}var o={},r={1:0},i=[];function a(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(e){var n=[],t=r[e];if(0!==t)if(t)n.push(t[2]);else{var o=new Promise((function(n,o){t=r[e]=[n,o]}));n.push(t[2]=o);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.src=function(e){return a.p+"assets/js/"+({}[e]||e)+"."+{2:"57bf108e",3:"9f873c5b",4:"fc0c659c",5:"7726045b",6:"6bed9d83",7:"1a383800",8:"9c087d84",9:"6ae67583",10:"26f2bc57",11:"215ce70d",12:"f408468b",13:"c03937e9",14:"641683f1",15:"846a7b7b",16:"c5751528",17:"cfa41920",18:"5a1ee49a",19:"3ba442a0",20:"f8240d46",21:"0fbda3cc",22:"555b37c4",23:"e3698e1a",24:"33e0ebdd",25:"d2a30483",26:"c0e23bd8",27:"bbbd6620",28:"84d70bdb",29:"da9fd454",30:"bdc336ac",31:"301c8ad7",32:"dc8a0b29",33:"76a03771",34:"e064a996",35:"586f0e8f",36:"b6cf674f",37:"5f0aa72a",38:"cac2a24f",39:"0b0ed750",40:"d223a878",41:"9c94adad",42:"25048fb4",43:"d31736e5",44:"323efe3d",45:"785d0f91",46:"2e3f8639",47:"9e42c418",48:"03053e2d",49:"efe2f9eb"}[e]+".js"}(e);var l=new Error;i=function(n){s.onerror=s.onload=null,clearTimeout(c);var t=r[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+i+")",l.name="ChunkLoadError",l.type=o,l.request=i,t[1](l)}r[e]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(n)},a.m=e,a.c=o,a.d=function(e,n,t){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)a.d(t,o,function(n){return e[n]}.bind(null,o));return t},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="/OpenCore-Post-Install/",a.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var u=l;i.push([100,0]),t()}([function(e,n,t){var o=t(53),r=o.all;e.exports=o.IS_HTMLDDA?function(e){return"function"==typeof e||e===r}:function(e){return"function"==typeof e}},function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){var o=t(27),r=Function.prototype,i=r.call,a=o&&r.bind.bind(i,i);e.exports=o?a:function(e){return function(){return i.apply(e,arguments)}}},function(e,n,t){var o=t(2);e.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var o=t(67),r="object"==typeof self&&self&&self.Object===Object&&self,i=o||r||Function("return this")();e.exports=i},function(e,n,t){var o=t(3),r=t(30),i=o({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return i(r(e),n)}},function(e,n,t){var o=t(0),r=t(53),i=r.all;e.exports=r.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:o(e)||e===i}:function(e){return"object"==typeof e?null!==e:o(e)}},function(e,n,t){var o=t(159),r=t(162);e.exports=function(e,n){var t=r(e,n);return o(t)?t:void 0}},function(e,n,t){"use strict";function o(e,n,t,o,r,i,a,s){var l,c="function"==typeof e?e.options:e;if(n&&(c.render=n,c.staticRenderFns=t,c._compiled=!0),o&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),a?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},c._ssrRegister=l):r&&(l=s?function(){r.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:r),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,n){return l.call(n),u(e,n)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:e,options:c}}t.d(n,"a",(function(){return o}))},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var o=t(13),r=t(144),i=t(145),a=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?r(e):i(e)}},function(e,n,t){var o=t(6).Symbol;e.exports=o},function(e,n,t){var o=t(4),r=t(62),i=t(96),a=t(25),s=t(52),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;n.f=o?i?function(e,n,t){if(a(e),n=s(n),a(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var o=u(e,n);o&&o.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return c(e,n,t)}:c:function(e,n,t){if(a(e),n=s(n),a(t),r)try{return c(e,n,t)}catch(e){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var o=t(3),r=o({}.toString),i=o("".slice);e.exports=function(e){return i(r(e),8,-1)}},function(e,n,t){var o=t(1),r=t(0),i=function(e){return r(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?i(o[e]):o[e]&&o[e][n]}},function(e,n,t){var o=t(4),r=t(14),i=t(33);e.exports=o?function(e,n,t){return r.f(e,n,i(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(149),r=t(150),i=t(151),a=t(152),s=t(153);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(69);e.exports=function(e,n){for(var t=e.length;t--;)if(o(e[t][0],n))return t;return-1}},function(e,n,t){var o=t(9)(Object,"create");e.exports=o},function(e,n,t){var o=t(171);e.exports=function(e,n){var t=e.__data__;return o(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var o=t(43);e.exports=function(e){if("string"==typeof e||o(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,h=function(){return c.Date.now()};function m(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function f(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(m(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=m(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=r.test(e);return s||i.test(e)?a(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,n,t){var o,r,i,a,s,l,c=0,u=!1,g=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(n){var t=o,i=r;return o=r=void 0,c=n,a=e.apply(i,t)}function v(e){return c=e,s=setTimeout(x,n),u?b(e):a}function w(e){var t=e-l;return void 0===l||t>=n||t<0||g&&e-c>=i}function x(){var e=h();if(w(e))return k(e);s=setTimeout(x,function(e){var t=n-(e-l);return g?d(t,i-(e-c)):t}(e))}function k(e){return s=void 0,y&&o?b(e):(o=r=void 0,a)}function S(){var e=h(),t=w(e);if(o=arguments,r=this,l=e,t){if(void 0===s)return v(l);if(g)return s=setTimeout(x,n),b(l)}return void 0===s&&(s=setTimeout(x,n)),a}return n=f(n)||0,m(t)&&(u=!!t.leading,i=(g="maxWait"in t)?p(f(t.maxWait)||0,n):i,y="trailing"in t?!!t.trailing:y),S.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=r=s=void 0},S.flush=function(){return void 0===s?a:k(h())},S}},function(e,n,t){var o,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(o=function(){var e,n,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(e,n,t){return e<n?n:e>t?t:e}function i(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(o[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=r(e,o.minimum,1),t.status=1===e?null:e;var l=t.render(!n),c=l.querySelector(o.barSelector),u=o.speed,p=o.easing;return l.offsetWidth,a((function(n){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(c,function(e,n,t){var r;return(r="translate3d"===o.positionUsing?{transform:"translate3d("+i(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+i(e)+"%,0)"}:{"margin-left":i(e)+"%"}).transition="all "+n+"ms "+t,r}(e,u,p)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),u)}),u)):setTimeout(n,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*r(Math.random()*n,.1,.95)),n=r(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},e=0,n=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===n&&t.start(),e++,n++,o.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=o.template;var r,a=n.querySelector(o.barSelector),l=e?"-100":i(t.status||0),u=document.querySelector(o.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(r=n.querySelector(o.spinnerSelector))&&d(r),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(n),n},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&d(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var a=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var o,r=e.length,i=n.charAt(0).toUpperCase()+n.slice(1);r--;)if((o=e[r]+i)in t)return o;return n}(t))}function o(e,n,o){n=t(n),e.style[n]=o}return function(e,n){var t,r,i=arguments;if(2==i.length)for(t in n)void 0!==(r=n[t])&&n.hasOwnProperty(t)&&o(e,t,r);else o(e,i[1],i[2])}}();function l(e,n){return("string"==typeof e?e:p(e)).indexOf(" "+n+" ")>=0}function c(e,n){var t=p(e),o=t+n;l(t,n)||(e.className=o.substring(1))}function u(e,n){var t,o=p(e);l(e,n)&&(t=o.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function p(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function d(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?o.call(n,t,n,e):o)||(e.exports=r)},function(e,n,t){var o=t(8),r=String,i=TypeError;e.exports=function(e){if(o(e))return e;throw i(r(e)+" is not an object")}},function(e,n,t){var o=t(1),r=t(49).f,i=t(17),a=t(108),s=t(35),l=t(63),c=t(121);e.exports=function(e,n){var t,u,p,d,h,m=e.target,f=e.global,g=e.stat;if(t=f?o:g?o[m]||s(m,{}):(o[m]||{}).prototype)for(u in n){if(d=n[u],p=e.dontCallGetSet?(h=r(t,u))&&h.value:t[u],!c(f?u:m+(g?".":"#")+u,e.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(e.sham||p&&p.sham)&&i(d,"sham",!0),a(t,u,d,e)}}},function(e,n,t){var o=t(2);e.exports=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){var o=t(45),r=t(50);e.exports=function(e){return o(r(e))}},function(e,n,t){var o=t(1),r=t(59),i=t(7),a=t(61),s=t(57),l=t(56),c=r("wks"),u=o.Symbol,p=u&&u.for,d=l?u:u&&u.withoutSetter||a;e.exports=function(e){if(!i(c,e)||!s&&"string"!=typeof c[e]){var n="Symbol."+e;s&&i(u,e)?c[e]=u[e]:c[e]=l&&p?p(n):d(n)}return c[e]}},function(e,n,t){var o=t(50),r=Object;e.exports=function(e){return r(o(e))}},function(e,n,t){var o=t(119);e.exports=function(e){return o(e.length)}},function(e,n,t){var o=t(27),r=Function.prototype.call;e.exports=o?r.bind(r):function(){return r.apply(r,arguments)}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var o=t(1),r=t(35),i=o["__core-js_shared__"]||r("__core-js_shared__",{});e.exports=i},function(e,n,t){var o=t(1),r=Object.defineProperty;e.exports=function(e,n){try{r(o,e,{value:n,configurable:!0,writable:!0})}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(143),r=t(11),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return r(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var o=t(9)(t(6),"Map");e.exports=o},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var o=t(163),r=t(170),i=t(172),a=t(173),s=t(174);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var o=t(5),r=t(43),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,n){if(o(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!r(e))||(a.test(e)||!i.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var o=t(12),r=t(11);e.exports=function(e){return"symbol"==typeof e||r(e)&&"[object Symbol]"==o(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){var o=t(3),r=t(2),i=t(15),a=Object,s=o("".split);e.exports=r((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?s(e,""):a(e)}:a},function(e,n,t){var o=t(0),r=t(106),i=TypeError;e.exports=function(e){if(o(e))return e;throw i(r(e)+" is not a function")}},function(e,n){e.exports={}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){var o=t(4),r=t(32),i=t(102),a=t(33),s=t(28),l=t(52),c=t(7),u=t(62),p=Object.getOwnPropertyDescriptor;n.f=o?p:function(e,n){if(e=s(e),n=l(n),u)try{return p(e,n)}catch(e){}if(c(e,n))return a(!r(i.f,e,n),e[n])}},function(e,n,t){var o=t(51),r=TypeError;e.exports=function(e){if(o(e))throw r("Can't call method on "+e);return e}},function(e,n){e.exports=function(e){return null==e}},function(e,n,t){var o=t(103),r=t(54);e.exports=function(e){var n=o(e,"string");return r(n)?n:n+""}},function(e,n){var t="object"==typeof document&&document.all,o=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:o}},function(e,n,t){var o=t(16),r=t(0),i=t(55),a=t(56),s=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var n=o("Symbol");return r(n)&&i(n.prototype,s(e))}},function(e,n,t){var o=t(3);e.exports=o({}.isPrototypeOf)},function(e,n,t){var o=t(57);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var o=t(58),r=t(2);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(e,n,t){var o,r,i=t(1),a=t(104),s=i.process,l=i.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(r=(o=u.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!r&&a&&(!(o=a.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=a.match(/Chrome\/(\d+)/))&&(r=+o[1]),e.exports=r},function(e,n,t){var o=t(60),r=t(34);(e.exports=function(e,n){return r[e]||(r[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.27.1",mode:o?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.27.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n){e.exports=!1},function(e,n,t){var o=t(3),r=0,i=Math.random(),a=o(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++r+i,36)}},function(e,n,t){var o=t(4),r=t(2),i=t(95);e.exports=!o&&!r((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var o=t(7),r=t(114),i=t(49),a=t(14);e.exports=function(e,n,t){for(var s=r(n),l=a.f,c=i.f,u=0;u<s.length;u++){var p=s[u];o(e,p)||t&&o(t,p)||l(e,p,c(n,p))}}},function(e,n,t){var o=t(118);e.exports=function(e){var n=+e;return n!=n||0===n?0:o(n)}},function(e,n,t){var o=t(3),r=t(25),i=t(131);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),n=t instanceof Array}catch(e){}return function(t,o){return r(t),i(o),n?e(t,o):t.__proto__=o,t}}():void 0)},function(e,n){e.exports=function(e,n){for(var t=-1,o=n.length,r=e.length;++t<o;)e[r+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var o=t(18),r=t(154),i=t(155),a=t(156),s=t(157),l=t(158);function c(e){var n=this.__data__=new o(e);this.size=n.size}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var o=t(12),r=t(38);e.exports=function(e){if(!r(e))return!1;var n=o(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var o=t(175),r=t(11);e.exports=function e(n,t,i,a,s){return n===t||(null==n||null==t||!r(n)&&!r(t)?n!=n&&t!=t:o(n,t,i,a,e,s))}},function(e,n,t){var o=t(74),r=t(178),i=t(75);e.exports=function(e,n,t,a,s,l){var c=1&t,u=e.length,p=n.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(e),h=l.get(n);if(d&&h)return d==n&&h==e;var m=-1,f=!0,g=2&t?new o:void 0;for(l.set(e,n),l.set(n,e);++m<u;){var y=e[m],b=n[m];if(a)var v=c?a(b,y,m,n,e,l):a(y,b,m,e,n,l);if(void 0!==v){if(v)continue;f=!1;break}if(g){if(!r(n,(function(e,n){if(!i(g,n)&&(y===e||s(y,e,t,a,l)))return g.push(n)}))){f=!1;break}}else if(y!==b&&!s(y,b,t,a,l)){f=!1;break}}return l.delete(e),l.delete(n),f}},function(e,n,t){var o=t(39),r=t(176),i=t(177);function a(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new o;++n<t;)this.add(e[n])}a.prototype.add=a.prototype.push=r,a.prototype.has=i,e.exports=a},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var o=t(188),r=t(194),i=t(80);e.exports=function(e){return i(e)?o(e):r(e)}},function(e,n,t){(function(e){var o=t(6),r=t(190),i=n&&!n.nodeType&&n,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||r;e.exports=l}).call(this,t(48)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==o||"symbol"!=o&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var o=t(191),r=t(192),i=t(193),a=i&&i.isTypedArray,s=a?r(a):o;e.exports=s},function(e,n,t){var o=t(70),r=t(41);e.exports=function(e){return null!=e&&r(e.length)&&!o(e)}},function(e,n,t){var o=t(9)(t(6),"Set");e.exports=o},function(e,n,t){var o=t(38);e.exports=function(e){return e==e&&!o(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var o=t(85),r=t(22);e.exports=function(e,n){for(var t=0,i=(n=o(n,e)).length;null!=e&&t<i;)e=e[r(n[t++])];return t&&t==i?e:void 0}},function(e,n,t){var o=t(5),r=t(42),i=t(205),a=t(208);e.exports=function(e,n){return o(e)?e:r(e,n)?[e]:i(a(e))}},function(e,n,t){},function(e,n,t){"use strict";n.a=["ThemeManager","BackToTop"]},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(141),r=t(146),i=t(217),a=t(225),s=t(234),l=t(99),c=i((function(e){var n=l(e);return s(n)&&(n=void 0),a(o(e,1,s,!0),r(n,2))}));e.exports=c},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;e.exports=function(e){var n,t=""+e,r=o.exec(t);if(!r)return t;var i="",a=0,s=0;for(a=r.index;a<t.length;a++){switch(t.charCodeAt(a)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==a&&(i+=t.substring(s,a)),s=a+1,i+=n}return s!==a?i+t.substring(s,a):i}},function(e,n,t){!function(){"use strict";e.exports={polyfill:function(){var e=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var t,o=e.HTMLElement||e.Element,r={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:o.prototype.scroll||s,scrollIntoView:o.prototype.scrollIntoView},i=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,a=(t=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(t)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?m.call(e,n.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):r.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(l(arguments[0])?r.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(e,n.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==l(arguments[0])){var e=arguments[0].left,n=arguments[0].top;m.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==l(arguments[0])){var t=d(this),o=t.getBoundingClientRect(),i=this.getBoundingClientRect();t!==n.body?(m.call(this,t,t.scrollLeft+i.left-o.left,t.scrollTop+i.top-o.top),"fixed"!==e.getComputedStyle(t).position&&e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function s(e,n){this.scrollLeft=e,this.scrollTop=n}function l(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(e,n){return"Y"===n?e.clientHeight+a<e.scrollHeight:"X"===n?e.clientWidth+a<e.scrollWidth:void 0}function u(n,t){var o=e.getComputedStyle(n,null)["overflow"+t];return"auto"===o||"scroll"===o}function p(e){var n=c(e,"Y")&&u(e,"Y"),t=c(e,"X")&&u(e,"X");return n||t}function d(e){for(;e!==n.body&&!1===p(e);)e=e.parentNode||e.host;return e}function h(n){var t,o,r,a,s=(i()-n.startTime)/468;a=s=s>1?1:s,t=.5*(1-Math.cos(Math.PI*a)),o=n.startX+(n.x-n.startX)*t,r=n.startY+(n.y-n.startY)*t,n.method.call(n.scrollable,o,r),o===n.x&&r===n.y||e.requestAnimationFrame(h.bind(e,n))}function m(t,o,a){var l,c,u,p,d=i();t===n.body?(l=e,c=e.scrollX||e.pageXOffset,u=e.scrollY||e.pageYOffset,p=r.scroll):(l=t,c=t.scrollLeft,u=t.scrollTop,p=s),h({scrollable:l,method:p,startTime:d,startX:c,startY:u,x:o,y:a})}}}}()},function(e,n,t){"use strict";var o=t(26),r=t(30),i=t(31),a=t(125),s=t(127),l=t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)})),c=!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}();o({target:"Array",proto:!0,arity:1,forced:l||c},{push:function(e){var n=r(this),t=i(n),o=arguments.length;s(t+o);for(var l=0;l<o;l++)n[t]=arguments[l],t++;return a(n,t),t}})},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){var o=t(1),r=t(8),i=o.document,a=r(i)&&r(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,n,t){var o=t(4),r=t(2);e.exports=o&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){var o=t(59),r=t(61),i=o("keys");e.exports=function(e){return i[e]||(i[e]=r(e))}},function(e,n,t){var o=t(3),r=t(7),i=t(28),a=t(116).indexOf,s=t(47),l=o([].push);e.exports=function(e,n){var t,o=i(e),c=0,u=[];for(t in o)!r(s,t)&&r(o,t)&&l(u,t);for(;n.length>c;)r(o,t=n[c++])&&(~a(u,t)||l(u,t));return u}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){e.exports=t(242)},function(e,n,t){"use strict";var o=t(26),r=t(122).left,i=t(123),a=t(58),s=t(124);o({target:"Array",proto:!0,forced:!i("reduce")||!s&&a>79&&a<83},{reduce:function(e){var n=arguments.length;return r(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!o.call({1:2},1);n.f=i?function(e){var n=r(this,e);return!!n&&n.enumerable}:o},function(e,n,t){var o=t(32),r=t(8),i=t(54),a=t(105),s=t(107),l=t(29),c=TypeError,u=l("toPrimitive");e.exports=function(e,n){if(!r(e)||i(e))return e;var t,l=a(e,u);if(l){if(void 0===n&&(n="default"),t=o(l,e,n),!r(t)||i(t))return t;throw c("Can't convert object to primitive value")}return void 0===n&&(n="number"),s(e,n)}},function(e,n,t){var o=t(16);e.exports=o("navigator","userAgent")||""},function(e,n,t){var o=t(46),r=t(51);e.exports=function(e,n){var t=e[n];return r(t)?void 0:o(t)}},function(e,n){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},function(e,n,t){var o=t(32),r=t(0),i=t(8),a=TypeError;e.exports=function(e,n){var t,s;if("string"===n&&r(t=e.toString)&&!i(s=o(t,e)))return s;if(r(t=e.valueOf)&&!i(s=o(t,e)))return s;if("string"!==n&&r(t=e.toString)&&!i(s=o(t,e)))return s;throw a("Can't convert object to primitive value")}},function(e,n,t){var o=t(0),r=t(14),i=t(109),a=t(35);e.exports=function(e,n,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:n;if(o(t)&&i(t,c,s),s.global)l?e[n]=t:a(n,t);else{try{s.unsafe?e[n]&&(l=!0):delete e[n]}catch(e){}l?e[n]=t:r.f(e,n,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,n,t){var o=t(2),r=t(0),i=t(7),a=t(4),s=t(110).CONFIGURABLE,l=t(111),c=t(112),u=c.enforce,p=c.get,d=Object.defineProperty,h=a&&!o((function(){return 8!==d((function(){}),"length",{value:8}).length})),m=String(String).split("String"),f=e.exports=function(e,n,t){"Symbol("===String(n).slice(0,7)&&(n="["+String(n).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(n="get "+n),t&&t.setter&&(n="set "+n),(!i(e,"name")||s&&e.name!==n)&&(a?d(e,"name",{value:n,configurable:!0}):e.name=n),h&&t&&i(t,"arity")&&e.length!==t.arity&&d(e,"length",{value:t.arity});try{t&&i(t,"constructor")&&t.constructor?a&&d(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var o=u(e);return i(o,"source")||(o.source=m.join("string"==typeof n?n:"")),e};Function.prototype.toString=f((function(){return r(this)&&p(this).source||l(this)}),"toString")},function(e,n,t){var o=t(4),r=t(7),i=Function.prototype,a=o&&Object.getOwnPropertyDescriptor,s=r(i,"name"),l=s&&"something"===function(){}.name,c=s&&(!o||o&&a(i,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(e,n,t){var o=t(3),r=t(0),i=t(34),a=o(Function.toString);r(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},function(e,n,t){var o,r,i,a=t(113),s=t(1),l=t(8),c=t(17),u=t(7),p=t(34),d=t(97),h=t(47),m=s.TypeError,f=s.WeakMap;if(a||p.state){var g=p.state||(p.state=new f);g.get=g.get,g.has=g.has,g.set=g.set,o=function(e,n){if(g.has(e))throw m("Object already initialized");return n.facade=e,g.set(e,n),n},r=function(e){return g.get(e)||{}},i=function(e){return g.has(e)}}else{var y=d("state");h[y]=!0,o=function(e,n){if(u(e,y))throw m("Object already initialized");return n.facade=e,c(e,y,n),n},r=function(e){return u(e,y)?e[y]:{}},i=function(e){return u(e,y)}}e.exports={set:o,get:r,has:i,enforce:function(e){return i(e)?r(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=r(n)).type!==e)throw m("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){var o=t(1),r=t(0),i=o.WeakMap;e.exports=r(i)&&/native code/.test(String(i))},function(e,n,t){var o=t(16),r=t(3),i=t(115),a=t(120),s=t(25),l=r([].concat);e.exports=o("Reflect","ownKeys")||function(e){var n=i.f(s(e)),t=a.f;return t?l(n,t(e)):n}},function(e,n,t){var o=t(98),r=t(94).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,r)}},function(e,n,t){var o=t(28),r=t(117),i=t(31),a=function(e){return function(n,t,a){var s,l=o(n),c=i(l),u=r(a,c);if(e&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===t)return e||u||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,n,t){var o=t(64),r=Math.max,i=Math.min;e.exports=function(e,n){var t=o(e);return t<0?r(t+n,0):i(t,n)}},function(e,n){var t=Math.ceil,o=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?o:t)(n)}},function(e,n,t){var o=t(64),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var o=t(2),r=t(0),i=/#|\.prototype\./,a=function(e,n){var t=l[s(e)];return t==u||t!=c&&(r(n)?o(n):!!n)},s=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},l=a.data={},c=a.NATIVE="N",u=a.POLYFILL="P";e.exports=a},function(e,n,t){var o=t(46),r=t(30),i=t(45),a=t(31),s=TypeError,l=function(e){return function(n,t,l,c){o(t);var u=r(n),p=i(u),d=a(u),h=e?d-1:0,m=e?-1:1;if(l<2)for(;;){if(h in p){c=p[h],h+=m;break}if(h+=m,e?h<0:d<=h)throw s("Reduce of empty array with no initial value")}for(;e?h>=0:d>h;h+=m)h in p&&(c=t(c,p[h],h,u));return c}};e.exports={left:l(!1),right:l(!0)}},function(e,n,t){"use strict";var o=t(2);e.exports=function(e,n){var t=[][e];return!!t&&o((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){var o=t(15),r=t(1);e.exports="process"==o(r.process)},function(e,n,t){"use strict";var o=t(4),r=t(126),i=TypeError,a=Object.getOwnPropertyDescriptor,s=o&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,n){if(r(e)&&!a(e,"length").writable)throw i("Cannot set read only .length");return e.length=n}:function(e,n){return e.length=n}},function(e,n,t){var o=t(15);e.exports=Array.isArray||function(e){return"Array"==o(e)}},function(e,n){var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},function(e,n,t){var o=t(26),r=t(1),i=t(129),a=t(130),s=r.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(e,n){var t={};t[e]=a(e,n,l),o({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(e,n){if(s&&s[e]){var t={};t[e]=a("WebAssembly."+e,n,l),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(e){return function(n){return i(e,this,arguments)}})),c("EvalError",(function(e){return function(n){return i(e,this,arguments)}})),c("RangeError",(function(e){return function(n){return i(e,this,arguments)}})),c("ReferenceError",(function(e){return function(n){return i(e,this,arguments)}})),c("SyntaxError",(function(e){return function(n){return i(e,this,arguments)}})),c("TypeError",(function(e){return function(n){return i(e,this,arguments)}})),c("URIError",(function(e){return function(n){return i(e,this,arguments)}})),u("CompileError",(function(e){return function(n){return i(e,this,arguments)}})),u("LinkError",(function(e){return function(n){return i(e,this,arguments)}})),u("RuntimeError",(function(e){return function(n){return i(e,this,arguments)}}))},function(e,n,t){var o=t(27),r=Function.prototype,i=r.apply,a=r.call;e.exports="object"==typeof Reflect&&Reflect.apply||(o?a.bind(i):function(){return a.apply(i,arguments)})},function(e,n,t){"use strict";var o=t(16),r=t(7),i=t(17),a=t(55),s=t(65),l=t(63),c=t(132),u=t(133),p=t(134),d=t(138),h=t(139),m=t(140),f=t(4),g=t(60);e.exports=function(e,n,t,y){var b=y?2:1,v=e.split("."),w=v[v.length-1],x=o.apply(null,v);if(x){var k=x.prototype;if(!g&&r(k,"cause")&&delete k.cause,!t)return x;var S=o("Error"),C=n((function(e,n){var t=p(y?n:e,void 0),o=y?new x(e):new x;return void 0!==t&&i(o,"message",t),m&&i(o,"stack",h(o.stack,2)),this&&a(k,this)&&u(o,this,C),arguments.length>b&&d(o,arguments[b]),o}));if(C.prototype=k,"Error"!==w?s?s(C,S):l(C,S,{name:!0}):f&&"stackTraceLimit"in x&&(c(C,x,"stackTraceLimit"),c(C,x,"prepareStackTrace")),l(C,x),!g)try{k.name!==w&&i(k,"name",w),k.constructor=C}catch(e){}return C}}},function(e,n,t){var o=t(0),r=String,i=TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw i("Can't set "+r(e)+" as a prototype")}},function(e,n,t){var o=t(14).f;e.exports=function(e,n,t){t in e||o(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){var o=t(0),r=t(8),i=t(65);e.exports=function(e,n,t){var a,s;return i&&o(a=n.constructor)&&a!==t&&r(s=a.prototype)&&s!==t.prototype&&i(e,s),e}},function(e,n,t){var o=t(135);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:o(e)}},function(e,n,t){var o=t(136),r=String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return r(e)}},function(e,n,t){var o=t(137),r=t(0),i=t(15),a=t(29)("toStringTag"),s=Object,l="Arguments"==i(function(){return arguments}());e.exports=o?i:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=s(e),a))?t:l?i(n):"Object"==(o=i(n))&&r(n.callee)?"Arguments":o}},function(e,n,t){var o={};o[t(29)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){var o=t(8),r=t(17);e.exports=function(e,n){o(n)&&"cause"in n&&r(e,"cause",n.cause)}},function(e,n,t){var o=t(3),r=Error,i=o("".replace),a=String(r("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(a);e.exports=function(e,n){if(l&&"string"==typeof e&&!r.prepareStackTrace)for(;n--;)e=i(e,s,"");return e}},function(e,n,t){var o=t(2),r=t(33);e.exports=!o((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",r(1,7)),7!==e.stack)}))},function(e,n,t){var o=t(66),r=t(142);e.exports=function e(n,t,i,a,s){var l=-1,c=n.length;for(i||(i=r),s||(s=[]);++l<c;){var u=n[l];t>0&&i(u)?t>1?e(u,t-1,i,a,s):o(s,u):a||(s[s.length]=u)}return s}},function(e,n,t){var o=t(13),r=t(36),i=t(5),a=o?o.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||r(e)||!!(a&&e&&e[a])}},function(e,n,t){var o=t(12),r=t(11);e.exports=function(e){return r(e)&&"[object Arguments]"==o(e)}},function(e,n,t){var o=t(13),r=Object.prototype,i=r.hasOwnProperty,a=r.toString,s=o?o.toStringTag:void 0;e.exports=function(e){var n=i.call(e,s),t=e[s];try{e[s]=void 0;var o=!0}catch(e){}var r=a.call(e);return o&&(n?e[s]=t:delete e[s]),r}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var o=t(147),r=t(203),i=t(44),a=t(5),s=t(214);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?a(e)?r(e[0],e[1]):o(e):s(e)}},function(e,n,t){var o=t(148),r=t(202),i=t(83);e.exports=function(e){var n=r(e);return 1==n.length&&n[0][2]?i(n[0][0],n[0][1]):function(t){return t===e||o(t,e,n)}}},function(e,n,t){var o=t(68),r=t(72);e.exports=function(e,n,t,i){var a=t.length,s=a,l=!i;if(null==e)return!s;for(e=Object(e);a--;){var c=t[a];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++a<s;){var u=(c=t[a])[0],p=e[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in e))return!1}else{var h=new o;if(i)var m=i(p,d,u,e,n,h);if(!(void 0===m?r(d,p,3,i,h):m))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var o=t(19),r=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=o(n,e);return!(t<0)&&(t==n.length-1?n.pop():r.call(n,t,1),--this.size,!0)}},function(e,n,t){var o=t(19);e.exports=function(e){var n=this.__data__,t=o(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var o=t(19);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,n,t){var o=t(19);e.exports=function(e,n){var t=this.__data__,r=o(t,e);return r<0?(++this.size,t.push([e,n])):t[r][1]=n,this}},function(e,n,t){var o=t(18);e.exports=function(){this.__data__=new o,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var o=t(18),r=t(37),i=t(39);e.exports=function(e,n){var t=this.__data__;if(t instanceof o){var a=t.__data__;if(!r||a.length<199)return a.push([e,n]),this.size=++t.size,this;t=this.__data__=new i(a)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var o=t(70),r=t(160),i=t(38),a=t(71),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||r(e))&&(o(e)?d:s).test(a(e))}},function(e,n,t){var o,r=t(161),i=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!i&&i in e}},function(e,n,t){var o=t(6)["__core-js_shared__"];e.exports=o},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var o=t(164),r=t(18),i=t(37);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(i||r),string:new o}}},function(e,n,t){var o=t(165),r=t(166),i=t(167),a=t(168),s=t(169);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(20);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var o=t(20),r=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(o){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return r.call(n,e)?n[e]:void 0}},function(e,n,t){var o=t(20),r=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return o?void 0!==n[e]:r.call(n,e)}},function(e,n,t){var o=t(20);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=o&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var o=t(21);e.exports=function(e){var n=o(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var o=t(21);e.exports=function(e){return o(this,e).get(e)}},function(e,n,t){var o=t(21);e.exports=function(e){return o(this,e).has(e)}},function(e,n,t){var o=t(21);e.exports=function(e,n){var t=o(this,e),r=t.size;return t.set(e,n),this.size+=t.size==r?0:1,this}},function(e,n,t){var o=t(68),r=t(73),i=t(179),a=t(182),s=t(198),l=t(5),c=t(77),u=t(79),p="[object Object]",d=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,h,m,f){var g=l(e),y=l(n),b=g?"[object Array]":s(e),v=y?"[object Array]":s(n),w=(b="[object Arguments]"==b?p:b)==p,x=(v="[object Arguments]"==v?p:v)==p,k=b==v;if(k&&c(e)){if(!c(n))return!1;g=!0,w=!1}if(k&&!w)return f||(f=new o),g||u(e)?r(e,n,t,h,m,f):i(e,n,b,t,h,m,f);if(!(1&t)){var S=w&&d.call(e,"__wrapped__"),C=x&&d.call(n,"__wrapped__");if(S||C){var A=S?e.value():e,P=C?n.value():n;return f||(f=new o),m(A,P,t,h,f)}}return!!k&&(f||(f=new o),a(e,n,t,h,m,f))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var o=t(13),r=t(180),i=t(69),a=t(73),s=t(181),l=t(40),c=o?o.prototype:void 0,u=c?c.valueOf:void 0;e.exports=function(e,n,t,o,c,p,d){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!p(new r(e),new r(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var h=s;case"[object Set]":var m=1&o;if(h||(h=l),e.size!=n.size&&!m)return!1;var f=d.get(e);if(f)return f==n;o|=2,d.set(e,n);var g=a(h(e),h(n),o,c,p,d);return d.delete(e),g;case"[object Symbol]":if(u)return u.call(e)==u.call(n)}return!1}},function(e,n,t){var o=t(6).Uint8Array;e.exports=o},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,o){t[++n]=[o,e]})),t}},function(e,n,t){var o=t(183),r=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,i,a,s){var l=1&t,c=o(e),u=c.length;if(u!=o(n).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in n:r.call(n,d)))return!1}var h=s.get(e),m=s.get(n);if(h&&m)return h==n&&m==e;var f=!0;s.set(e,n),s.set(n,e);for(var g=l;++p<u;){var y=e[d=c[p]],b=n[d];if(i)var v=l?i(b,y,d,n,e,s):i(y,b,d,e,n,s);if(!(void 0===v?y===b||a(y,b,t,i,s):v)){f=!1;break}g||(g="constructor"==d)}if(f&&!g){var w=e.constructor,x=n.constructor;w==x||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x||(f=!1)}return s.delete(e),s.delete(n),f}},function(e,n,t){var o=t(184),r=t(185),i=t(76);e.exports=function(e){return o(e,i,r)}},function(e,n,t){var o=t(66),r=t(5);e.exports=function(e,n,t){var i=n(e);return r(e)?i:o(i,t(e))}},function(e,n,t){var o=t(186),r=t(187),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(e){return null==e?[]:(e=Object(e),o(a(e),(function(n){return i.call(e,n)})))}:r;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,r=0,i=[];++t<o;){var a=e[t];n(a,t,e)&&(i[r++]=a)}return i}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var o=t(189),r=t(36),i=t(5),a=t(77),s=t(78),l=t(79),c=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=i(e),u=!t&&r(e),p=!t&&!u&&a(e),d=!t&&!u&&!p&&l(e),h=t||u||p||d,m=h?o(e.length,String):[],f=m.length;for(var g in e)!n&&!c.call(e,g)||h&&("length"==g||p&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,f))||m.push(g);return m}},function(e,n){e.exports=function(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var o=t(12),r=t(41),i=t(11),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&r(e.length)&&!!a[o(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var o=t(67),r=n&&!n.nodeType&&n,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===r&&o.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=s}).call(this,t(48)(e))},function(e,n,t){var o=t(195),r=t(196),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return r(e);var n=[];for(var t in Object(e))i.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var o=t(197)(Object.keys,Object);e.exports=o},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var o=t(199),r=t(37),i=t(200),a=t(81),s=t(201),l=t(12),c=t(71),u=c(o),p=c(r),d=c(i),h=c(a),m=c(s),f=l;(o&&"[object DataView]"!=f(new o(new ArrayBuffer(1)))||r&&"[object Map]"!=f(new r)||i&&"[object Promise]"!=f(i.resolve())||a&&"[object Set]"!=f(new a)||s&&"[object WeakMap]"!=f(new s))&&(f=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,o=t?c(t):"";if(o)switch(o){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return n}),e.exports=f},function(e,n,t){var o=t(9)(t(6),"DataView");e.exports=o},function(e,n,t){var o=t(9)(t(6),"Promise");e.exports=o},function(e,n,t){var o=t(9)(t(6),"WeakMap");e.exports=o},function(e,n,t){var o=t(82),r=t(76);e.exports=function(e){for(var n=r(e),t=n.length;t--;){var i=n[t],a=e[i];n[t]=[i,a,o(a)]}return n}},function(e,n,t){var o=t(72),r=t(204),i=t(211),a=t(42),s=t(82),l=t(83),c=t(22);e.exports=function(e,n){return a(e)&&s(n)?l(c(e),n):function(t){var a=r(t,e);return void 0===a&&a===n?i(t,e):o(n,a,3)}}},function(e,n,t){var o=t(84);e.exports=function(e,n,t){var r=null==e?void 0:o(e,n);return void 0===r?t:r}},function(e,n,t){var o=t(206),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=o((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(r,(function(e,t,o,r){n.push(o?r.replace(i,"$1"):t||e)})),n}));e.exports=a},function(e,n,t){var o=t(207);e.exports=function(e){var n=o(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var o=t(39);function r(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var o=arguments,r=n?n.apply(this,o):o[0],i=t.cache;if(i.has(r))return i.get(r);var a=e.apply(this,o);return t.cache=i.set(r,a)||i,a};return t.cache=new(r.Cache||o),t}r.Cache=o,e.exports=r},function(e,n,t){var o=t(209);e.exports=function(e){return null==e?"":o(e)}},function(e,n,t){var o=t(13),r=t(210),i=t(5),a=t(43),s=o?o.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(i(n))return r(n,e)+"";if(a(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,r=Array(o);++t<o;)r[t]=n(e[t],t,e);return r}},function(e,n,t){var o=t(212),r=t(213);e.exports=function(e,n){return null!=e&&r(e,n,o)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var o=t(85),r=t(36),i=t(5),a=t(78),s=t(41),l=t(22);e.exports=function(e,n,t){for(var c=-1,u=(n=o(n,e)).length,p=!1;++c<u;){var d=l(n[c]);if(!(p=null!=e&&t(e,d)))break;e=e[d]}return p||++c!=u?p:!!(u=null==e?0:e.length)&&s(u)&&a(d,u)&&(i(e)||r(e))}},function(e,n,t){var o=t(215),r=t(216),i=t(42),a=t(22);e.exports=function(e){return i(e)?o(a(e)):r(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var o=t(84);e.exports=function(e){return function(n){return o(n,e)}}},function(e,n,t){var o=t(44),r=t(218),i=t(220);e.exports=function(e,n){return i(r(e,n,o),e+"")}},function(e,n,t){var o=t(219),r=Math.max;e.exports=function(e,n,t){return n=r(void 0===n?e.length-1:n,0),function(){for(var i=arguments,a=-1,s=r(i.length-n,0),l=Array(s);++a<s;)l[a]=i[n+a];a=-1;for(var c=Array(n+1);++a<n;)c[a]=i[a];return c[n]=t(l),o(e,this,c)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var o=t(221),r=t(224)(o);e.exports=r},function(e,n,t){var o=t(222),r=t(223),i=t(44),a=r?function(e,n){return r(e,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:i;e.exports=a},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var o=t(9),r=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=r},function(e,n){var t=Date.now;e.exports=function(e){var n=0,o=0;return function(){var r=t(),i=16-(r-o);if(o=r,i>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var o=t(74),r=t(226),i=t(231),a=t(75),s=t(232),l=t(40);e.exports=function(e,n,t){var c=-1,u=r,p=e.length,d=!0,h=[],m=h;if(t)d=!1,u=i;else if(p>=200){var f=n?null:s(e);if(f)return l(f);d=!1,u=a,m=new o}else m=n?[]:h;e:for(;++c<p;){var g=e[c],y=n?n(g):g;if(g=t||0!==g?g:0,d&&y==y){for(var b=m.length;b--;)if(m[b]===y)continue e;n&&m.push(y),h.push(g)}else u(m,y,t)||(m!==h&&m.push(y),h.push(g))}return h}},function(e,n,t){var o=t(227);e.exports=function(e,n){return!!(null==e?0:e.length)&&o(e,n,0)>-1}},function(e,n,t){var o=t(228),r=t(229),i=t(230);e.exports=function(e,n,t){return n==n?i(e,n,t):o(e,r,t)}},function(e,n){e.exports=function(e,n,t,o){for(var r=e.length,i=t+(o?1:-1);o?i--:++i<r;)if(n(e[i],i,e))return i;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var o=t-1,r=e.length;++o<r;)if(e[o]===n)return o;return-1}},function(e,n){e.exports=function(e,n,t){for(var o=-1,r=null==e?0:e.length;++o<r;)if(t(n,e[o]))return!0;return!1}},function(e,n,t){var o=t(81),r=t(233),i=t(40),a=o&&1/i(new o([,-0]))[1]==1/0?function(e){return new o(e)}:r;e.exports=a},function(e,n){e.exports=function(){}},function(e,n,t){var o=t(80),r=t(11);e.exports=function(e){return r(e)&&o(e)}},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(86)},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(88)},function(e,n,t){"use strict";t(89)},function(e,n,t){"use strict";t.r(n);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),r=Array.isArray;function i(e){return null==e}function a(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return"function"==typeof e}function u(e){return null!==e&&"object"==typeof e}var p=Object.prototype.toString;function d(e){return"[object Object]"===p.call(e)}function h(e){return"[object RegExp]"===p.call(e)}function m(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function f(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===p?JSON.stringify(e,null,2):String(e)}function y(e){var n=parseFloat(e);return isNaN(n)?e:n}function b(e,n){for(var t=Object.create(null),o=e.split(","),r=0;r<o.length;r++)t[o[r]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}b("slot,component",!0);var v=b("key,ref,slot,slot-scope,is");function w(e,n){var t=e.length;if(t){if(n===e[t-1])return void(e.length=t-1);var o=e.indexOf(n);if(o>-1)return e.splice(o,1)}}var x=Object.prototype.hasOwnProperty;function k(e,n){return x.call(e,n)}function S(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var C=/-(\w)/g,A=S((function(e){return e.replace(C,(function(e,n){return n?n.toUpperCase():""}))})),P=S((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),O=/\B([A-Z])/g,I=S((function(e){return e.replace(O,"-$1").toLowerCase()}));var T=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var o=arguments.length;return o?o>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function M(e,n){n=n||0;for(var t=e.length-n,o=new Array(t);t--;)o[t]=e[t+n];return o}function D(e,n){for(var t in n)e[t]=n[t];return e}function _(e){for(var n={},t=0;t<e.length;t++)e[t]&&D(n,e[t]);return n}function B(e,n,t){}var E=function(e,n,t){return!1},U=function(e){return e};function L(e,n){if(e===n)return!0;var t=u(e),o=u(n);if(!t||!o)return!t&&!o&&String(e)===String(n);try{var r=Array.isArray(e),i=Array.isArray(n);if(r&&i)return e.length===n.length&&e.every((function(e,t){return L(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(r||i)return!1;var a=Object.keys(e),s=Object.keys(n);return a.length===s.length&&a.every((function(t){return L(e[t],n[t])}))}catch(e){return!1}}function R(e,n){for(var t=0;t<e.length;t++)if(L(e[t],n))return t;return-1}function F(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}function N(e,n){return e===n?0===e&&1/e!=1/n:e==e||n==n}var z=["component","directive","filter"],j=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],G={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:E,isReservedAttr:E,isUnknownElement:E,getTagNamespace:B,parsePlatformTagName:U,mustUseProp:E,async:!0,_lifecycleHooks:j},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var n=(e+"").charCodeAt(0);return 36===n||95===n}function $(e,n,t,o){Object.defineProperty(e,n,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var W=new RegExp("[^".concat(V.source,".$_\\d]"));var X="__proto__"in{},q="undefined"!=typeof window,Y=q&&window.navigator.userAgent.toLowerCase(),K=Y&&/msie|trident/.test(Y),Q=Y&&Y.indexOf("msie 9.0")>0,Z=Y&&Y.indexOf("edge/")>0;Y&&Y.indexOf("android");var J=Y&&/iphone|ipad|ipod|ios/.test(Y);Y&&/chrome\/\d+/.test(Y),Y&&/phantomjs/.test(Y);var ee,ne=Y&&Y.match(/firefox\/(\d+)/),te={}.watch,oe=!1;if(q)try{var re={};Object.defineProperty(re,"passive",{get:function(){oe=!0}}),window.addEventListener("test-passive",null,re)}catch(e){}var ie=function(){return void 0===ee&&(ee=!q&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},ae=q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,ce="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ue=null;function pe(e){void 0===e&&(e=null),e||ue&&ue._scope.off(),ue=e,e&&e._scope.on()}var de=function(){function e(e,n,t,o,r,i,a,s){this.tag=e,this.data=n,this.children=t,this.text=o,this.elm=r,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),he=function(e){void 0===e&&(e="");var n=new de;return n.text=e,n.isComment=!0,n};function me(e){return new de(void 0,void 0,void 0,String(e))}function fe(e){var n=new de(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ge=0,ye=[],be=function(){function e(){this._pending=!1,this.id=ge++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,ye.push(this))},e.prototype.depend=function(n){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var n=this.subs.filter((function(e){return e}));for(var t=0,o=n.length;t<o;t++){0,n[t].update()}},e}();be.target=null;var ve=[];function we(e){ve.push(e),be.target=e}function xe(){ve.pop(),be.target=ve[ve.length-1]}var ke=Array.prototype,Se=Object.create(ke);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=ke[e];$(Se,e,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var r,i=n.apply(this,t),a=this.__ob__;switch(e){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&a.observeArray(r),a.dep.notify(),i}))}));var Ce=Object.getOwnPropertyNames(Se),Ae={},Pe=!0;function Oe(e){Pe=e}var Ie={notify:B,depend:B,addSub:B,removeSub:B},Te=function(){function e(e,n,t){if(void 0===n&&(n=!1),void 0===t&&(t=!1),this.value=e,this.shallow=n,this.mock=t,this.dep=t?Ie:new be,this.vmCount=0,$(e,"__ob__",this),r(e)){if(!t)if(X)e.__proto__=Se;else for(var o=0,i=Ce.length;o<i;o++){$(e,s=Ce[o],Se[s])}n||this.observeArray(e)}else{var a=Object.keys(e);for(o=0;o<a.length;o++){var s;De(e,s=a[o],Ae,void 0,n,t)}}}return e.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Me(e[n],!1,this.mock)},e}();function Me(e,n,t){return e&&k(e,"__ob__")&&e.__ob__ instanceof Te?e.__ob__:!Pe||!t&&ie()||!r(e)&&!d(e)||!Object.isExtensible(e)||e.__v_skip||Fe(e)||e instanceof de?void 0:new Te(e,n,t)}function De(e,n,t,o,i,a){var s=new be,l=Object.getOwnPropertyDescriptor(e,n);if(!l||!1!==l.configurable){var c=l&&l.get,u=l&&l.set;c&&!u||t!==Ae&&2!==arguments.length||(t=e[n]);var p=!i&&Me(t,!1,a);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=c?c.call(e):t;return be.target&&(s.depend(),p&&(p.dep.depend(),r(n)&&Ee(n))),Fe(n)&&!i?n.value:n},set:function(n){var o=c?c.call(e):t;if(N(o,n)){if(u)u.call(e,n);else{if(c)return;if(!i&&Fe(o)&&!Fe(n))return void(o.value=n);t=n}p=!i&&Me(n,!1,a),s.notify()}}}),s}}function _e(e,n,t){if(!Re(e)){var o=e.__ob__;return r(e)&&m(n)?(e.length=Math.max(e.length,n),e.splice(n,1,t),o&&!o.shallow&&o.mock&&Me(t,!1,!0),t):n in e&&!(n in Object.prototype)?(e[n]=t,t):e._isVue||o&&o.vmCount?t:o?(De(o.value,n,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(e[n]=t,t)}}function Be(e,n){if(r(e)&&m(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||Re(e)||k(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ee(e){for(var n=void 0,t=0,o=e.length;t<o;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),r(n)&&Ee(n)}function Ue(e){return Le(e,!0),$(e,"__v_isShallow",!0),e}function Le(e,n){if(!Re(e)){Me(e,n,ie());0}}function Re(e){return!(!e||!e.__v_isReadonly)}function Fe(e){return!(!e||!0!==e.__v_isRef)}function Ne(e,n,t){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var e=n[t];if(Fe(e))return e.value;var o=e&&e.__ob__;return o&&o.dep.depend(),e},set:function(e){var o=n[t];Fe(o)&&!Fe(e)?o.value=e:n[t]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var ze;var je=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=ze,!e&&ze&&(this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var n=ze;try{return ze=this,e()}finally{ze=n}}else 0},e.prototype.on=function(){ze=this},e.prototype.off=function(){ze=this.parent},e.prototype.stop=function(e){if(this.active){var n=void 0,t=void 0;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].teardown();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this.active=!1}},e}();function Ge(e){var n=e._provided,t=e.$parent&&e.$parent._provided;return t===n?e._provided=Object.create(t):n}var Ve=S((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),o="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:t,capture:o,passive:n}}));function He(e,n){function t(){var e=t.fns;if(!r(e))return On(e,null,arguments,n,"v-on handler");for(var o=e.slice(),i=0;i<o.length;i++)On(o[i],null,arguments,n,"v-on handler")}return t.fns=e,t}function $e(e,n,t,o,r,a){var l,c,u,p;for(l in e)c=e[l],u=n[l],p=Ve(l),i(c)||(i(u)?(i(c.fns)&&(c=e[l]=He(c,a)),s(p.once)&&(c=e[l]=r(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,e[l]=u));for(l in n)i(e[l])&&o((p=Ve(l)).name,n[l],p.capture)}function We(e,n,t){var o;e instanceof de&&(e=e.data.hook||(e.data.hook={}));var r=e[n];function l(){t.apply(this,arguments),w(o.fns,l)}i(r)?o=He([l]):a(r.fns)&&s(r.merged)?(o=r).fns.push(l):o=He([r,l]),o.merged=!0,e[n]=o}function Xe(e,n,t,o,r){if(a(n)){if(k(n,t))return e[t]=n[t],r||delete n[t],!0;if(k(n,o))return e[t]=n[o],r||delete n[o],!0}return!1}function qe(e){return l(e)?[me(e)]:r(e)?function e(n,t){var o,c,u,p,d=[];for(o=0;o<n.length;o++)i(c=n[o])||"boolean"==typeof c||(u=d.length-1,p=d[u],r(c)?c.length>0&&(Ye((c=e(c,"".concat(t||"","_").concat(o)))[0])&&Ye(p)&&(d[u]=me(p.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Ye(p)?d[u]=me(p.text+c):""!==c&&d.push(me(c)):Ye(c)&&Ye(p)?d[u]=me(p.text+c.text):(s(n._isVList)&&a(c.tag)&&i(c.key)&&a(t)&&(c.key="__vlist".concat(t,"_").concat(o,"__")),d.push(c)));return d}(e):void 0}function Ye(e){return a(e)&&a(e.text)&&!1===e.isComment}function Ke(e,n){var t,o,i,s,l=null;if(r(e)||"string"==typeof e)for(l=new Array(e.length),t=0,o=e.length;t<o;t++)l[t]=n(e[t],t);else if("number"==typeof e)for(l=new Array(e),t=0;t<e;t++)l[t]=n(t+1,t);else if(u(e))if(ce&&e[Symbol.iterator]){l=[];for(var c=e[Symbol.iterator](),p=c.next();!p.done;)l.push(n(p.value,l.length)),p=c.next()}else for(i=Object.keys(e),l=new Array(i.length),t=0,o=i.length;t<o;t++)s=i[t],l[t]=n(e[s],s,t);return a(l)||(l=[]),l._isVList=!0,l}function Qe(e,n,t,o){var r,i=this.$scopedSlots[e];i?(t=t||{},o&&(t=D(D({},o),t)),r=i(t)||(c(n)?n():n)):r=this.$slots[e]||(c(n)?n():n);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},r):r}function Ze(e){return Mt(this.$options,"filters",e,!0)||U}function Je(e,n){return r(e)?-1===e.indexOf(n):e!==n}function en(e,n,t,o,r){var i=G.keyCodes[n]||t;return r&&o&&!G.keyCodes[n]?Je(r,o):i?Je(i,e):o?I(o)!==n:void 0===e}function nn(e,n,t,o,i){if(t)if(u(t)){r(t)&&(t=_(t));var a=void 0,s=function(r){if("class"===r||"style"===r||v(r))a=e;else{var s=e.attrs&&e.attrs.type;a=o||G.mustUseProp(n,s,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=A(r),c=I(r);l in a||c in a||(a[r]=t[r],i&&((e.on||(e.on={}))["update:".concat(r)]=function(e){t[r]=e}))};for(var l in t)s(l)}else;return e}function tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),o=t[e];return o&&!n||rn(o=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),o}function on(e,n,t){return rn(e,"__once__".concat(n).concat(t?"_".concat(t):""),!0),e}function rn(e,n,t){if(r(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&an(e[o],"".concat(n,"_").concat(o),t);else an(e,n,t)}function an(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function sn(e,n){if(n)if(d(n)){var t=e.on=e.on?D({},e.on):{};for(var o in n){var r=t[o],i=n[o];t[o]=r?[].concat(r,i):i}}else;return e}function ln(e,n,t,o){n=n||{$stable:!t};for(var i=0;i<e.length;i++){var a=e[i];r(a)?ln(a,n,t):a&&(a.proxy&&(a.fn.proxy=!0),n[a.key]=a.fn)}return o&&(n.$key=o),n}function cn(e,n){for(var t=0;t<n.length;t+=2){var o=n[t];"string"==typeof o&&o&&(e[n[t]]=n[t+1])}return e}function un(e,n){return"string"==typeof e?n+e:e}function pn(e){e._o=on,e._n=y,e._s=g,e._l=Ke,e._t=Qe,e._q=L,e._i=R,e._m=tn,e._f=Ze,e._k=en,e._b=nn,e._v=me,e._e=he,e._u=ln,e._g=sn,e._d=cn,e._p=un}function dn(e,n){if(!e||!e.length)return{};for(var t={},o=0,r=e.length;o<r;o++){var i=e[o],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==n&&i.fnContext!==n||!a||null==a.slot)(t.default||(t.default=[])).push(i);else{var s=a.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(hn)&&delete t[c];return t}function hn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function mn(e){return e.isComment&&e.asyncFactory}function fn(e,n,t,r){var i,a=Object.keys(t).length>0,s=n?!!n.$stable:!a,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(s&&r&&r!==o&&l===r.$key&&!a&&!r.$hasNormal)return r;for(var c in i={},n)n[c]&&"$"!==c[0]&&(i[c]=gn(e,t,c,n[c]))}else i={};for(var u in t)u in i||(i[u]=yn(t,u));return n&&Object.isExtensible(n)&&(n._normalized=i),$(i,"$stable",s),$(i,"$key",l),$(i,"$hasNormal",a),i}function gn(e,n,t,o){var i=function(){var n=ue;pe(e);var t=arguments.length?o.apply(null,arguments):o({}),i=(t=t&&"object"==typeof t&&!r(t)?[t]:qe(t))&&t[0];return pe(n),t&&(!i||1===t.length&&i.isComment&&!mn(i))?void 0:t};return o.proxy&&Object.defineProperty(n,t,{get:i,enumerable:!0,configurable:!0}),i}function yn(e,n){return function(){return e[n]}}function bn(e){return{get attrs(){if(!e._attrsProxy){var n=e._attrsProxy={};$(n,"_v_attr_proxy",!0),vn(n,e.$attrs,o,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||vn(e._listenersProxy={},e.$listeners,o,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||xn(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:T(e.$emit,e),expose:function(n){n&&Object.keys(n).forEach((function(t){return Ne(e,n,t)}))}}}function vn(e,n,t,o,r){var i=!1;for(var a in n)a in e?n[a]!==t[a]&&(i=!0):(i=!0,wn(e,a,o,r));for(var a in e)a in n||(i=!0,delete e[a]);return i}function wn(e,n,t,o){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){return t[o][n]}})}function xn(e,n){for(var t in n)e[t]=n[t];for(var t in e)t in n||delete e[t]}var kn=null;function Sn(e,n){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?n.extend(e):e}function Cn(e){if(r(e))for(var n=0;n<e.length;n++){var t=e[n];if(a(t)&&(a(t.componentOptions)||mn(t)))return t}}function An(e,n,t,o,p,d){return(r(t)||l(t))&&(p=o,o=t,t=void 0),s(d)&&(p=2),function(e,n,t,o,l){if(a(t)&&a(t.__ob__))return he();a(t)&&a(t.is)&&(n=t.is);if(!n)return he();0;r(o)&&c(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===l?o=qe(o):1===l&&(o=function(e){for(var n=0;n<e.length;n++)if(r(e[n]))return Array.prototype.concat.apply([],e);return e}(o));var p,d;if("string"==typeof n){var h=void 0;d=e.$vnode&&e.$vnode.ns||G.getTagNamespace(n),p=G.isReservedTag(n)?new de(G.parsePlatformTagName(n),t,o,void 0,void 0,e):t&&t.pre||!a(h=Mt(e.$options,"components",n))?new de(n,t,o,void 0,void 0,e):wt(h,t,e,o,n)}else p=wt(n,t,e,o);return r(p)?p:a(p)?(a(d)&&function e(n,t,o){n.ns=t,"foreignObject"===n.tag&&(t=void 0,o=!0);if(a(n.children))for(var r=0,l=n.children.length;r<l;r++){var c=n.children[r];a(c.tag)&&(i(c.ns)||s(o)&&"svg"!==c.tag)&&e(c,t,o)}}(p,d),a(t)&&function(e){u(e.style)&&Gn(e.style);u(e.class)&&Gn(e.class)}(t),p):he()}(e,n,t,o,p)}function Pn(e,n,t){we();try{if(n)for(var o=n;o=o.$parent;){var r=o.$options.errorCaptured;if(r)for(var i=0;i<r.length;i++)try{if(!1===r[i].call(o,e,n,t))return}catch(e){In(e,o,"errorCaptured hook")}}In(e,n,t)}finally{xe()}}function On(e,n,t,o,r){var i;try{(i=t?e.apply(n,t):e.call(n))&&!i._isVue&&f(i)&&!i._handled&&(i.catch((function(e){return Pn(e,o,r+" (Promise/async)")})),i._handled=!0)}catch(e){Pn(e,o,r)}return i}function In(e,n,t){if(G.errorHandler)try{return G.errorHandler.call(null,e,n,t)}catch(n){n!==e&&Tn(n,null,"config.errorHandler")}Tn(e,n,t)}function Tn(e,n,t){if(!q||"undefined"==typeof console)throw e;console.error(e)}var Mn,Dn=!1,_n=[],Bn=!1;function En(){Bn=!1;var e=_n.slice(0);_n.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&se(Promise)){var Un=Promise.resolve();Mn=function(){Un.then(En),J&&setTimeout(B)},Dn=!0}else if(K||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Mn="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(En)}:function(){setTimeout(En,0)};else{var Ln=1,Rn=new MutationObserver(En),Fn=document.createTextNode(String(Ln));Rn.observe(Fn,{characterData:!0}),Mn=function(){Ln=(Ln+1)%2,Fn.data=String(Ln)},Dn=!0}function Nn(e,n){var t;if(_n.push((function(){if(e)try{e.call(n)}catch(e){Pn(e,n,"nextTick")}else t&&t(n)})),Bn||(Bn=!0,Mn()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}function zn(e){return function(n,t){if(void 0===t&&(t=ue),t)return function(e,n,t){var o=e.$options;o[n]=Pt(o[n],t)}(t,e,n)}}zn("beforeMount"),zn("mounted"),zn("beforeUpdate"),zn("updated"),zn("beforeDestroy"),zn("destroyed"),zn("activated"),zn("deactivated"),zn("serverPrefetch"),zn("renderTracked"),zn("renderTriggered"),zn("errorCaptured");var jn=new le;function Gn(e){return function e(n,t){var o,i,a=r(n);if(!a&&!u(n)||n.__v_skip||Object.isFrozen(n)||n instanceof de)return;if(n.__ob__){var s=n.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(a)for(o=n.length;o--;)e(n[o],t);else if(Fe(n))e(n.value,t);else for(i=Object.keys(n),o=i.length;o--;)e(n[i[o]],t)}(e,jn),jn.clear(),e}var Vn,Hn=0,$n=function(){function e(e,n,t,o,r){var i,a;i=this,void 0===(a=ze&&!ze._vm?ze:e?e._scope:void 0)&&(a=ze),a&&a.active&&a.effects.push(i),(this.vm=e)&&r&&(e._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Hn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",c(n)?this.getter=n:(this.getter=function(e){if(!W.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=B)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;we(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;Pn(e,n,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Gn(e),xe(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():dt(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'.concat(this.expression,'"');On(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&w(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Wn(e,n){Vn.$on(e,n)}function Xn(e,n){Vn.$off(e,n)}function qn(e,n){var t=Vn;return function o(){var r=n.apply(null,arguments);null!==r&&t.$off(e,o)}}function Yn(e,n,t){Vn=e,$e(n,t||{},Wn,Xn,qn,e),Vn=void 0}var Kn=null;function Qn(e){var n=Kn;return Kn=e,function(){Kn=n}}function Zn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Jn(e,n){if(n){if(e._directInactive=!1,Zn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Jn(e.$children[t]);et(e,"activated")}}function et(e,n,t,o){void 0===o&&(o=!0),we();var r=ue;o&&pe(e);var i=e.$options[n],a="".concat(n," hook");if(i)for(var s=0,l=i.length;s<l;s++)On(i[s],e,t||null,e,a);e._hasHookEvent&&e.$emit("hook:"+n),o&&pe(r),xe()}var nt=[],tt=[],ot={},rt=!1,it=!1,at=0;var st=0,lt=Date.now;if(q&&!K){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var ut=function(e,n){if(e.post){if(!n.post)return 1}else if(n.post)return-1;return e.id-n.id};function pt(){var e,n;for(st=lt(),it=!0,nt.sort(ut),at=0;at<nt.length;at++)(e=nt[at]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=tt.slice(),o=nt.slice();at=nt.length=tt.length=0,ot={},rt=it=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Jn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),function(){for(var e=0;e<ye.length;e++){var n=ye[e];n.subs=n.subs.filter((function(e){return e})),n._pending=!1}ye.length=0}(),ae&&G.devtools&&ae.emit("flush")}function dt(e){var n=e.id;if(null==ot[n]&&(e!==be.target||!e.noRecurse)){if(ot[n]=!0,it){for(var t=nt.length-1;t>at&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);rt||(rt=!0,Nn(pt))}}function ht(e,n){if(e){for(var t=Object.create(null),o=ce?Reflect.ownKeys(e):Object.keys(e),r=0;r<o.length;r++){var i=o[r];if("__ob__"!==i){var a=e[i].from;if(a in n._provided)t[i]=n._provided[a];else if("default"in e[i]){var s=e[i].default;t[i]=c(s)?s.call(n):s}else 0}}return t}}function mt(e,n,t,i,a){var l,c=this,u=a.options;k(i,"_uid")?(l=Object.create(i))._original=i:(l=i,i=i._original);var p=s(u._compiled),d=!p;this.data=e,this.props=n,this.children=t,this.parent=i,this.listeners=e.on||o,this.injections=ht(u.inject,i),this.slots=function(){return c.$slots||fn(i,e.scopedSlots,c.$slots=dn(t,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fn(i,e.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=fn(i,e.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,n,t,o){var a=An(l,e,n,t,o,d);return a&&!r(a)&&(a.fnScopeId=u._scopeId,a.fnContext=i),a}:this._c=function(e,n,t,o){return An(l,e,n,t,o,d)}}function ft(e,n,t,o,r){var i=fe(e);return i.fnContext=t,i.fnOptions=o,n.slot&&((i.data||(i.data={})).slot=n.slot),i}function gt(e,n){for(var t in n)e[A(t)]=n[t]}function yt(e){return e.name||e.__name||e._componentTag}pn(mt.prototype);var bt={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;bt.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},o=e.data.inlineTemplate;a(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Kn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,r,i){var a=r.data.scopedSlots,s=e.$scopedSlots,l=!!(a&&!a.$stable||s!==o&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key||!a&&e.$scopedSlots.$key),c=!!(i||e.$options._renderChildren||l),u=e.$vnode;e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=i;var p=r.data.attrs||o;e._attrsProxy&&vn(e._attrsProxy,p,u.data&&u.data.attrs||o,e,"$attrs")&&(c=!0),e.$attrs=p,t=t||o;var d=e.$options._parentListeners;if(e._listenersProxy&&vn(e._listenersProxy,t,d||o,e,"$listeners"),e.$listeners=e.$options._parentListeners=t,Yn(e,t,d),n&&e.$options.props){Oe(!1);for(var h=e._props,m=e.$options._propKeys||[],f=0;f<m.length;f++){var g=m[f],y=e.$options.props;h[g]=Dt(g,y,n,e)}Oe(!0),e.$options.propsData=n}c&&(e.$slots=dn(i,r.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),e.data.keepAlive&&(t._isMounted?((n=o)._inactive=!1,tt.push(n)):Jn(o,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(!(t&&(n._directInactive=!0,Zn(n))||n._inactive)){n._inactive=!0;for(var o=0;o<n.$children.length;o++)e(n.$children[o]);et(n,"deactivated")}}(n,!0):n.$destroy())}},vt=Object.keys(bt);function wt(e,n,t,l,c){if(!i(e)){var p=t.$options._base;if(u(e)&&(e=p.extend(e)),"function"==typeof e){var d;if(i(e.cid)&&void 0===(e=function(e,n){if(s(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var t=kn;if(t&&a(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t),s(e.loading)&&a(e.loadingComp))return e.loadingComp;if(t&&!a(e.owners)){var o=e.owners=[t],r=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return w(o,t)}));var p=function(e){for(var n=0,t=o.length;n<t;n++)o[n].$forceUpdate();e&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=F((function(t){e.resolved=Sn(t,n),r?o.length=0:p(!0)})),h=F((function(n){a(e.errorComp)&&(e.error=!0,p(!0))})),m=e(d,h);return u(m)&&(f(m)?i(e.resolved)&&m.then(d,h):f(m.component)&&(m.component.then(d,h),a(m.error)&&(e.errorComp=Sn(m.error,n)),a(m.loading)&&(e.loadingComp=Sn(m.loading,n),0===m.delay?e.loading=!0:l=setTimeout((function(){l=null,i(e.resolved)&&i(e.error)&&(e.loading=!0,p(!1))}),m.delay||200)),a(m.timeout)&&(c=setTimeout((function(){c=null,i(e.resolved)&&h(null)}),m.timeout)))),r=!1,e.loading?e.loadingComp:e.resolved}}(d=e,p)))return function(e,n,t,o,r){var i=he();return i.asyncFactory=e,i.asyncMeta={data:n,context:t,children:o,tag:r},i}(d,n,t,l,c);n=n||{},$t(e),a(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var i=n.on||(n.on={}),s=i[o],l=n.model.callback;a(s)?(r(s)?-1===s.indexOf(l):s!==l)&&(i[o]=[l].concat(s)):i[o]=l}(e.options,n);var h=function(e,n,t){var o=n.options.props;if(!i(o)){var r={},s=e.attrs,l=e.props;if(a(s)||a(l))for(var c in o){var u=I(c);Xe(r,l,c,u,!0)||Xe(r,s,c,u,!1)}return r}}(n,e);if(s(e.options.functional))return function(e,n,t,i,s){var l=e.options,c={},u=l.props;if(a(u))for(var p in u)c[p]=Dt(p,u,n||o);else a(t.attrs)&&gt(c,t.attrs),a(t.props)&&gt(c,t.props);var d=new mt(t,c,s,i,e),h=l.render.call(null,d._c,d);if(h instanceof de)return ft(h,t,d.parent,l,d);if(r(h)){for(var m=qe(h)||[],f=new Array(m.length),g=0;g<m.length;g++)f[g]=ft(m[g],t,d.parent,l,d);return f}}(e,h,n,t,l);var m=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<vt.length;t++){var o=vt[t],r=n[o],i=bt[o];r===i||r&&r._merged||(n[o]=r?xt(i,r):i)}}(n);var y=yt(e.options)||c;return new de("vue-component-".concat(e.cid).concat(y?"-".concat(y):""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:h,listeners:m,tag:c,children:l},d)}}}function xt(e,n){var t=function(t,o){e(t,o),n(t,o)};return t._merged=!0,t}var kt=B,St=G.optionMergeStrategies;function Ct(e,n,t){if(void 0===t&&(t=!0),!n)return e;for(var o,r,i,a=ce?Reflect.ownKeys(n):Object.keys(n),s=0;s<a.length;s++)"__ob__"!==(o=a[s])&&(r=e[o],i=n[o],t&&k(e,o)?r!==i&&d(r)&&d(i)&&Ct(r,i):_e(e,o,i));return e}function At(e,n,t){return t?function(){var o=c(n)?n.call(t,t):n,r=c(e)?e.call(t,t):e;return o?Ct(o,r):r}:n?e?function(){return Ct(c(n)?n.call(this,this):n,c(e)?e.call(this,this):e)}:n:e}function Pt(e,n){var t=n?e?e.concat(n):r(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function Ot(e,n,t,o){var r=Object.create(e||null);return n?D(r,n):r}St.data=function(e,n,t){return t?At(e,n,t):n&&"function"!=typeof n?e:At(e,n)},j.forEach((function(e){St[e]=Pt})),z.forEach((function(e){St[e+"s"]=Ot})),St.watch=function(e,n,t,o){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var i={};for(var a in D(i,e),n){var s=i[a],l=n[a];s&&!r(s)&&(s=[s]),i[a]=s?s.concat(l):r(l)?l:[l]}return i},St.props=St.methods=St.inject=St.computed=function(e,n,t,o){if(!e)return n;var r=Object.create(null);return D(r,e),n&&D(r,n),r},St.provide=function(e,n){return e?function(){var t=Object.create(null);return Ct(t,c(e)?e.call(this):e),n&&Ct(t,c(n)?n.call(this):n,!1),t}:n};var It=function(e,n){return void 0===n?e:n};function Tt(e,n,t){if(c(n)&&(n=n.options),function(e,n){var t=e.props;if(t){var o,i,a={};if(r(t))for(o=t.length;o--;)"string"==typeof(i=t[o])&&(a[A(i)]={type:null});else if(d(t))for(var s in t)i=t[s],a[A(s)]=d(i)?i:{type:i};else 0;e.props=a}}(n),function(e,n){var t=e.inject;if(t){var o=e.inject={};if(r(t))for(var i=0;i<t.length;i++)o[t[i]]={from:t[i]};else if(d(t))for(var a in t){var s=t[a];o[a]=d(s)?D({from:a},s):{from:s}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var o=n[t];c(o)&&(n[t]={bind:o,update:o})}}(n),!n._base&&(n.extends&&(e=Tt(e,n.extends,t)),n.mixins))for(var o=0,i=n.mixins.length;o<i;o++)e=Tt(e,n.mixins[o],t);var a,s={};for(a in e)l(a);for(a in n)k(e,a)||l(a);function l(o){var r=St[o]||It;s[o]=r(e[o],n[o],t,o)}return s}function Mt(e,n,t,o){if("string"==typeof t){var r=e[n];if(k(r,t))return r[t];var i=A(t);if(k(r,i))return r[i];var a=P(i);return k(r,a)?r[a]:r[t]||r[i]||r[a]}}function Dt(e,n,t,o){var r=n[e],i=!k(t,e),a=t[e],s=Ut(Boolean,r.type);if(s>-1)if(i&&!k(r,"default"))a=!1;else if(""===a||a===I(e)){var l=Ut(String,r.type);(l<0||s<l)&&(a=!0)}if(void 0===a){a=function(e,n,t){if(!k(n,"default"))return;var o=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return c(o)&&"Function"!==Bt(n.type)?o.call(e):o}(o,r,e);var u=Pe;Oe(!0),Me(a),Oe(u)}return a}var _t=/^\s*function (\w+)/;function Bt(e){var n=e&&e.toString().match(_t);return n?n[1]:""}function Et(e,n){return Bt(e)===Bt(n)}function Ut(e,n){if(!r(n))return Et(n,e)?0:-1;for(var t=0,o=n.length;t<o;t++)if(Et(n[t],e))return t;return-1}var Lt={enumerable:!0,configurable:!0,get:B,set:B};function Rt(e,n,t){Lt.get=function(){return this[n][t]},Lt.set=function(e){this[n][t]=e},Object.defineProperty(e,t,Lt)}function Ft(e){var n=e.$options;if(n.props&&function(e,n){var t=e.$options.propsData||{},o=e._props=Ue({}),r=e.$options._propKeys=[];e.$parent&&Oe(!1);var i=function(i){r.push(i);var a=Dt(i,n,t,e);De(o,i,a),i in e||Rt(e,"_props",i)};for(var a in n)i(a);Oe(!0)}(e,n.props),function(e){var n=e.$options,t=n.setup;if(t){var o=e._setupContext=bn(e);pe(e),we();var r=On(t,null,[e._props||Ue({}),o],e,"setup");if(xe(),pe(),c(r))n.render=r;else if(u(r))if(e._setupState=r,r.__sfc){var i=e._setupProxy={};for(var a in r)"__sfc"!==a&&Ne(i,r,a)}else for(var a in r)H(a)||Ne(e,r,a);else 0}}(e),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?B:T(n[t],e)}(e,n.methods),n.data)!function(e){var n=e.$options.data;d(n=e._data=c(n)?function(e,n){we();try{return e.call(n,n)}catch(e){return Pn(e,n,"data()"),{}}finally{xe()}}(n,e):n||{})||(n={});var t=Object.keys(n),o=e.$options.props,r=(e.$options.methods,t.length);for(;r--;){var i=t[r];0,o&&k(o,i)||H(i)||Rt(e,"_data",i)}var a=Me(n);a&&a.vmCount++}(e);else{var t=Me(e._data={});t&&t.vmCount++}n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),o=ie();for(var r in n){var i=n[r],a=c(i)?i:i.get;0,o||(t[r]=new $n(e,a||B,B,Nt)),r in e||zt(e,r,i)}}(e,n.computed),n.watch&&n.watch!==te&&function(e,n){for(var t in n){var o=n[t];if(r(o))for(var i=0;i<o.length;i++)Vt(e,t,o[i]);else Vt(e,t,o)}}(e,n.watch)}var Nt={lazy:!0};function zt(e,n,t){var o=!ie();c(t)?(Lt.get=o?jt(n):Gt(t),Lt.set=B):(Lt.get=t.get?o&&!1!==t.cache?jt(n):Gt(t.get):B,Lt.set=t.set||B),Object.defineProperty(e,n,Lt)}function jt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),be.target&&n.depend(),n.value}}function Gt(e){return function(){return e.call(this,this)}}function Vt(e,n,t,o){return d(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,o)}var Ht=0;function $t(e){var n=e.options;if(e.super){var t=$t(e.super);if(t!==e.superOptions){e.superOptions=t;var o=function(e){var n,t=e.options,o=e.sealedOptions;for(var r in t)t[r]!==o[r]&&(n||(n={}),n[r]=t[r]);return n}(e);o&&D(e.extendOptions,o),(n=e.options=Tt(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function Wt(e){this._init(e)}function Xt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,o=t.cid,r=e._Ctor||(e._Ctor={});if(r[o])return r[o];var i=yt(e)||yt(t.options);var a=function(e){this._init(e)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=n++,a.options=Tt(t.options,e),a.super=t,a.options.props&&function(e){var n=e.options.props;for(var t in n)Rt(e.prototype,"_props",t)}(a),a.options.computed&&function(e){var n=e.options.computed;for(var t in n)zt(e.prototype,t,n[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,z.forEach((function(e){a[e]=t[e]})),i&&(a.options.components[i]=a),a.superOptions=t.options,a.extendOptions=e,a.sealedOptions=D({},a.options),r[o]=a,a}}function qt(e){return e&&(yt(e.Ctor.options)||e.tag)}function Yt(e,n){return r(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!h(e)&&e.test(n)}function Kt(e,n){var t=e.cache,o=e.keys,r=e._vnode;for(var i in t){var a=t[i];if(a){var s=a.name;s&&!n(s)&&Qt(t,i,o,r)}}}function Qt(e,n,t,o){var r=e[n];!r||o&&r.tag===o.tag||r.componentInstance.$destroy(),e[n]=null,w(t,n)}Wt.prototype._init=function(e){var n=this;n._uid=Ht++,n._isVue=!0,n.__v_skip=!0,n._scope=new je(!0),n._scope._vm=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),o=n._parentVnode;t.parent=n.parent,t._parentVnode=o;var r=o.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Tt($t(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._provided=t?t._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Yn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,r=t&&t.context;e.$slots=dn(n._renderChildren,r),e.$scopedSlots=t?fn(e.$parent,t.data.scopedSlots,e.$slots):o,e._c=function(n,t,o,r){return An(e,n,t,o,r,!1)},e.$createElement=function(n,t,o,r){return An(e,n,t,o,r,!0)};var i=t&&t.data;De(e,"$attrs",i&&i.attrs||o,null,!0),De(e,"$listeners",n._parentListeners||o,null,!0)}(n),et(n,"beforeCreate",void 0,!1),function(e){var n=ht(e.$options.inject,e);n&&(Oe(!1),Object.keys(n).forEach((function(t){De(e,t,n[t])})),Oe(!0))}(n),Ft(n),function(e){var n=e.$options.provide;if(n){var t=c(n)?n.call(e):n;if(!u(t))return;for(var o=Ge(e),r=ce?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var a=r[i];Object.defineProperty(o,a,Object.getOwnPropertyDescriptor(t,a))}}}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)},function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=_e,e.prototype.$delete=Be,e.prototype.$watch=function(e,n,t){if(d(n))return Vt(this,e,n,t);(t=t||{}).user=!0;var o=new $n(this,e,n,t);if(t.immediate){var r='callback for immediate watcher "'.concat(o.expression,'"');we(),On(n,this,[o.value],this,r),xe()}return function(){o.teardown()}}}(Wt),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var o=this;if(r(e))for(var i=0,a=e.length;i<a;i++)o.$on(e[i],t);else(o._events[e]||(o._events[e]=[])).push(t),n.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,n){var t=this;function o(){t.$off(e,o),n.apply(t,arguments)}return o.fn=n,t.$on(e,o),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(r(e)){for(var o=0,i=e.length;o<i;o++)t.$off(e[o],n);return t}var a,s=t._events[e];if(!s)return t;if(!n)return t._events[e]=null,t;for(var l=s.length;l--;)if((a=s[l])===n||a.fn===n){s.splice(l,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?M(t):t;for(var o=M(arguments,1),r='event handler for "'.concat(e,'"'),i=0,a=t.length;i<a;i++)On(t[i],n,o,n,r)}return n}}(Wt),function(e){e.prototype._update=function(e,n){var t=this,o=t.$el,r=t._vnode,i=Qn(t);t._vnode=e,t.$el=r?t.__patch__(r,e):t.__patch__(t.$el,e,n,!1),i(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var a=t;a&&a.$vnode&&a.$parent&&a.$vnode===a.$parent._vnode;)a.$parent.$el=a.$el,a=a.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||w(n.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Wt),function(e){pn(e.prototype),e.prototype.$nextTick=function(e){return Nn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,o=t.render,i=t._parentVnode;i&&n._isMounted&&(n.$scopedSlots=fn(n.$parent,i.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&xn(n._slotsProxy,n.$scopedSlots)),n.$vnode=i;try{pe(n),kn=n,e=o.call(n._renderProxy,n.$createElement)}catch(t){Pn(t,n,"render"),e=n._vnode}finally{kn=null,pe()}return r(e)&&1===e.length&&(e=e[0]),e instanceof de||(e=he()),e.parent=i,e}}(Wt);var Zt=[String,RegExp,Array],Jt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zt,exclude:Zt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var r=t.tag,i=t.componentInstance,a=t.componentOptions;e[o]={name:qt(a),tag:r,componentInstance:i},n.push(o),this.max&&n.length>parseInt(this.max)&&Qt(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Qt(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){Kt(e,(function(e){return Yt(n,e)}))})),this.$watch("exclude",(function(n){Kt(e,(function(e){return!Yt(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=Cn(e),t=n&&n.componentOptions;if(t){var o=qt(t),r=this.include,i=this.exclude;if(r&&(!o||!Yt(r,o))||i&&o&&Yt(i,o))return n;var a=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):n.key;a[l]?(n.componentInstance=a[l].componentInstance,w(s,l),s.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return G}};Object.defineProperty(e,"config",n),e.util={warn:kt,extend:D,mergeOptions:Tt,defineReactive:De},e.set=_e,e.delete=Be,e.nextTick=Nn,e.observable=function(e){return Me(e),e},e.options=Object.create(null),z.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,D(e.options.components,Jt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=M(arguments,1);return t.unshift(this),c(e.install)?e.install.apply(e,t):c(e)&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Tt(this.options,e),this}}(e),Xt(e),function(e){z.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&d(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&c(t)&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(Wt),Object.defineProperty(Wt.prototype,"$isServer",{get:ie}),Object.defineProperty(Wt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Wt,"FunctionalRenderContext",{value:mt}),Wt.version="2.7.14";var eo=b("style,class"),no=b("input,textarea,option,select,progress"),to=b("contenteditable,draggable,spellcheck"),oo=b("events,caret,typing,plaintext-only"),ro=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),io="http://www.w3.org/1999/xlink",ao=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},so=function(e){return ao(e)?e.slice(6,e.length):""},lo=function(e){return null==e||!1===e};function co(e){for(var n=e.data,t=e,o=e;a(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(n=uo(o.data,n));for(;a(t=t.parent);)t&&t.data&&(n=uo(n,t.data));return function(e,n){if(a(e)||a(n))return po(e,ho(n));return""}(n.staticClass,n.class)}function uo(e,n){return{staticClass:po(e.staticClass,n.staticClass),class:a(e.class)?[e.class,n.class]:n.class}}function po(e,n){return e?n?e+" "+n:e:n||""}function ho(e){return Array.isArray(e)?function(e){for(var n,t="",o=0,r=e.length;o<r;o++)a(n=ho(e[o]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):u(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var mo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fo=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),go=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),yo=function(e){return fo(e)||go(e)};var bo=Object.create(null);var vo=b("text,number,password,search,email,tel,url");var wo=Object.freeze({__proto__:null,createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(mo[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),xo={create:function(e,n){ko(n)},update:function(e,n){e.data.ref!==n.data.ref&&(ko(e,!0),ko(n))},destroy:function(e){ko(e,!0)}};function ko(e,n){var t=e.data.ref;if(a(t)){var o=e.context,i=e.componentInstance||e.elm,s=n?null:i,l=n?void 0:i;if(c(t))On(t,o,[s],o,"template ref function");else{var u=e.data.refInFor,p="string"==typeof t||"number"==typeof t,d=Fe(t),h=o.$refs;if(p||d)if(u){var m=p?h[t]:t.value;n?r(m)&&w(m,i):r(m)?m.includes(i)||m.push(i):p?(h[t]=[i],So(o,t,h[t])):t.value=[i]}else if(p){if(n&&h[t]!==i)return;h[t]=l,So(o,t,s)}else if(d){if(n&&t.value!==i)return;t.value=s}else 0}}}function So(e,n,t){var o=e._setupState;o&&k(o,n)&&(Fe(o[n])?o[n].value=t:o[n]=t)}var Co=new de("",{},[]),Ao=["create","activate","update","remove","destroy"];function Po(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&a(e.data)===a(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,o=a(t=e.data)&&a(t=t.attrs)&&t.type,r=a(t=n.data)&&a(t=t.attrs)&&t.type;return o===r||vo(o)&&vo(r)}(e,n)||s(e.isAsyncPlaceholder)&&i(n.asyncFactory.error))}function Oo(e,n,t){var o,r,i={};for(o=n;o<=t;++o)a(r=e[o].key)&&(i[r]=o);return i}var Io={create:To,update:To,destroy:function(e){To(e,Co)}};function To(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,o,r,i=e===Co,a=n===Co,s=Do(e.data.directives,e.context),l=Do(n.data.directives,n.context),c=[],u=[];for(t in l)o=s[t],r=l[t],o?(r.oldValue=o.value,r.oldArg=o.arg,Bo(r,"update",n,e),r.def&&r.def.componentUpdated&&u.push(r)):(Bo(r,"bind",n,e),r.def&&r.def.inserted&&c.push(r));if(c.length){var p=function(){for(var t=0;t<c.length;t++)Bo(c[t],"inserted",n,e)};i?We(n,"insert",p):p()}u.length&&We(n,"postpatch",(function(){for(var t=0;t<u.length;t++)Bo(u[t],"componentUpdated",n,e)}));if(!i)for(t in s)l[t]||Bo(s[t],"unbind",e,e,a)}(e,n)}var Mo=Object.create(null);function Do(e,n){var t,o,r=Object.create(null);if(!e)return r;for(t=0;t<e.length;t++){if((o=e[t]).modifiers||(o.modifiers=Mo),r[_o(o)]=o,n._setupState&&n._setupState.__sfc){var i=o.def||Mt(n,"_setupState","v-"+o.name);o.def="function"==typeof i?{bind:i,update:i}:i}o.def=o.def||Mt(n.$options,"directives",o.name)}return r}function _o(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Bo(e,n,t,o,r){var i=e.def&&e.def[n];if(i)try{i(t.elm,e,t,o,r)}catch(o){Pn(o,t.context,"directive ".concat(e.name," ").concat(n," hook"))}}var Eo=[xo,Io];function Uo(e,n){var t=n.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||i(e.data.attrs)&&i(n.data.attrs))){var o,r,l=n.elm,c=e.data.attrs||{},u=n.data.attrs||{};for(o in(a(u.__ob__)||s(u._v_attr_proxy))&&(u=n.data.attrs=D({},u)),u)r=u[o],c[o]!==r&&Lo(l,o,r,n.data.pre);for(o in(K||Z)&&u.value!==c.value&&Lo(l,"value",u.value),c)i(u[o])&&(ao(o)?l.removeAttributeNS(io,so(o)):to(o)||l.removeAttribute(o))}}function Lo(e,n,t,o){o||e.tagName.indexOf("-")>-1?Ro(e,n,t):ro(n)?lo(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):to(n)?e.setAttribute(n,function(e,n){return lo(n)||"false"===n?"false":"contenteditable"===e&&oo(n)?n:"true"}(n,t)):ao(n)?lo(t)?e.removeAttributeNS(io,so(n)):e.setAttributeNS(io,n,t):Ro(e,n,t)}function Ro(e,n,t){if(lo(t))e.removeAttribute(n);else{if(K&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var o=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(n,t)}}var Fo={create:Uo,update:Uo};function No(e,n){var t=n.elm,o=n.data,r=e.data;if(!(i(o.staticClass)&&i(o.class)&&(i(r)||i(r.staticClass)&&i(r.class)))){var s=co(n),l=t._transitionClasses;a(l)&&(s=po(s,ho(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var zo,jo={create:No,update:No};function Go(e,n,t){var o=zo;return function r(){var i=n.apply(null,arguments);null!==i&&$o(e,r,t,o)}}var Vo=Dn&&!(ne&&Number(ne[1])<=53);function Ho(e,n,t,o){if(Vo){var r=st,i=n;n=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=r||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}zo.addEventListener(e,n,oe?{capture:t,passive:o}:t)}function $o(e,n,t,o){(o||zo).removeEventListener(e,n._wrapper||n,t)}function Wo(e,n){if(!i(e.data.on)||!i(n.data.on)){var t=n.data.on||{},o=e.data.on||{};zo=n.elm||e.elm,function(e){if(a(e.__r)){var n=K?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),$e(t,o,Ho,$o,Go,n.context),zo=void 0}}var Xo,qo={create:Wo,update:Wo,destroy:function(e){return Wo(e,Co)}};function Yo(e,n){if(!i(e.data.domProps)||!i(n.data.domProps)){var t,o,r=n.elm,l=e.data.domProps||{},c=n.data.domProps||{};for(t in(a(c.__ob__)||s(c._v_attr_proxy))&&(c=n.data.domProps=D({},c)),l)t in c||(r[t]="");for(t in c){if(o=c[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),o===l[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=o;var u=i(o)?"":String(o);Ko(r,u)&&(r.value=u)}else if("innerHTML"===t&&go(r.tagName)&&i(r.innerHTML)){(Xo=Xo||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var p=Xo.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;p.firstChild;)r.appendChild(p.firstChild)}else if(o!==l[t])try{r[t]=o}catch(e){}}}}function Ko(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,o=e._vModifiers;if(a(o)){if(o.number)return y(t)!==y(n);if(o.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Qo={create:Yo,update:Yo},Zo=S((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(t);o.length>1&&(n[o[0].trim()]=o[1].trim())}})),n}));function Jo(e){var n=er(e.style);return e.staticStyle?D(e.staticStyle,n):n}function er(e){return Array.isArray(e)?_(e):"string"==typeof e?Zo(e):e}var nr,tr=/^--/,or=/\s*!important$/,rr=function(e,n,t){if(tr.test(n))e.style.setProperty(n,t);else if(or.test(t))e.style.setProperty(I(n),t.replace(or,""),"important");else{var o=ar(n);if(Array.isArray(t))for(var r=0,i=t.length;r<i;r++)e.style[o]=t[r];else e.style[o]=t}},ir=["Webkit","Moz","ms"],ar=S((function(e){if(nr=nr||document.createElement("div").style,"filter"!==(e=A(e))&&e in nr)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<ir.length;t++){var o=ir[t]+n;if(o in nr)return o}}));function sr(e,n){var t=n.data,o=e.data;if(!(i(t.staticStyle)&&i(t.style)&&i(o.staticStyle)&&i(o.style))){var r,s,l=n.elm,c=o.staticStyle,u=o.normalizedStyle||o.style||{},p=c||u,d=er(n.data.style)||{};n.data.normalizedStyle=a(d.__ob__)?D({},d):d;var h=function(e,n){var t,o={};if(n)for(var r=e;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Jo(r.data))&&D(o,t);(t=Jo(e.data))&&D(o,t);for(var i=e;i=i.parent;)i.data&&(t=Jo(i.data))&&D(o,t);return o}(n,!0);for(s in p)i(h[s])&&rr(l,s,"");for(s in h)(r=h[s])!==p[s]&&rr(l,s,null==r?"":r)}}var lr={create:sr,update:sr},cr=/\s+/;function ur(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(cr).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" ".concat(e.getAttribute("class")||""," ");t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function pr(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(cr).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" ".concat(e.getAttribute("class")||""," "),o=" "+n+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function dr(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&D(n,hr(e.name||"v")),D(n,e),n}return"string"==typeof e?hr(e):void 0}}var hr=S((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),mr=q&&!Q,fr="transition",gr="transitionend",yr="animation",br="animationend";mr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fr="WebkitTransition",gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(yr="WebkitAnimation",br="webkitAnimationEnd"));var vr=q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function wr(e){vr((function(){vr(e)}))}function xr(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),ur(e,n))}function kr(e,n){e._transitionClasses&&w(e._transitionClasses,n),pr(e,n)}function Sr(e,n,t){var o=Ar(e,n),r=o.type,i=o.timeout,a=o.propCount;if(!r)return t();var s="transition"===r?gr:br,l=0,c=function(){e.removeEventListener(s,u),t()},u=function(n){n.target===e&&++l>=a&&c()};setTimeout((function(){l<a&&c()}),i+1),e.addEventListener(s,u)}var Cr=/\b(transform|all)(,|$)/;function Ar(e,n){var t,o=window.getComputedStyle(e),r=(o[fr+"Delay"]||"").split(", "),i=(o[fr+"Duration"]||"").split(", "),a=Pr(r,i),s=(o[yr+"Delay"]||"").split(", "),l=(o[yr+"Duration"]||"").split(", "),c=Pr(s,l),u=0,p=0;return"transition"===n?a>0&&(t="transition",u=a,p=i.length):"animation"===n?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(a,c))>0?a>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&Cr.test(o[fr+"Property"])}}function Pr(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return Or(n)+Or(e[t])})))}function Or(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Ir(e,n){var t=e.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=dr(e.data.transition);if(!i(o)&&!a(t._enterCb)&&1===t.nodeType){for(var r=o.css,s=o.type,l=o.enterClass,p=o.enterToClass,d=o.enterActiveClass,h=o.appearClass,m=o.appearToClass,f=o.appearActiveClass,g=o.beforeEnter,b=o.enter,v=o.afterEnter,w=o.enterCancelled,x=o.beforeAppear,k=o.appear,S=o.afterAppear,C=o.appearCancelled,A=o.duration,P=Kn,O=Kn.$vnode;O&&O.parent;)P=O.context,O=O.parent;var I=!P._isMounted||!e.isRootInsert;if(!I||k||""===k){var T=I&&h?h:l,M=I&&f?f:d,D=I&&m?m:p,_=I&&x||g,B=I&&c(k)?k:b,E=I&&S||v,U=I&&C||w,L=y(u(A)?A.enter:A);0;var R=!1!==r&&!Q,N=Dr(B),z=t._enterCb=F((function(){R&&(kr(t,D),kr(t,M)),z.cancelled?(R&&kr(t,T),U&&U(t)):E&&E(t),t._enterCb=null}));e.data.show||We(e,"insert",(function(){var n=t.parentNode,o=n&&n._pending&&n._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),B&&B(t,z)})),_&&_(t),R&&(xr(t,T),xr(t,M),wr((function(){kr(t,T),z.cancelled||(xr(t,D),N||(Mr(L)?setTimeout(z,L):Sr(t,s,z)))}))),e.data.show&&(n&&n(),B&&B(t,z)),R||N||z()}}}function Tr(e,n){var t=e.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=dr(e.data.transition);if(i(o)||1!==t.nodeType)return n();if(!a(t._leaveCb)){var r=o.css,s=o.type,l=o.leaveClass,c=o.leaveToClass,p=o.leaveActiveClass,d=o.beforeLeave,h=o.leave,m=o.afterLeave,f=o.leaveCancelled,g=o.delayLeave,b=o.duration,v=!1!==r&&!Q,w=Dr(h),x=y(u(b)?b.leave:b);0;var k=t._leaveCb=F((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),v&&(kr(t,c),kr(t,p)),k.cancelled?(v&&kr(t,l),f&&f(t)):(n(),m&&m(t)),t._leaveCb=null}));g?g(S):S()}function S(){k.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),d&&d(t),v&&(xr(t,l),xr(t,p),wr((function(){kr(t,l),k.cancelled||(xr(t,c),w||(Mr(x)?setTimeout(k,x):Sr(t,s,k)))}))),h&&h(t,k),v||w||k())}}function Mr(e){return"number"==typeof e&&!isNaN(e)}function Dr(e){if(i(e))return!1;var n=e.fns;return a(n)?Dr(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function _r(e,n){!0!==n.data.show&&Ir(n)}var Br=function(e){var n,t,o={},c=e.modules,u=e.nodeOps;for(n=0;n<Ao.length;++n)for(o[Ao[n]]=[],t=0;t<c.length;++t)a(c[t][Ao[n]])&&o[Ao[n]].push(c[t][Ao[n]]);function p(e){var n=u.parentNode(e);a(n)&&u.removeChild(n,e)}function d(e,n,t,r,i,l,c){if(a(e.elm)&&a(l)&&(e=l[c]=fe(e)),e.isRootInsert=!i,!function(e,n,t,r){var i=e.data;if(a(i)){var l=a(e.componentInstance)&&i.keepAlive;if(a(i=i.hook)&&a(i=i.init)&&i(e,!1),a(e.componentInstance))return h(e,n),m(t,e.elm,r),s(l)&&function(e,n,t,r){var i,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(i=s.data)&&a(i=i.transition)){for(i=0;i<o.activate.length;++i)o.activate[i](Co,s);n.push(s);break}m(t,e.elm,r)}(e,n,t,r),!0}}(e,n,t,r)){var p=e.data,d=e.children,g=e.tag;a(g)?(e.elm=e.ns?u.createElementNS(e.ns,g):u.createElement(g,e),v(e),f(e,d,n),a(p)&&y(e,n),m(t,e.elm,r)):s(e.isComment)?(e.elm=u.createComment(e.text),m(t,e.elm,r)):(e.elm=u.createTextNode(e.text),m(t,e.elm,r))}}function h(e,n){a(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(y(e,n),v(e)):(ko(e),n.push(e))}function m(e,n,t){a(e)&&(a(t)?u.parentNode(t)===e&&u.insertBefore(e,n,t):u.appendChild(e,n))}function f(e,n,t){if(r(n)){0;for(var o=0;o<n.length;++o)d(n[o],t,e.elm,null,!0,n,o)}else l(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function y(e,t){for(var r=0;r<o.create.length;++r)o.create[r](Co,e);a(n=e.data.hook)&&(a(n.create)&&n.create(Co,e),a(n.insert)&&t.push(e))}function v(e){var n;if(a(n=e.fnScopeId))u.setStyleScope(e.elm,n);else for(var t=e;t;)a(n=t.context)&&a(n=n.$options._scopeId)&&u.setStyleScope(e.elm,n),t=t.parent;a(n=Kn)&&n!==e.context&&n!==e.fnContext&&a(n=n.$options._scopeId)&&u.setStyleScope(e.elm,n)}function w(e,n,t,o,r,i){for(;o<=r;++o)d(t[o],i,e,n,!1,t,o)}function x(e){var n,t,r=e.data;if(a(r))for(a(n=r.hook)&&a(n=n.destroy)&&n(e),n=0;n<o.destroy.length;++n)o.destroy[n](e);if(a(n=e.children))for(t=0;t<e.children.length;++t)x(e.children[t])}function k(e,n,t){for(;n<=t;++n){var o=e[n];a(o)&&(a(o.tag)?(S(o),x(o)):p(o.elm))}}function S(e,n){if(a(n)||a(e.data)){var t,r=o.remove.length+1;for(a(n)?n.listeners+=r:n=function(e,n){function t(){0==--t.listeners&&p(e)}return t.listeners=n,t}(e.elm,r),a(t=e.componentInstance)&&a(t=t._vnode)&&a(t.data)&&S(t,n),t=0;t<o.remove.length;++t)o.remove[t](e,n);a(t=e.data.hook)&&a(t=t.remove)?t(e,n):n()}else p(e.elm)}function C(e,n,t,o){for(var r=t;r<o;r++){var i=n[r];if(a(i)&&Po(e,i))return r}}function A(e,n,t,r,l,c){if(e!==n){a(n.elm)&&a(r)&&(n=r[l]=fe(n));var p=n.elm=e.elm;if(s(e.isAsyncPlaceholder))a(n.asyncFactory.resolved)?I(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var h,m=n.data;a(m)&&a(h=m.hook)&&a(h=h.prepatch)&&h(e,n);var f=e.children,y=n.children;if(a(m)&&g(n)){for(h=0;h<o.update.length;++h)o.update[h](e,n);a(h=m.hook)&&a(h=h.update)&&h(e,n)}i(n.text)?a(f)&&a(y)?f!==y&&function(e,n,t,o,r){var s,l,c,p=0,h=0,m=n.length-1,f=n[0],g=n[m],y=t.length-1,b=t[0],v=t[y],x=!r;for(0;p<=m&&h<=y;)i(f)?f=n[++p]:i(g)?g=n[--m]:Po(f,b)?(A(f,b,o,t,h),f=n[++p],b=t[++h]):Po(g,v)?(A(g,v,o,t,y),g=n[--m],v=t[--y]):Po(f,v)?(A(f,v,o,t,y),x&&u.insertBefore(e,f.elm,u.nextSibling(g.elm)),f=n[++p],v=t[--y]):Po(g,b)?(A(g,b,o,t,h),x&&u.insertBefore(e,g.elm,f.elm),g=n[--m],b=t[++h]):(i(s)&&(s=Oo(n,p,m)),i(l=a(b.key)?s[b.key]:C(b,n,p,m))?d(b,o,e,f.elm,!1,t,h):Po(c=n[l],b)?(A(c,b,o,t,h),n[l]=void 0,x&&u.insertBefore(e,c.elm,f.elm)):d(b,o,e,f.elm,!1,t,h),b=t[++h]);p>m?w(e,i(t[y+1])?null:t[y+1].elm,t,h,y,o):h>y&&k(n,p,m)}(p,f,y,t,c):a(y)?(a(e.text)&&u.setTextContent(p,""),w(p,null,y,0,y.length-1,t)):a(f)?k(f,0,f.length-1):a(e.text)&&u.setTextContent(p,""):e.text!==n.text&&u.setTextContent(p,n.text),a(m)&&a(h=m.hook)&&a(h=h.postpatch)&&h(e,n)}}}function P(e,n,t){if(s(t)&&a(e.parent))e.parent.data.pendingInsert=n;else for(var o=0;o<n.length;++o)n[o].data.hook.insert(n[o])}var O=b("attrs,class,staticClass,staticStyle,key");function I(e,n,t,o){var r,i=n.tag,l=n.data,c=n.children;if(o=o||l&&l.pre,n.elm=e,s(n.isComment)&&a(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(r=l.hook)&&a(r=r.init)&&r(n,!0),a(r=n.componentInstance)))return h(n,t),!0;if(a(i)){if(a(c))if(e.hasChildNodes())if(a(r=l)&&a(r=r.domProps)&&a(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var u=!0,p=e.firstChild,d=0;d<c.length;d++){if(!p||!I(p,c[d],t,o)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else f(n,c,t);if(a(l)){var m=!1;for(var g in l)if(!O(g)){m=!0,y(n,t);break}!m&&l.class&&Gn(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,r){if(!i(n)){var l,c=!1,p=[];if(i(e))c=!0,d(n,p);else{var h=a(e.nodeType);if(!h&&Po(e,n))A(e,n,p,null,null,r);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),s(t)&&I(e,n,p))return P(n,p,!0),e;l=e,e=new de(u.tagName(l).toLowerCase(),{},[],void 0,l)}var m=e.elm,f=u.parentNode(m);if(d(n,p,m._leaveCb?null:f,u.nextSibling(m)),a(n.parent))for(var y=n.parent,b=g(n);y;){for(var v=0;v<o.destroy.length;++v)o.destroy[v](y);if(y.elm=n.elm,b){for(var w=0;w<o.create.length;++w)o.create[w](Co,y);var S=y.data.hook.insert;if(S.merged)for(var C=1;C<S.fns.length;C++)S.fns[C]()}else ko(y);y=y.parent}a(f)?k([e],0,0):a(e.tag)&&x(e)}}return P(n,p,c),n.elm}a(e)&&x(e)}}({nodeOps:wo,modules:[Fo,jo,qo,Qo,lr,q?{create:_r,activate:_r,remove:function(e,n){!0!==e.data.show?Tr(e,n):n()}}:{}].concat(Eo)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&jr(e,"input")}));var Er={inserted:function(e,n,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?We(t,"postpatch",(function(){Er.componentUpdated(e,n,t)})):Ur(e,n,t.context),e._vOptions=[].map.call(e.options,Fr)):("textarea"===t.tag||vo(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",Nr),e.addEventListener("compositionend",zr),e.addEventListener("change",zr),Q&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){Ur(e,n,t.context);var o=e._vOptions,r=e._vOptions=[].map.call(e.options,Fr);if(r.some((function(e,n){return!L(e,o[n])})))(e.multiple?n.value.some((function(e){return Rr(e,r)})):n.value!==n.oldValue&&Rr(n.value,r))&&jr(e,"change")}}};function Ur(e,n,t){Lr(e,n,t),(K||Z)&&setTimeout((function(){Lr(e,n,t)}),0)}function Lr(e,n,t){var o=n.value,r=e.multiple;if(!r||Array.isArray(o)){for(var i,a,s=0,l=e.options.length;s<l;s++)if(a=e.options[s],r)i=R(o,Fr(a))>-1,a.selected!==i&&(a.selected=i);else if(L(Fr(a),o))return void(e.selectedIndex!==s&&(e.selectedIndex=s));r||(e.selectedIndex=-1)}}function Rr(e,n){return n.every((function(n){return!L(n,e)}))}function Fr(e){return"_value"in e?e._value:e.value}function Nr(e){e.target.composing=!0}function zr(e){e.target.composing&&(e.target.composing=!1,jr(e.target,"input"))}function jr(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function Gr(e){return!e.componentInstance||e.data&&e.data.transition?e:Gr(e.componentInstance._vnode)}var Vr={model:Er,show:{bind:function(e,n,t){var o=n.value,r=(t=Gr(t)).data&&t.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&r?(t.data.show=!0,Ir(t,(function(){e.style.display=i}))):e.style.display=o?i:"none"},update:function(e,n,t){var o=n.value;!o!=!n.oldValue&&((t=Gr(t)).data&&t.data.transition?(t.data.show=!0,o?Ir(t,(function(){e.style.display=e.__vOriginalDisplay})):Tr(t,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,o,r){r||(e.style.display=e.__vOriginalDisplay)}}},Hr={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function $r(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?$r(Cn(n.children)):e}function Wr(e){var n={},t=e.$options;for(var o in t.propsData)n[o]=e[o];var r=t._parentListeners;for(var o in r)n[A(o)]=r[o];return n}function Xr(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var qr=function(e){return e.tag||mn(e)},Yr=function(e){return"show"===e.name},Kr={name:"transition",props:Hr,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(qr)).length){0;var o=this.mode;0;var r=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return r;var i=$r(r);if(!i)return r;if(this._leaving)return Xr(e,r);var a="__transition-".concat(this._uid,"-");i.key=null==i.key?i.isComment?a+"comment":a+i.tag:l(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=Wr(this),c=this._vnode,u=$r(c);if(i.data.directives&&i.data.directives.some(Yr)&&(i.data.show=!0),u&&u.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(i,u)&&!mn(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=D({},s);if("out-in"===o)return this._leaving=!0,We(p,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),Xr(e,r);if("in-out"===o){if(mn(i))return c;var d,h=function(){d()};We(s,"afterEnter",h),We(s,"enterCancelled",h),We(p,"delayLeave",(function(e){d=e}))}}return r}}},Qr=D({tag:String,moveClass:String},Hr);function Zr(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Jr(e){e.data.newPos=e.elm.getBoundingClientRect()}function ei(e){var n=e.data.pos,t=e.data.newPos,o=n.left-t.left,r=n.top-t.top;if(o||r){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate(".concat(o,"px,").concat(r,"px)"),i.transitionDuration="0s"}}delete Qr.mode;var ni={Transition:Kr,TransitionGroup:{props:Qr,beforeMount:function(){var e=this,n=this._update;this._update=function(t,o){var r=Qn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,r(),n.call(e,t,o)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],i=this.children=[],a=Wr(this),s=0;s<r.length;s++){if((u=r[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),t[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(o){var l=[],c=[];for(s=0;s<o.length;s++){var u;(u=o[s]).data.transition=a,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=e(n,null,l),this.removed=c}return e(n,null,i)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(Zr),e.forEach(Jr),e.forEach(ei),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,o=t.style;xr(t,n),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(gr,t._moveCb=function e(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(gr,e),t._moveCb=null,kr(t,n))})}})))},methods:{hasMove:function(e,n){if(!mr)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){pr(t,e)})),ur(t,n),t.style.display="none",this.$el.appendChild(t);var o=Ar(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ti(e,n){for(var t in n)e[t]=n[t];return e}Wt.config.mustUseProp=function(e,n,t){return"value"===t&&no(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},Wt.config.isReservedTag=yo,Wt.config.isReservedAttr=eo,Wt.config.getTagNamespace=function(e){return go(e)?"svg":"math"===e?"math":void 0},Wt.config.isUnknownElement=function(e){if(!q)return!0;if(yo(e))return!1;if(e=e.toLowerCase(),null!=bo[e])return bo[e];var n=document.createElement(e);return e.indexOf("-")>-1?bo[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:bo[e]=/HTMLUnknownElement/.test(n.toString())},D(Wt.options.directives,Vr),D(Wt.options.components,ni),Wt.prototype.__patch__=q?Br:B,Wt.prototype.$mount=function(e,n){return function(e,n,t){var o;e.$el=n,e.$options.render||(e.$options.render=he),et(e,"beforeMount"),o=function(){e._update(e._render(),t)},new $n(e,o,B,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1;var r=e._preWatchers;if(r)for(var i=0;i<r.length;i++)r[i].run();return null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&q?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},q&&setTimeout((function(){G.devtools&&ae&&ae.emit("init",Wt)}),0);var oi=/[!'()*]/g,ri=function(e){return"%"+e.charCodeAt(0).toString(16)},ii=/%2C/g,ai=function(e){return encodeURIComponent(e).replace(oi,ri).replace(ii,",")};function si(e){try{return decodeURIComponent(e)}catch(e){0}return e}var li=function(e){return null==e||"object"==typeof e?e:String(e)};function ci(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=si(t.shift()),r=t.length>0?si(t.join("=")):null;void 0===n[o]?n[o]=r:Array.isArray(n[o])?n[o].push(r):n[o]=[n[o],r]})),n):n}function ui(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return ai(n);if(Array.isArray(t)){var o=[];return t.forEach((function(e){void 0!==e&&(null===e?o.push(ai(n)):o.push(ai(n)+"="+ai(e)))})),o.join("&")}return ai(n)+"="+ai(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var pi=/\/?$/;function di(e,n,t,o){var r=o&&o.options.stringifyQuery,i=n.query||{};try{i=hi(i)}catch(e){}var a={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:i,params:n.params||{},fullPath:gi(n,r),matched:e?fi(e):[]};return t&&(a.redirectedFrom=gi(t,r)),Object.freeze(a)}function hi(e){if(Array.isArray(e))return e.map(hi);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=hi(e[t]);return n}return e}var mi=di(null,{path:"/"});function fi(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function gi(e,n){var t=e.path,o=e.query;void 0===o&&(o={});var r=e.hash;return void 0===r&&(r=""),(t||"/")+(n||ui)(o)+r}function yi(e,n,t){return n===mi?e===n:!!n&&(e.path&&n.path?e.path.replace(pi,"")===n.path.replace(pi,"")&&(t||e.hash===n.hash&&bi(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&bi(e.query,n.query)&&bi(e.params,n.params))))}function bi(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),o=Object.keys(n).sort();return t.length===o.length&&t.every((function(t,r){var i=e[t];if(o[r]!==t)return!1;var a=n[t];return null==i||null==a?i===a:"object"==typeof i&&"object"==typeof a?bi(i,a):String(i)===String(a)}))}function vi(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var o in t.instances){var r=t.instances[o],i=t.enteredCbs[o];if(r&&i){delete t.enteredCbs[o];for(var a=0;a<i.length;a++)r._isBeingDestroyed||i[a](r)}}}}var wi={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,o=n.children,r=n.parent,i=n.data;i.routerView=!0;for(var a=r.$createElement,s=t.name,l=r.$route,c=r._routerViewCache||(r._routerViewCache={}),u=0,p=!1;r&&r._routerRoot!==r;){var d=r.$vnode?r.$vnode.data:{};d.routerView&&u++,d.keepAlive&&r._directInactive&&r._inactive&&(p=!0),r=r.$parent}if(i.routerViewDepth=u,p){var h=c[s],m=h&&h.component;return m?(h.configProps&&xi(m,i,h.route,h.configProps),a(m,i,o)):a()}var f=l.matched[u],g=f&&f.components[s];if(!f||!g)return c[s]=null,a();c[s]={component:g},i.registerRouteInstance=function(e,n){var t=f.instances[s];(n&&t!==e||!n&&t===e)&&(f.instances[s]=n)},(i.hook||(i.hook={})).prepatch=function(e,n){f.instances[s]=n.componentInstance},i.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[s]&&(f.instances[s]=e.componentInstance),vi(l)};var y=f.props&&f.props[s];return y&&(ti(c[s],{route:l,configProps:y}),xi(g,i,l,y)),a(g,i,o)}};function xi(e,n,t,o){var r=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,o);if(r){r=n.props=ti({},r);var i=n.attrs=n.attrs||{};for(var a in r)e.props&&a in e.props||(i[a]=r[a],delete r[a])}}function ki(e,n,t){var o=e.charAt(0);if("/"===o)return e;if("?"===o||"#"===o)return n+e;var r=n.split("/");t&&r[r.length-1]||r.pop();for(var i=e.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function Si(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Ci=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Ai=Ni,Pi=Di,Oi=function(e,n){return Bi(Di(e,n),n)},Ii=Bi,Ti=Fi,Mi=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Di(e,n){for(var t,o=[],r=0,i=0,a="",s=n&&n.delimiter||"/";null!=(t=Mi.exec(e));){var l=t[0],c=t[1],u=t.index;if(a+=e.slice(i,u),i=u+l.length,c)a+=c[1];else{var p=e[i],d=t[2],h=t[3],m=t[4],f=t[5],g=t[6],y=t[7];a&&(o.push(a),a="");var b=null!=d&&null!=p&&p!==d,v="+"===g||"*"===g,w="?"===g||"*"===g,x=t[2]||s,k=m||f;o.push({name:h||r++,prefix:d||"",delimiter:x,optional:w,repeat:v,partial:b,asterisk:!!y,pattern:k?Ui(k):y?".*":"[^"+Ei(x)+"]+?"})}}return i<e.length&&(a+=e.substr(i)),a&&o.push(a),o}function _i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Bi(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",Ri(n)));return function(n,o){for(var r="",i=n||{},a=(o||{}).pretty?_i:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,u=i[l.name];if(null==u){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ci(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=a(u[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");r+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):a(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');r+=l.prefix+c}}else r+=l}return r}}function Ei(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ui(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Li(e,n){return e.keys=n,e}function Ri(e){return e&&e.sensitive?"":"i"}function Fi(e,n,t){Ci(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,r=!1!==t.end,i="",a=0;a<e.length;a++){var s=e[a];if("string"==typeof s)i+=Ei(s);else{var l=Ei(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Ei(t.delimiter||"/"),p=i.slice(-u.length)===u;return o||(i=(p?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=r?"$":o&&p?"":"(?="+u+"|$)",Li(new RegExp("^"+i,Ri(t)),n)}function Ni(e,n,t){return Ci(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)n.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Li(e,n)}(e,n):Ci(e)?function(e,n,t){for(var o=[],r=0;r<e.length;r++)o.push(Ni(e[r],n,t).source);return Li(new RegExp("(?:"+o.join("|")+")",Ri(t)),n)}(e,n,t):function(e,n,t){return Fi(Di(e,t),n,t)}(e,n,t)}Ai.parse=Pi,Ai.compile=Oi,Ai.tokensToFunction=Ii,Ai.tokensToRegExp=Ti;var zi=Object.create(null);function ji(e,n,t){n=n||{};try{var o=zi[e]||(zi[e]=Ai.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),o(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function Gi(e,n,t,o){var r="string"==typeof e?{path:e}:e;if(r._normalized)return r;if(r.name){var i=(r=ti({},e)).params;return i&&"object"==typeof i&&(r.params=ti({},i)),r}if(!r.path&&r.params&&n){(r=ti({},r))._normalized=!0;var a=ti(ti({},n.params),r.params);if(n.name)r.name=n.name,r.params=a;else if(n.matched.length){var s=n.matched[n.matched.length-1].path;r.path=ji(s,a,n.path)}else 0;return r}var l=function(e){var n="",t="",o=e.indexOf("#");o>=0&&(n=e.slice(o),e=e.slice(0,o));var r=e.indexOf("?");return r>=0&&(t=e.slice(r+1),e=e.slice(0,r)),{path:e,query:t,hash:n}}(r.path||""),c=n&&n.path||"/",u=l.path?ki(l.path,c,t||r.append):c,p=function(e,n,t){void 0===n&&(n={});var o,r=t||ci;try{o=r(e||"")}catch(e){o={}}for(var i in n){var a=n[i];o[i]=Array.isArray(a)?a.map(li):li(a)}return o}(l.query,r.query,o&&o.options.parseQuery),d=r.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Vi,Hi=function(){},$i={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,o=this.$route,r=t.resolve(this.to,o,this.append),i=r.location,a=r.route,s=r.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,h=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,f=a.redirectedFrom?di(null,Gi(a.redirectedFrom),null,t):a;l[m]=yi(o,f,this.exactPath),l[h]=this.exact||this.exactPath?l[m]:function(e,n){return 0===e.path.replace(pi,"/").indexOf(n.path.replace(pi,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(o,f);var g=l[m]?this.ariaCurrentValue:null,y=function(e){Wi(e)&&(n.replace?t.replace(i,Hi):t.push(i,Hi))},b={click:Wi};Array.isArray(this.event)?this.event.forEach((function(e){b[e]=y})):b[this.event]=y;var v={class:l},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:y,isActive:l[h],isExactActive:l[m]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?e():e("span",{},w)}if("a"===this.tag)v.on=b,v.attrs={href:s,"aria-current":g};else{var x=function e(n){var t;if(n)for(var o=0;o<n.length;o++){if("a"===(t=n[o]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var k=x.data=ti({},x.data);for(var S in k.on=k.on||{},k.on){var C=k.on[S];S in b&&(k.on[S]=Array.isArray(C)?C:[C])}for(var A in b)A in k.on?k.on[A].push(b[A]):k.on[A]=y;var P=x.data.attrs=ti({},x.data.attrs);P.href=s,P["aria-current"]=g}else v.on=b}return e(this.tag,v,this.$slots.default)}};function Wi(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var Xi="undefined"!=typeof window;function qi(e,n,t,o,r){var i=n||[],a=t||Object.create(null),s=o||Object.create(null);e.forEach((function(e){!function e(n,t,o,r,i,a){var s=r.path,l=r.name;0;var c=r.pathToRegexpOptions||{},u=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return Si(n.path+"/"+e)}(s,i,c.strict);"boolean"==typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var p={path:u,regex:Yi(u,c),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:a,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var i=a?Si(a+"/"+r.path):void 0;e(n,t,o,r,p,i)}));t[p.path]||(n.push(p.path),t[p.path]=p);if(void 0!==r.alias)for(var d=Array.isArray(r.alias)?r.alias:[r.alias],h=0;h<d.length;++h){0;var m={path:d[h],children:r.children};e(n,t,o,m,i,p.path||"/")}l&&(o[l]||(o[l]=p))}(i,a,s,e,r)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:a,nameMap:s}}function Yi(e,n){return Ai(e,[],n)}function Ki(e,n){var t=qi(e),o=t.pathList,r=t.pathMap,i=t.nameMap;function a(e,t,a){var s=Gi(e,t,!1,n),c=s.name;if(c){var u=i[c];if(!u)return l(null,s);var p=u.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=ji(u.path,s.params),l(u,s,a)}if(s.path){s.params={};for(var h=0;h<o.length;h++){var m=o[h],f=r[m];if(Qi(f.regex,s.path,s.params))return l(f,s,a)}}return l(null,s)}function s(e,t){var o=e.redirect,r="function"==typeof o?o(di(e,t,null,n)):o;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,t);var s=r,c=s.name,u=s.path,p=t.query,d=t.hash,h=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return a({_normalized:!0,name:c,query:p,hash:d,params:h},void 0,t)}if(u){var m=function(e,n){return ki(e,n.parent?n.parent.path:"/",!0)}(u,e);return a({_normalized:!0,path:ji(m,h),query:p,hash:d},void 0,t)}return l(null,t)}function l(e,t,o){return e&&e.redirect?s(e,o||t):e&&e.matchAs?function(e,n,t){var o=a({_normalized:!0,path:ji(t,n.params)});if(o){var r=o.matched,i=r[r.length-1];return n.params=o.params,l(i,n)}return l(null,n)}(0,t,e.matchAs):di(e,t,o,n)}return{match:a,addRoute:function(e,n){var t="object"!=typeof e?i[e]:void 0;qi([n||e],o,r,i,t),t&&t.alias.length&&qi(t.alias.map((function(e){return{path:e,children:[n]}})),o,r,i,t)},getRoutes:function(){return o.map((function(e){return r[e]}))},addRoutes:function(e){qi(e,o,r,i)}}}function Qi(e,n,t){var o=n.match(e);if(!o)return!1;if(!t)return!0;for(var r=1,i=o.length;r<i;++r){var a=e.keys[r-1];a&&(t[a.name||"pathMatch"]="string"==typeof o[r]?si(o[r]):o[r])}return!0}var Zi=Xi&&window.performance&&window.performance.now?window.performance:Date;function Ji(){return Zi.now().toFixed(3)}var ea=Ji();function na(){return ea}function ta(e){return ea=e}var oa=Object.create(null);function ra(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=ti({},window.history.state);return t.key=na(),window.history.replaceState(t,"",n),window.addEventListener("popstate",sa),function(){window.removeEventListener("popstate",sa)}}function ia(e,n,t,o){if(e.app){var r=e.options.scrollBehavior;r&&e.app.$nextTick((function(){var i=function(){var e=na();if(e)return oa[e]}(),a=r.call(e,n,t,o?i:null);a&&("function"==typeof a.then?a.then((function(e){da(e,i)})).catch((function(e){0})):da(a,i))}))}}function aa(){var e=na();e&&(oa[e]={x:window.pageXOffset,y:window.pageYOffset})}function sa(e){aa(),e.state&&e.state.key&&ta(e.state.key)}function la(e){return ua(e.x)||ua(e.y)}function ca(e){return{x:ua(e.x)?e.x:window.pageXOffset,y:ua(e.y)?e.y:window.pageYOffset}}function ua(e){return"number"==typeof e}var pa=/^#\d/;function da(e,n){var t,o="object"==typeof e;if(o&&"string"==typeof e.selector){var r=pa.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(r){var i=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-t.left-n.x,y:o.top-t.top-n.y}}(r,i={x:ua((t=i).x)?t.x:0,y:ua(t.y)?t.y:0})}else la(e)&&(n=ca(e))}else o&&la(e)&&(n=ca(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var ha,ma=Xi&&((-1===(ha=window.navigator.userAgent).indexOf("Android 2.")&&-1===ha.indexOf("Android 4.0")||-1===ha.indexOf("Mobile Safari")||-1!==ha.indexOf("Chrome")||-1!==ha.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fa(e,n){aa();var t=window.history;try{if(n){var o=ti({},t.state);o.key=na(),t.replaceState(o,"",e)}else t.pushState({key:ta(Ji())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function ga(e){fa(e,!0)}var ya={redirected:2,aborted:4,cancelled:8,duplicated:16};function ba(e,n){return wa(e,n,ya.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return xa.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function va(e,n){return wa(e,n,ya.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function wa(e,n,t,o){var r=new Error(o);return r._isRouter=!0,r.from=e,r.to=n,r.type=t,r}var xa=["params","query","hash"];function ka(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Sa(e,n){return ka(e)&&e._isRouter&&(null==n||e.type===n)}function Ca(e,n,t){var o=function(r){r>=e.length?t():e[r]?n(e[r],(function(){o(r+1)})):o(r+1)};o(0)}function Aa(e){return function(n,t,o){var r=!1,i=0,a=null;Pa(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){r=!0,i++;var l,c=Ta((function(n){var r;((r=n).__esModule||Ia&&"Module"===r[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:Vi.extend(n),t.components[s]=n,--i<=0&&o()})),u=Ta((function(e){var n="Failed to resolve async component "+s+": "+e;a||(a=ka(e)?e:new Error(n),o(a))}));try{l=e(c,u)}catch(e){u(e)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),r||o()}}function Pa(e,n){return Oa(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Oa(e){return Array.prototype.concat.apply([],e)}var Ia="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ta(e){var n=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!n)return n=!0,e.apply(this,t)}}var Ma=function(e,n){this.router=e,this.base=function(e){if(!e)if(Xi){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=mi,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Da(e,n,t,o){var r=Pa(e,(function(e,o,r,i){var a=function(e,n){"function"!=typeof e&&(e=Vi.extend(e));return e.options[n]}(e,n);if(a)return Array.isArray(a)?a.map((function(e){return t(e,o,r,i)})):t(a,o,r,i)}));return Oa(o?r.reverse():r)}function _a(e,n){if(n)return function(){return e.apply(n,arguments)}}Ma.prototype.listen=function(e){this.cb=e},Ma.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Ma.prototype.onError=function(e){this.errorCbs.push(e)},Ma.prototype.transitionTo=function(e,n,t){var o,r=this;try{o=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var i=this.current;this.confirmTransition(o,(function(){r.updateRoute(o),n&&n(o),r.ensureURL(),r.router.afterHooks.forEach((function(e){e&&e(o,i)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(e){e(o)})))}),(function(e){t&&t(e),e&&!r.ready&&(Sa(e,ya.redirected)&&i===mi||(r.ready=!0,r.readyErrorCbs.forEach((function(n){n(e)}))))}))},Ma.prototype.confirmTransition=function(e,n,t){var o=this,r=this.current;this.pending=e;var i,a,s=function(e){!Sa(e)&&ka(e)&&(o.errorCbs.length?o.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,c=r.matched.length-1;if(yi(e,r)&&l===c&&e.matched[l]===r.matched[c])return this.ensureURL(),e.hash&&ia(this.router,r,e,!1),s(((a=wa(i=r,e,ya.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",a));var u=function(e,n){var t,o=Math.max(e.length,n.length);for(t=0;t<o&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),p=u.updated,d=u.deactivated,h=u.activated,m=[].concat(function(e){return Da(e,"beforeRouteLeave",_a,!0)}(d),this.router.beforeHooks,function(e){return Da(e,"beforeRouteUpdate",_a)}(p),h.map((function(e){return e.beforeEnter})),Aa(h)),f=function(n,t){if(o.pending!==e)return s(va(r,e));try{n(e,r,(function(n){!1===n?(o.ensureURL(!0),s(function(e,n){return wa(e,n,ya.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(r,e))):ka(n)?(o.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(ba(r,e)),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)}))}catch(e){s(e)}};Ca(m,f,(function(){Ca(function(e){return Da(e,"beforeRouteEnter",(function(e,n,t,o){return function(e,n,t){return function(o,r,i){return e(o,r,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),i(e)}))}}(e,t,o)}))}(h).concat(o.router.resolveHooks),f,(function(){if(o.pending!==e)return s(va(r,e));o.pending=null,n(e),o.router.app&&o.router.app.$nextTick((function(){vi(e)}))}))}))},Ma.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Ma.prototype.setupListeners=function(){},Ma.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=mi,this.pending=null};var Ba=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Ea(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,o=ma&&t;o&&this.listeners.push(ra());var r=function(){var t=e.current,r=Ea(e.base);e.current===mi&&r===e._startLocation||e.transitionTo(r,(function(e){o&&ia(n,e,t,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var o=this,r=this.current;this.transitionTo(e,(function(e){fa(Si(o.base+e.fullPath)),ia(o.router,e,r,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,r=this.current;this.transitionTo(e,(function(e){ga(Si(o.base+e.fullPath)),ia(o.router,e,r,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Ea(this.base)!==this.current.fullPath){var n=Si(this.base+this.current.fullPath);e?fa(n):ga(n)}},n.prototype.getCurrentLocation=function(){return Ea(this.base)},n}(Ma);function Ea(e){var n=window.location.pathname,t=n.toLowerCase(),o=e.toLowerCase();return!e||t!==o&&0!==t.indexOf(Si(o+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var Ua=function(e){function n(n,t,o){e.call(this,n,t),o&&function(e){var n=Ea(e);if(!/^\/#/.test(n))return window.location.replace(Si(e+"/#"+n)),!0}(this.base)||La()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=ma&&n;t&&this.listeners.push(ra());var o=function(){var n=e.current;La()&&e.transitionTo(Ra(),(function(o){t&&ia(e.router,o,n,!0),ma||za(o.fullPath)}))},r=ma?"popstate":"hashchange";window.addEventListener(r,o),this.listeners.push((function(){window.removeEventListener(r,o)}))}},n.prototype.push=function(e,n,t){var o=this,r=this.current;this.transitionTo(e,(function(e){Na(e.fullPath),ia(o.router,e,r,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,r=this.current;this.transitionTo(e,(function(e){za(e.fullPath),ia(o.router,e,r,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Ra()!==n&&(e?Na(n):za(n))},n.prototype.getCurrentLocation=function(){return Ra()},n}(Ma);function La(){var e=Ra();return"/"===e.charAt(0)||(za("/"+e),!1)}function Ra(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Fa(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function Na(e){ma?fa(Fa(e)):window.location.hash=e}function za(e){ma?ga(Fa(e)):window.location.replace(Fa(e))}var ja=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index+1).concat(e),o.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var e=n.current;n.index=t,n.updateRoute(o),n.router.afterHooks.forEach((function(n){n&&n(o,e)}))}),(function(e){Sa(e,ya.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Ma),Ga=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ki(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!ma&&!1!==e.fallback,this.fallback&&(n="hash"),Xi||(n="abstract"),this.mode=n,n){case"history":this.history=new Ba(this,e.base);break;case"hash":this.history=new Ua(this,e.base,this.fallback);break;case"abstract":this.history=new ja(this,e.base);break;default:0}},Va={currentRoute:{configurable:!0}};Ga.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Va.currentRoute.get=function(){return this.history&&this.history.current},Ga.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Ba||t instanceof Ua){var o=function(e){t.setupListeners(),function(e){var o=t.current,r=n.options.scrollBehavior;ma&&r&&"fullPath"in e&&ia(n,e,o,!1)}(e)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},Ga.prototype.beforeEach=function(e){return $a(this.beforeHooks,e)},Ga.prototype.beforeResolve=function(e){return $a(this.resolveHooks,e)},Ga.prototype.afterEach=function(e){return $a(this.afterHooks,e)},Ga.prototype.onReady=function(e,n){this.history.onReady(e,n)},Ga.prototype.onError=function(e){this.history.onError(e)},Ga.prototype.push=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.push(e,n,t)}));this.history.push(e,n,t)},Ga.prototype.replace=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.replace(e,n,t)}));this.history.replace(e,n,t)},Ga.prototype.go=function(e){this.history.go(e)},Ga.prototype.back=function(){this.go(-1)},Ga.prototype.forward=function(){this.go(1)},Ga.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},Ga.prototype.resolve=function(e,n,t){var o=Gi(e,n=n||this.history.current,t,this),r=this.match(o,n),i=r.redirectedFrom||r.fullPath;return{location:o,route:r,href:function(e,n,t){var o="hash"===t?"#"+n:n;return e?Si(e+"/"+o):o}(this.history.base,i,this.mode),normalizedTo:o,resolved:r}},Ga.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ga.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==mi&&this.history.transitionTo(this.history.getCurrentLocation())},Ga.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==mi&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ga.prototype,Va);var Ha=Ga;function $a(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}Ga.install=function e(n){if(!e.installed||Vi!==n){e.installed=!0,Vi=n;var t=function(e){return void 0!==e},o=function(e,n){var o=e.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",wi),n.component("RouterLink",$i);var r=n.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Ga.version="3.6.5",Ga.isNavigationFailure=Sa,Ga.NavigationFailureType=ya,Ga.START_LOCATION=mi,Xi&&window.Vue&&window.Vue.use(Ga);t(101);t(93),t(128);var Wa={NotFound:()=>t.e(36).then(t.bind(null,438)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,437))},Xa={"v-1fa07328":()=>t.e(37).then(t.bind(null,442)),"v-366c3f69":()=>t.e(11).then(t.bind(null,443)),"v-4cc6fb9b":()=>t.e(38).then(t.bind(null,444)),"v-fde3b590":()=>t.e(39).then(t.bind(null,445)),"v-95e31c08":()=>t.e(24).then(t.bind(null,446)),"v-49d89153":()=>t.e(30).then(t.bind(null,447)),"v-00d46393":()=>t.e(16).then(t.bind(null,448)),"v-07350bfb":()=>t.e(31).then(t.bind(null,449)),"v-00ebb4fa":()=>t.e(40).then(t.bind(null,450)),"v-7fa8f7d8":()=>t.e(9).then(t.bind(null,451)),"v-13d59a53":()=>t.e(41).then(t.bind(null,452)),"v-aaa8e5da":()=>t.e(17).then(t.bind(null,453)),"v-c6c22d8e":()=>t.e(42).then(t.bind(null,454)),"v-740c98ba":()=>t.e(25).then(t.bind(null,455)),"v-ecd4631e":()=>t.e(10).then(t.bind(null,456)),"v-7995a69a":()=>t.e(32).then(t.bind(null,457)),"v-561f93b3":()=>t.e(8).then(t.bind(null,458)),"v-74fe7b93":()=>t.e(26).then(t.bind(null,459)),"v-b798945a":()=>t.e(27).then(t.bind(null,460)),"v-7a42fe5a":()=>t.e(5).then(t.bind(null,461)),"v-ac0e9e56":()=>t.e(7).then(t.bind(null,462)),"v-b82dfbfa":()=>t.e(18).then(t.bind(null,463)),"v-75168346":()=>t.e(6).then(t.bind(null,464)),"v-39419617":()=>t.e(43).then(t.bind(null,465)),"v-575976af":()=>t.e(33).then(t.bind(null,466)),"v-22f73089":()=>t.e(44).then(t.bind(null,467)),"v-7a9d2033":()=>t.e(14).then(t.bind(null,468)),"v-f70e9c9a":()=>t.e(45).then(t.bind(null,469)),"v-111b33de":()=>t.e(28).then(t.bind(null,470)),"v-093f9953":()=>t.e(15).then(t.bind(null,471)),"v-df55b176":()=>t.e(12).then(t.bind(null,472)),"v-478f963e":()=>t.e(34).then(t.bind(null,473)),"v-71251f53":()=>t.e(4).then(t.bind(null,474)),"v-1474475a":()=>t.e(13).then(t.bind(null,475)),"v-1fe02573":()=>t.e(3).then(t.bind(null,476)),"v-115108b8":()=>t.e(46).then(t.bind(null,477)),"v-15555df3":()=>t.e(47).then(t.bind(null,478)),"v-13fb6693":()=>t.e(19).then(t.bind(null,479)),"v-8f91aef6":()=>t.e(48).then(t.bind(null,480)),"v-6ff7519a":()=>t.e(49).then(t.bind(null,481)),"v-5f9fb552":()=>t.e(29).then(t.bind(null,482))};function qa(e){const n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}const Ya=/-(\w)/g,Ka=qa(e=>e.replace(Ya,(e,n)=>n?n.toUpperCase():"")),Qa=/\B([A-Z])/g,Za=qa(e=>e.replace(Qa,"-$1").toLowerCase()),Ja=qa(e=>e.charAt(0).toUpperCase()+e.slice(1));function es(e,n){if(!n)return;if(e(n))return e(n);return n.includes("-")?e(Ja(Ka(n))):e(Ja(n))||e(Za(n))}const ns=Object.assign({},Wa,Xa),ts=e=>ns[e],os=e=>Xa[e],rs=e=>Wa[e],is=e=>Wt.component(e);function as(e){return es(os,e)}function ss(e){return es(rs,e)}function ls(e){return es(ts,e)}function cs(e){return es(is,e)}function us(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!cs(e)&&ls(e)){const n=await ls(e)();Wt.component(e,n.default)}}))}function ps(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var ds=t(90),hs=t.n(ds),ms=t(91),fs=t.n(ms),gs={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,n])=>n),this.$ssrContext){const n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map(e=>{let n="<meta";return Object.keys(e).forEach(t=>{n+=` ${t}="${fs()(e[t])}"`}),n+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=bs(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=vs(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],e,this.siteMeta,ws)},updateCanonicalLink(){ys(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",bs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){vs(null,this.currentMetaTags),ys()}};function ys(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function bs(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function vs(e,n){if(n&&[...n].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const n=document.createElement("meta");return Object.keys(e).forEach(t=>{n.setAttribute(t,e[t])}),document.head.appendChild(n),n})}function ws(e){for(const n of["name","property","itemprop"])if(e.hasOwnProperty(n))return e[n]+n;return JSON.stringify(e)}var xs=t(24),ks=t.n(xs),Ss={mounted(){ks.a.configure({showSpinner:!1}),this.$router.beforeEach((e,n,t)=>{e.path===n.path||Wt.component(e.name)||ks.a.start(),t()}),this.$router.afterEach(()=>{ks.a.done(),this.isSidebarOpen=!1})}},Cs=t(92),As=t.n(Cs),Ps={mounted(){As.a.polyfill()}},Os=(t(235),Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}),Is=function(e){return"IMG"===e.tagName},Ts=function(e){return e&&1===e.nodeType},Ms=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Ds=function(e){try{return Array.isArray(e)?e.filter(Is):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(Is):Ts(e)?[e].filter(Is):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(Is):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},_s=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},Bs=function(e){var n=e.getBoundingClientRect(),t=n.top,o=n.left,r=n.width,i=n.height,a=e.cloneNode(),s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return a.removeAttribute("id"),a.style.position="absolute",a.style.top=t+s+"px",a.style.left=o+l+"px",a.style.width=r+"px",a.style.height=i+"px",a.style.transform="",a},Es=function(e,n){var t=Os({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var o=document.createEvent("CustomEvent");return o.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),o};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===t&&o.firstChild?o.insertBefore(r,o.firstChild):o.appendChild(r),r.styleSheet?r.styleSheet.cssText=e:r.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Us=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=window.Promise||function(e){function n(){}e(n,n)},r=function(e){var n=e.target;n!==A?-1!==v.indexOf(n)&&f({target:n}):m()},i=function(){if(!x&&C.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(k-e)>S.scrollOffset&&setTimeout(m,150)}},a=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||m()},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(A.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=Os({},S.container,e.container)),e.template){var t=Ts(e.template)?e.template:document.querySelector(e.template);n.template=t}return S=Os({},S,n),v.forEach((function(e){e.dispatchEvent(Es("medium-zoom:update",{detail:{zoom:P}}))})),P},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Os({},S,n))},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var o=n.reduce((function(e,n){return[].concat(e,Ds(n))}),[]);return o.filter((function(e){return-1===v.indexOf(e)})).forEach((function(e){v.push(e),e.classList.add("medium-zoom-image")})),w.forEach((function(e){var n=e.type,t=e.listener,r=e.options;o.forEach((function(e){e.addEventListener(n,t,r)}))})),P},u=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];C.zoomed&&m();var o=n.length>0?n.reduce((function(e,n){return[].concat(e,Ds(n))}),[]):v;return o.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Es("medium-zoom:detach",{detail:{zoom:P}}))})),v=v.filter((function(e){return-1===o.indexOf(e)})),P},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.addEventListener("medium-zoom:"+e,n,t)})),w.push({type:"medium-zoom:"+e,listener:n,options:t}),P},d=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.removeEventListener("medium-zoom:"+e,n,t)})),w=w.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),P},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(S.container)if(S.container instanceof Object)n=(e=Os({},e,S.container)).width-e.left-e.right-2*S.margin,t=e.height-e.top-e.bottom-2*S.margin;else{var o=(Ts(S.container)?S.container:document.querySelector(S.container)).getBoundingClientRect(),r=o.width,i=o.height,a=o.left,s=o.top;e=Os({},e,{width:r,height:i,left:a,top:s})}n=n||e.width-2*S.margin,t=t||e.height-2*S.margin;var l=C.zoomedHd||C.original,c=Ms(l)?n:l.naturalWidth||n,u=Ms(l)?t:l.naturalHeight||t,p=l.getBoundingClientRect(),d=p.top,h=p.left,m=p.width,f=p.height,g=Math.min(c,n)/m,y=Math.min(u,t)/f,b=Math.min(g,y),v="scale("+b+") translate3d("+((n-m)/2-h+S.margin+e.left)/b+"px, "+((t-f)/2-d+S.margin+e.top)/b+"px, 0)";C.zoomed.style.transform=v,C.zoomedHd&&(C.zoomedHd.style.transform=v)};return new o((function(e){if(n&&-1===v.indexOf(n))e(P);else{if(C.zoomed)e(P);else{if(n)C.original=n;else{if(!(v.length>0))return void e(P);var o=v;C.original=o[0]}if(C.original.dispatchEvent(Es("medium-zoom:open",{detail:{zoom:P}})),k=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,x=!0,C.zoomed=Bs(C.original),document.body.appendChild(A),S.template){var r=Ts(S.template)?S.template:document.querySelector(S.template);C.template=document.createElement("div"),C.template.appendChild(r.content.cloneNode(!0)),document.body.appendChild(C.template)}if(document.body.appendChild(C.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),C.original.classList.add("medium-zoom-image--hidden"),C.zoomed.classList.add("medium-zoom-image--opened"),C.zoomed.addEventListener("click",m),C.zoomed.addEventListener("transitionend",(function n(){x=!1,C.zoomed.removeEventListener("transitionend",n),C.original.dispatchEvent(Es("medium-zoom:opened",{detail:{zoom:P}})),e(P)})),C.original.getAttribute("data-zoom-src")){C.zoomedHd=C.zoomed.cloneNode(),C.zoomedHd.removeAttribute("srcset"),C.zoomedHd.removeAttribute("sizes"),C.zoomedHd.src=C.zoomed.getAttribute("data-zoom-src"),C.zoomedHd.onerror=function(){clearInterval(i),console.warn("Unable to reach the zoom image target "+C.zoomedHd.src),C.zoomedHd=null,t()};var i=setInterval((function(){C.zoomedHd.complete&&(clearInterval(i),C.zoomedHd.classList.add("medium-zoom-image--opened"),C.zoomedHd.addEventListener("click",m),document.body.appendChild(C.zoomedHd),t())}),10)}else if(C.original.hasAttribute("srcset")){C.zoomedHd=C.zoomed.cloneNode(),C.zoomedHd.removeAttribute("sizes"),C.zoomedHd.removeAttribute("loading");var a=C.zoomedHd.addEventListener("load",(function(){C.zoomedHd.removeEventListener("load",a),C.zoomedHd.classList.add("medium-zoom-image--opened"),C.zoomedHd.addEventListener("click",m),document.body.appendChild(C.zoomedHd),t()}))}else t()}}}))},m=function(){return new o((function(e){if(!x&&C.original){x=!0,document.body.classList.remove("medium-zoom--opened"),C.zoomed.style.transform="",C.zoomedHd&&(C.zoomedHd.style.transform=""),C.template&&(C.template.style.transition="opacity 150ms",C.template.style.opacity=0),C.original.dispatchEvent(Es("medium-zoom:close",{detail:{zoom:P}})),C.zoomed.addEventListener("transitionend",(function n(){C.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(C.zoomed),C.zoomedHd&&document.body.removeChild(C.zoomedHd),document.body.removeChild(A),C.zoomed.classList.remove("medium-zoom-image--opened"),C.template&&document.body.removeChild(C.template),x=!1,C.zoomed.removeEventListener("transitionend",n),C.original.dispatchEvent(Es("medium-zoom:closed",{detail:{zoom:P}})),C.original=null,C.zoomed=null,C.zoomedHd=null,C.template=null,e(P)}))}else e(P)}))},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return C.original?m():h({target:n})},g=function(){return S},y=function(){return v},b=function(){return C.original},v=[],w=[],x=!1,k=0,S=t,C={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?S=n:(n||"string"==typeof n)&&c(n),S=Os({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},S);var A=_s(S.background);document.addEventListener("click",r),document.addEventListener("keyup",a),document.addEventListener("scroll",i),window.addEventListener("resize",m);var P={open:h,close:m,toggle:f,update:s,clone:l,attach:c,detach:u,on:p,off:d,getOptions:g,getImages:y,getZoomedImage:b};return P},Ls={data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=Us(".theme-succinct-content :not(a) > img",{background:"var(--bodyBgColor)"})},1e3)}}},Rs=t(23),Fs=t.n(Rs),Ns=[gs,Ss,Ps,Ls,{mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:Fs()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),n=[].slice.call(document.querySelectorAll(".header-anchor")).filter(n=>e.some(e=>e.hash===n.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=window.innerHeight+t;for(let e=0;e<n.length;e++){const i=n[e],a=n[e+1],s=0===e&&0===t||t>=i.parentElement.offsetTop+10&&(!a||t<a.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(i.hash)){const t=i;if(r===o)for(let t=e+1;t<n.length;t++)if(l===decodeURIComponent(n[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}}],zs={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return ps("layout",e),Wt.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},js=t(10),Gs=Object(js.a)(zs,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),e[n].push(...t);break;default:throw new Error("Unknown option name.")}}(Gs,"mixins",Ns);const Vs=[{name:"v-1fa07328",path:"/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-1fa07328").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-366c3f69",path:"/cosmetic/gui.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-366c3f69").then(t)}},{name:"v-4cc6fb9b",path:"/cosmetic/verbose.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-4cc6fb9b").then(t)}},{name:"v-fde3b590",path:"/gpu-patching/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-fde3b590").then(t)}},{path:"/gpu-patching/index.html",redirect:"/gpu-patching/"},{name:"v-95e31c08",path:"/gpu-patching/intel-patching/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-95e31c08").then(t)}},{path:"/gpu-patching/intel-patching/index.html",redirect:"/gpu-patching/intel-patching/"},{name:"v-49d89153",path:"/gpu-patching/intel-patching/busid.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-49d89153").then(t)}},{name:"v-00d46393",path:"/gpu-patching/intel-patching/connector.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-00d46393").then(t)}},{name:"v-07350bfb",path:"/gpu-patching/intel-patching/vram.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-07350bfb").then(t)}},{name:"v-00ebb4fa",path:"/gpu-patching/legacy-intel/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-00ebb4fa").then(t)}},{path:"/gpu-patching/legacy-intel/index.html",redirect:"/gpu-patching/legacy-intel/"},{name:"v-7fa8f7d8",path:"/gpu-patching/nvidia-patching/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7fa8f7d8").then(t)}},{path:"/gpu-patching/nvidia-patching/index.html",redirect:"/gpu-patching/nvidia-patching/"},{name:"v-13d59a53",path:"/laptop-specific/battery.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-13d59a53").then(t)}},{name:"v-aaa8e5da",path:"/misc/msr-lock.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-aaa8e5da").then(t)}},{name:"v-c6c22d8e",path:"/misc/nvram.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-c6c22d8e").then(t)}},{name:"v-740c98ba",path:"/misc/rtc.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-740c98ba").then(t)}},{name:"v-ecd4631e",path:"/multiboot/bootcamp.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-ecd4631e").then(t)}},{name:"v-7995a69a",path:"/multiboot/bootstrap.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7995a69a").then(t)}},{name:"v-561f93b3",path:"/universal/audio.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-561f93b3").then(t)}},{name:"v-74fe7b93",path:"/universal/drm.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-74fe7b93").then(t)}},{name:"v-b798945a",path:"/universal/gpu-patches.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-b798945a").then(t)}},{name:"v-7a42fe5a",path:"/universal/iservices.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7a42fe5a").then(t)}},{name:"v-ac0e9e56",path:"/universal/memory.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-ac0e9e56").then(t)}},{name:"v-b82dfbfa",path:"/universal/oc2hdd.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-b82dfbfa").then(t)}},{name:"v-75168346",path:"/universal/pm.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-75168346").then(t)}},{name:"v-39419617",path:"/universal/security.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-39419617").then(t)}},{name:"v-575976af",path:"/universal/security/applesecureboot.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-575976af").then(t)}},{name:"v-22f73089",path:"/universal/security/filevault.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-22f73089").then(t)}},{name:"v-7a9d2033",path:"/universal/security/password.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7a9d2033").then(t)}},{name:"v-f70e9c9a",path:"/universal/security/scanpolicy.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-f70e9c9a").then(t)}},{name:"v-111b33de",path:"/universal/security/vault.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-111b33de").then(t)}},{name:"v-093f9953",path:"/universal/sleep.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-093f9953").then(t)}},{name:"v-df55b176",path:"/universal/update.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-df55b176").then(t)}},{name:"v-478f963e",path:"/usb/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-478f963e").then(t)}},{path:"/usb/index.html",redirect:"/usb/"},{name:"v-71251f53",path:"/usb/amd-mapping/amd.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-71251f53").then(t)}},{name:"v-1474475a",path:"/usb/intel-mapping/intel.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-1474475a").then(t)}},{name:"v-1fe02573",path:"/usb/manual/manual.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-1fe02573").then(t)}},{name:"v-115108b8",path:"/usb/misc/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-115108b8").then(t)}},{path:"/usb/misc/index.html",redirect:"/usb/misc/"},{name:"v-15555df3",path:"/usb/misc/instant-wake.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-15555df3").then(t)}},{name:"v-13fb6693",path:"/usb/misc/keyboard.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-13fb6693").then(t)}},{name:"v-8f91aef6",path:"/usb/misc/power.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-8f91aef6").then(t)}},{name:"v-6ff7519a",path:"/usb/misc/shutdown.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-6ff7519a").then(t)}},{name:"v-5f9fb552",path:"/usb/system-preparation.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-5f9fb552").then(t)}},{path:"*",component:Gs}],Hs={title:"OpenCore 安装后",description:"",base:"/OpenCore-Post-Install/",headTags:[["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"'stylesheet",href:"/OpenCore-Post-Install/styles/website.css"}]],pages:[{title:"OpenCore 安装后",frontmatter:{},regularPath:"/",relativePath:"README.md",key:"v-1fa07328",path:"/",headers:[{level:2,title:"如何遵循本指南",slug:"如何遵循本指南",normalizedTitle:"如何遵循本指南",charIndex:161},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:235},{level:3,title:"USB 修复",slug:"usb-修复",normalizedTitle:"usb 修复",charIndex:768},{level:3,title:"安全",slug:"安全",normalizedTitle:"安全",charIndex:279},{level:3,title:"笔记本细节",slug:"笔记本细节",normalizedTitle:"笔记本细节",charIndex:867},{level:3,title:"美化",slug:"美化",normalizedTitle:"美化",charIndex:338},{level:3,title:"多重引导",slug:"多重引导",normalizedTitle:"多重引导",charIndex:1084},{level:3,title:"杂项",slug:"杂项",normalizedTitle:"杂项",charIndex:401},{level:3,title:"GPU修补",slug:"gpu修补",normalizedTitle:"gpu修补",charIndex:434}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"如何遵循本指南 通用 USB 修复 安全 笔记本细节 美化 多重引导 杂项 GPU修补",content:"# OpenCore 安装后\n\n欢迎来到OpenCore安装后指南!请注意，如果您还没有安装macOS，我们建议您遵循我们的安装指南:\n\n * OpenCore安装指南\n\n虽然这里的信息可以应用到OpenCore和Clover，我们主要关注的是OpenCore安装。所以，如果你遇到任何问题，你需要做更多的研究。\n\n\n# 如何遵循本指南\n\n首先，本指南中并非每一节都必须完整。这取决于每个用户是否觉得他们想要添加最后的润色或解决某些问题\n\n本指南分为8个部分:\n\n * 通用\n   * 建议所有用户遵循\n * USB修复\n   * 建议所有用户也遵循\n * 安全\n   * 针对那些关心安全和隐私的人。\n * 笔记本电脑细节\n   * 除上述外，建议笔记本电脑用户遵循\n * 美化\n   * 美化，如OpenCore GUI和删除启动期间的详细屏幕输出\n * 多引导\n   * 多引导用户的建议\n * 杂项\n   * 其他杂项修复，并不是所有用户都需要这些修复\n * GPU修补\n   * 更深入地了解如何为macOS打补丁以支持各种GPU硬件\n\n\n# 通用\n\n * 修复音频\n   * 对于那些需要帮助解决音频问题的人。\n * 无需USB启动\n   * 允许您在不安装USB的情况下启动OpenCore。\n * 更新OpenCore, kexts和macOS\n   * 如何安全地更新你的kext, OpenCore甚至macOS。\n * 修复DRM\n   * 对于那些有DRM问题的人，比如Netflix播放。\n * 修复iServices\n   * 帮助解决诸如iMessage之类的杂项服务问题。\n * 修复电源管理\n   * 修复并帮助改善硬件空闲和增强状态。\n * 修复睡眠\n   * 修复睡眠时要检查的地方很多。\n\n\n# USB 修复\n\n * USB映射:介绍\n   * USB问题的起点，如缺少端口和帮助睡眠。\n\n\n# 安全\n\n * 安全性和文件库\n   * 这里我们来设置一些OpenCore很棒的安全特性\n\n\n# 笔记本细节\n\n * 修复电池读数\n   * 如果您的电池不支持SMCBatteryManager开箱即用。\n\n\n# 美化\n\n * 添加GUI和开机铃声\n   * 为OpenCore添加一个花哨的GUI，甚至是一个启动铃声!\n * 修复分辨率和啰嗦模式\n   * 帮助修复OpenCore的分辨率，并允许您在启动时获得那个甜美的苹果标志!\n * 修复macpro7,1内存错误\n   * 修复macpro7,1启动时的内存错误\n\n\n# 多重引导\n\n * OpenCore 多重引导\n   * 使用OpenCore进行多重引导的专用指南\n * 设置启动选项\n   * 确保Windows不会从我们的系统中删除OpenCore。\n * 安装BootCamp\n   * 允许我们安装Bootcamp，便于引导切换。\n\n\n# 杂项\n\n * 修复RTC\n   * 帮助解决RTC / CMOS /安全模式重新启动问题。\n * 修复CFG锁\n   * 允许删除一些内核补丁以获得更好的稳定性\n * 模拟NVRAM\n   * NVRAM损坏或需要测试的用户。\n\n\n# GPU修补\n\n * 深入的GPU修补",normalizedContent:"# opencore 安装后\n\n欢迎来到opencore安装后指南!请注意，如果您还没有安装macos，我们建议您遵循我们的安装指南:\n\n * opencore安装指南\n\n虽然这里的信息可以应用到opencore和clover，我们主要关注的是opencore安装。所以，如果你遇到任何问题，你需要做更多的研究。\n\n\n# 如何遵循本指南\n\n首先，本指南中并非每一节都必须完整。这取决于每个用户是否觉得他们想要添加最后的润色或解决某些问题\n\n本指南分为8个部分:\n\n * 通用\n   * 建议所有用户遵循\n * usb修复\n   * 建议所有用户也遵循\n * 安全\n   * 针对那些关心安全和隐私的人。\n * 笔记本电脑细节\n   * 除上述外，建议笔记本电脑用户遵循\n * 美化\n   * 美化，如opencore gui和删除启动期间的详细屏幕输出\n * 多引导\n   * 多引导用户的建议\n * 杂项\n   * 其他杂项修复，并不是所有用户都需要这些修复\n * gpu修补\n   * 更深入地了解如何为macos打补丁以支持各种gpu硬件\n\n\n# 通用\n\n * 修复音频\n   * 对于那些需要帮助解决音频问题的人。\n * 无需usb启动\n   * 允许您在不安装usb的情况下启动opencore。\n * 更新opencore, kexts和macos\n   * 如何安全地更新你的kext, opencore甚至macos。\n * 修复drm\n   * 对于那些有drm问题的人，比如netflix播放。\n * 修复iservices\n   * 帮助解决诸如imessage之类的杂项服务问题。\n * 修复电源管理\n   * 修复并帮助改善硬件空闲和增强状态。\n * 修复睡眠\n   * 修复睡眠时要检查的地方很多。\n\n\n# usb 修复\n\n * usb映射:介绍\n   * usb问题的起点，如缺少端口和帮助睡眠。\n\n\n# 安全\n\n * 安全性和文件库\n   * 这里我们来设置一些opencore很棒的安全特性\n\n\n# 笔记本细节\n\n * 修复电池读数\n   * 如果您的电池不支持smcbatterymanager开箱即用。\n\n\n# 美化\n\n * 添加gui和开机铃声\n   * 为opencore添加一个花哨的gui，甚至是一个启动铃声!\n * 修复分辨率和啰嗦模式\n   * 帮助修复opencore的分辨率，并允许您在启动时获得那个甜美的苹果标志!\n * 修复macpro7,1内存错误\n   * 修复macpro7,1启动时的内存错误\n\n\n# 多重引导\n\n * opencore 多重引导\n   * 使用opencore进行多重引导的专用指南\n * 设置启动选项\n   * 确保windows不会从我们的系统中删除opencore。\n * 安装bootcamp\n   * 允许我们安装bootcamp，便于引导切换。\n\n\n# 杂项\n\n * 修复rtc\n   * 帮助解决rtc / cmos /安全模式重新启动问题。\n * 修复cfg锁\n   * 允许删除一些内核补丁以获得更好的稳定性\n * 模拟nvram\n   * nvram损坏或需要测试的用户。\n\n\n# gpu修补\n\n * 深入的gpu修补",charsets:{cjk:!0}},{title:"OpenCore beauty treatment",frontmatter:{},regularPath:"/cosmetic/gui.html",relativePath:"cosmetic/gui.md",key:"v-366c3f69",path:"/cosmetic/gui.html",headers:[{level:2,title:"Setting up OpenCore's GUI",slug:"setting-up-opencore-s-gui",normalizedTitle:"setting up opencore's gui",charIndex:69},{level:2,title:"Setting up Boot-chime with AudioDxe",slug:"setting-up-boot-chime-with-audiodxe",normalizedTitle:"setting up boot-chime with audiodxe",charIndex:1618}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Setting up OpenCore's GUI Setting up Boot-chime with AudioDxe",content:"# OpenCore beauty treatment\n\nMain thing this guide will go over:\n\n * Setting up OpenCore's GUI\n * Setting up a boot-chime\n\n\n# Setting up OpenCore's GUI\n\nSo to get started, we're gonna need 0.5.7 or newer as these builds have the GUI included with the rest of the files. If you're on an older version, I recommend updating: Updating OpenCore\n\nOnce that's done, we'll need a couple things:\n\n * Binary Resources\n * OpenCanopy.efi\n   * Note: OpenCanopy.efi must be from the same build as your OpenCore files, as mismatched files can cause boot issues\n\nOnce you have both of these, we'll next want to add it to our EFI partition:\n\n * Add the Resources folder to EFI/OC\n * Add OpenCanopy.efi to EFI/OC/Drivers\n\n\n\nNow in our config.plist, we have 4 things we need to fix:\n\n * Misc -> Boot -> PickerMode: External\n * Misc -> Boot -> PickerAttributes: 17\n   * This enables mouse/trackpad support as well as .VolumeIcon.icns reading from the drive, allows for macOS installer icons to appear in the picker\n     * Other settings for PickerAttributes can be found in the Configuration.pdf\n * Misc -> Boot -> PickerVariant: Acidanthera\\GoldenGate\n   * Applicable variables:\n     * Auto — Automatically select one set of icons based on DefaultBackground colour.\n     * Acidanthera\\Syrah — Normal icon set.\n     * Acidanthera\\GoldenGate — Nouveau icon set.\n     * Acidanthera\\Chardonnay — Vintage icon set.\n * UEFI -> Drivers and add OpenCanopy.efi\n\nOnce all this is saved, you can reboot and be greeted with a true Mac-like GUI:\n\nDEFAULT (SYRAH)   MODERN (GOLDENGATE)   OLD (CHARDONNAY)\n                                        \n\n\n# Setting up Boot-chime with AudioDxe\n\nSo to start, we'll need a couple of things:\n\n * Onboard audio output\n   * USB DACs will not work\n   * GPU audio out is a hit or miss\n * AudioDxe in both EFI/OC/Drivers and UEFI -> Drivers\n * Binary Resources\n   * Add the Resources folder to EFI/OC, just like we did with the OpenCore GUI section\n   * For those running out of space, OCEFIAudio_VoiceOver_Boot.mp3 is all that's required for the Boot-Chime\n * Debug version of OpenCore with logging enabled\n   * See OpenCore Debugging for more info\n   * Note: after you're done setting up, you can revert to the RELEASE builds\n\nSetting up NVRAM:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82:\n   * SystemAudioVolume | Data | 0x46\n   * This is the boot-chime and screen reader volume, note it's in hexadecimal so would become 70 in decimal; 0x80 is mute\n\nOptional NVRAM entries\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82:\n   * StartupMute | Data | 0x00\n   * Mute startup chime sound in firmware audio support; 0x00 is unmuted, missing variable or any other value means muted\n\nSetting up UEFI -> Audio:\n\n * AudioCodec: (Number)\n   \n   * Codec address of Audio controller. This typically contains the first audio codec address on the builtin analog audio controller (HDEF). Failsafe value is 0.\n   * To find yours:\n     \n     * Check IORegistryExplorer -> HDEF -> AppleHDAController -> IOHDACodecDevice and see the IOHDACodecAddress property (ex: 0x0)\n     \n     * Can also check via terminal (Note if multiple show up, use the vendor ID to find the right device):\n       \n       ioreg -rxn IOHDACodecDevice | grep VendorID   # List all possible devices\n       sh ioreg -rxn IOHDACodecDevice | grep IOHDACodecAddress # Grab the codec address\n       \n\n * AudioDevice: (String)\n   \n   * Device path (PciRoot) of audio controller\n   * Run gfxutil to find the path:\n     * /path/to/gfxutil -f HDEF\n     * ex: PciRoot(0x0)/Pci(0x1f,0x3)\n\n * AudioOutMask: (Number)\n   \n   * Play sound in UEFI to more than one channel (e.g. main speaker plus bass speaker). Failsafe value is -1 (output to all).\n   \n   * Output channels are internally numbered as bit 0 (value 1), bit 1 (value 2) and so on. A value of 1 refers to the first audio output (not necessarily main speaker). A value of -1 is used to play to all channels simultaneously.\n   \n   * When AudioSupport is enabled, AudioDevice must be either empty or a valid path and AudioOutMask must be non-zero\n   \n   * Easiest way to find the right one is to go through each one (from 2^0 to 2^(N - 1), where N is the number of outputs listed in your log); ex: 5 outputs would translate to 1/2/4/8/16 (or a combination of these) as possible values\n   \n   * You can find all the ones for your codec in the OpenCore debug logs:\n     \n     06:065 00:004 OCAU: Matching PciRoot(0x0)/Pci(0x1F,0x3)/VenMsg(A9003FEB-D806-41DB-A491-5405FEEF46C3,00000000)...\n     06:070 00:005 OCAU: 1/2 PciRoot(0x0)/Pci(0x1F,0x3)/VenMsg(A9003FEB-D806-41DB-A491-5405FEEF46C3,00000000) (5 outputs) - Success\n     \n\n * AudioSupport: (Boolean)\n   \n   * Set this to True\n   * Enabling this setting routes audio playback from builtin protocols to specified dedicated audio ports (AudioOutMask) of the specified codec (AudioCodec), located on the specified audio controller (AudioDevice)\n\n * DisconnectHDA: (Boolean)\n   \n   * Set this to False\n\n * MaximumGain: (Number)\n   \n   * Maximum gain to use for UEFI audio, specified in decibels (dB) with respect to amplifier reference level of 0 dB\n   * Set this to -15\n\n * MinimumAssistGain: (Number)\n   \n   * Minimum gain in decibels (dB) to use for picker audio assist. The screen reader will use this amplifier gain if the system amplifier gain read from the SystemAudioVolumeDB NVRAM variable is lower than this\n   * Set this to -30\n\n * MinimumAudibleGain: (Number)\n   \n   * Minimum gain in decibels (dB) at which to attempt to play any sound\n   * Set this to -55\n\n * PlayChime: (String)\n   \n   * Set this to Enabled\n   * Supported values are:\n     * Auto — Enables chime when StartupMute NVRAM variable is not present or set to 00\n     * Enabled — Enables chime unconditionally\n     * Disabled — Disables chime unconditionally\n\n * ResetTrafficClass: (Boolean)\n   \n   * Set this to False\n\n * SetupDelay: (Number)\n   \n   * By default, leave this at 0\n   * Some codecs many need extra time for setup, we recommend setting to 500 milliseconds (0.5 seconds) if you have issues\n\nOnce done, you should get something like this:\n\n\n\nTIP\n\nThere are codecs like Realtek ALC295 (HP and others) whose default audio sampling rate is 48 kHz. In this case, even if 44.1 kHz is supported by the codec, sound output fails. The only way at the moment to fix this is to change the sample rate of the OCEFIAudio_VoiceOver_Boot.mp3 file with an audio editor to raise it from 44.1 kHz to 48 kHz. This has to be done manually as OpenCore does not have an automated mechanism for it.\n\nTIP\n\nNote for visually impaired:\n\n * OpenCore hasn't forgotten about you! With the AudioDxe setup, you can enable both picker audio and FileVault VoiceOver with these 2 settings:\n   * Misc -> Boot -> PickerAudioAssist -> True to enable picker audio\n   * UEFI -> ProtocolOverrides -> AppleAudio -> True to enable FileVault voice over\n * See Security and FileVault on how to setup the rest for proper FileVault support.",normalizedContent:"# opencore beauty treatment\n\nmain thing this guide will go over:\n\n * setting up opencore's gui\n * setting up a boot-chime\n\n\n# setting up opencore's gui\n\nso to get started, we're gonna need 0.5.7 or newer as these builds have the gui included with the rest of the files. if you're on an older version, i recommend updating: updating opencore\n\nonce that's done, we'll need a couple things:\n\n * binary resources\n * opencanopy.efi\n   * note: opencanopy.efi must be from the same build as your opencore files, as mismatched files can cause boot issues\n\nonce you have both of these, we'll next want to add it to our efi partition:\n\n * add the resources folder to efi/oc\n * add opencanopy.efi to efi/oc/drivers\n\n\n\nnow in our config.plist, we have 4 things we need to fix:\n\n * misc -> boot -> pickermode: external\n * misc -> boot -> pickerattributes: 17\n   * this enables mouse/trackpad support as well as .volumeicon.icns reading from the drive, allows for macos installer icons to appear in the picker\n     * other settings for pickerattributes can be found in the configuration.pdf\n * misc -> boot -> pickervariant: acidanthera\\goldengate\n   * applicable variables:\n     * auto — automatically select one set of icons based on defaultbackground colour.\n     * acidanthera\\syrah — normal icon set.\n     * acidanthera\\goldengate — nouveau icon set.\n     * acidanthera\\chardonnay — vintage icon set.\n * uefi -> drivers and add opencanopy.efi\n\nonce all this is saved, you can reboot and be greeted with a true mac-like gui:\n\ndefault (syrah)   modern (goldengate)   old (chardonnay)\n                                        \n\n\n# setting up boot-chime with audiodxe\n\nso to start, we'll need a couple of things:\n\n * onboard audio output\n   * usb dacs will not work\n   * gpu audio out is a hit or miss\n * audiodxe in both efi/oc/drivers and uefi -> drivers\n * binary resources\n   * add the resources folder to efi/oc, just like we did with the opencore gui section\n   * for those running out of space, ocefiaudio_voiceover_boot.mp3 is all that's required for the boot-chime\n * debug version of opencore with logging enabled\n   * see opencore debugging for more info\n   * note: after you're done setting up, you can revert to the release builds\n\nsetting up nvram:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82:\n   * systemaudiovolume | data | 0x46\n   * this is the boot-chime and screen reader volume, note it's in hexadecimal so would become 70 in decimal; 0x80 is mute\n\noptional nvram entries\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82:\n   * startupmute | data | 0x00\n   * mute startup chime sound in firmware audio support; 0x00 is unmuted, missing variable or any other value means muted\n\nsetting up uefi -> audio:\n\n * audiocodec: (number)\n   \n   * codec address of audio controller. this typically contains the first audio codec address on the builtin analog audio controller (hdef). failsafe value is 0.\n   * to find yours:\n     \n     * check ioregistryexplorer -> hdef -> applehdacontroller -> iohdacodecdevice and see the iohdacodecaddress property (ex: 0x0)\n     \n     * can also check via terminal (note if multiple show up, use the vendor id to find the right device):\n       \n       ioreg -rxn iohdacodecdevice | grep vendorid   # list all possible devices\n       sh ioreg -rxn iohdacodecdevice | grep iohdacodecaddress # grab the codec address\n       \n\n * audiodevice: (string)\n   \n   * device path (pciroot) of audio controller\n   * run gfxutil to find the path:\n     * /path/to/gfxutil -f hdef\n     * ex: pciroot(0x0)/pci(0x1f,0x3)\n\n * audiooutmask: (number)\n   \n   * play sound in uefi to more than one channel (e.g. main speaker plus bass speaker). failsafe value is -1 (output to all).\n   \n   * output channels are internally numbered as bit 0 (value 1), bit 1 (value 2) and so on. a value of 1 refers to the first audio output (not necessarily main speaker). a value of -1 is used to play to all channels simultaneously.\n   \n   * when audiosupport is enabled, audiodevice must be either empty or a valid path and audiooutmask must be non-zero\n   \n   * easiest way to find the right one is to go through each one (from 2^0 to 2^(n - 1), where n is the number of outputs listed in your log); ex: 5 outputs would translate to 1/2/4/8/16 (or a combination of these) as possible values\n   \n   * you can find all the ones for your codec in the opencore debug logs:\n     \n     06:065 00:004 ocau: matching pciroot(0x0)/pci(0x1f,0x3)/venmsg(a9003feb-d806-41db-a491-5405feef46c3,00000000)...\n     06:070 00:005 ocau: 1/2 pciroot(0x0)/pci(0x1f,0x3)/venmsg(a9003feb-d806-41db-a491-5405feef46c3,00000000) (5 outputs) - success\n     \n\n * audiosupport: (boolean)\n   \n   * set this to true\n   * enabling this setting routes audio playback from builtin protocols to specified dedicated audio ports (audiooutmask) of the specified codec (audiocodec), located on the specified audio controller (audiodevice)\n\n * disconnecthda: (boolean)\n   \n   * set this to false\n\n * maximumgain: (number)\n   \n   * maximum gain to use for uefi audio, specified in decibels (db) with respect to amplifier reference level of 0 db\n   * set this to -15\n\n * minimumassistgain: (number)\n   \n   * minimum gain in decibels (db) to use for picker audio assist. the screen reader will use this amplifier gain if the system amplifier gain read from the systemaudiovolumedb nvram variable is lower than this\n   * set this to -30\n\n * minimumaudiblegain: (number)\n   \n   * minimum gain in decibels (db) at which to attempt to play any sound\n   * set this to -55\n\n * playchime: (string)\n   \n   * set this to enabled\n   * supported values are:\n     * auto — enables chime when startupmute nvram variable is not present or set to 00\n     * enabled — enables chime unconditionally\n     * disabled — disables chime unconditionally\n\n * resettrafficclass: (boolean)\n   \n   * set this to false\n\n * setupdelay: (number)\n   \n   * by default, leave this at 0\n   * some codecs many need extra time for setup, we recommend setting to 500 milliseconds (0.5 seconds) if you have issues\n\nonce done, you should get something like this:\n\n\n\ntip\n\nthere are codecs like realtek alc295 (hp and others) whose default audio sampling rate is 48 khz. in this case, even if 44.1 khz is supported by the codec, sound output fails. the only way at the moment to fix this is to change the sample rate of the ocefiaudio_voiceover_boot.mp3 file with an audio editor to raise it from 44.1 khz to 48 khz. this has to be done manually as opencore does not have an automated mechanism for it.\n\ntip\n\nnote for visually impaired:\n\n * opencore hasn't forgotten about you! with the audiodxe setup, you can enable both picker audio and filevault voiceover with these 2 settings:\n   * misc -> boot -> pickeraudioassist -> true to enable picker audio\n   * uefi -> protocoloverrides -> appleaudio -> true to enable filevault voice over\n * see security and filevault on how to setup the rest for proper filevault support.",charsets:{cjk:!0}},{title:"Fixing Resolution and Verbose",frontmatter:{},regularPath:"/cosmetic/verbose.html",relativePath:"cosmetic/verbose.md",key:"v-4cc6fb9b",path:"/cosmetic/verbose.html",headers:[{level:2,title:"macOS Decluttering",slug:"macos-decluttering",normalizedTitle:"macos decluttering",charIndex:164},{level:2,title:"OpenCore Decluttering",slug:"opencore-decluttering",normalizedTitle:"opencore decluttering",charIndex:888}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"macOS Decluttering OpenCore Decluttering",content:"# Fixing Resolution and Verbose\n\nWanting a more clean booting experience with macOS without all that verbose text while booting? Well you need a couple things:\n\n\n# macOS Decluttering\n\nMisc -> Debug\n\n * Set AppleDebug to False, this will remove boot.efi debugging right at the start of booting.\n\nNVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82:\n\n * Remove -v from boot-args in your config.plist\n\nNVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:\n\n * UIScale\n   * 01: Standard resolution\n   * 02: HiDPI (generally required for FileVault to function correctly on smaller displays)\n\nUEFI -> Output:\n\n * TextRenderer set toBuiltinGraphics\n * Resolution: set to Max for best results\n   * Optionally can specify resolution: WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)\n * ProvideConsoleGop set to True\n\nIf still having issues, see Configuration.pdf for all possible options.\n\n\n# OpenCore Decluttering\n\nSo if you followed closely to this guide during install, you'll likely be running the debug version of OpenCore and a .txt file would be created on each boot. For those who want to remove OpenCore's extra debugging messages and that .txt file generation, see below:\n\nInside your config.plist:\n\n * Misc -> Debug -> Target: 3\n   * Target is what determines both what is logged and how, see OpenCore Debugging for more values\n\nInside your EFI:\n\n * Replace the following files with the release versions(if previously using DEBUG versions):\n   * EFI/BOOT/\n     * BOOTx64.efi\n   * EFI/OC/Drivers/\n     * OpenRuntime.efi\n   * EFI/OC/\n     * OpenCore.efi",normalizedContent:"# fixing resolution and verbose\n\nwanting a more clean booting experience with macos without all that verbose text while booting? well you need a couple things:\n\n\n# macos decluttering\n\nmisc -> debug\n\n * set appledebug to false, this will remove boot.efi debugging right at the start of booting.\n\nnvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82:\n\n * remove -v from boot-args in your config.plist\n\nnvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14:\n\n * uiscale\n   * 01: standard resolution\n   * 02: hidpi (generally required for filevault to function correctly on smaller displays)\n\nuefi -> output:\n\n * textrenderer set tobuiltingraphics\n * resolution: set to max for best results\n   * optionally can specify resolution: wxh@bpp (e.g. 1920x1080@32) or wxh (e.g. 1920x1080)\n * provideconsolegop set to true\n\nif still having issues, see configuration.pdf for all possible options.\n\n\n# opencore decluttering\n\nso if you followed closely to this guide during install, you'll likely be running the debug version of opencore and a .txt file would be created on each boot. for those who want to remove opencore's extra debugging messages and that .txt file generation, see below:\n\ninside your config.plist:\n\n * misc -> debug -> target: 3\n   * target is what determines both what is logged and how, see opencore debugging for more values\n\ninside your efi:\n\n * replace the following files with the release versions(if previously using debug versions):\n   * efi/boot/\n     * bootx64.efi\n   * efi/oc/drivers/\n     * openruntime.efi\n   * efi/oc/\n     * opencore.efi",charsets:{}},{title:"GPU Patching in macOS",frontmatter:{},regularPath:"/gpu-patching/",relativePath:"gpu-patching/README.md",key:"v-fde3b590",path:"/gpu-patching/",headers:[{level:2,title:"Intel iGPU Patching",slug:"intel-igpu-patching",normalizedTitle:"intel igpu patching",charIndex:108},{level:2,title:"Nvidia Patching",slug:"nvidia-patching",normalizedTitle:"nvidia patching",charIndex:244}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Intel iGPU Patching Nvidia Patching",content:"# GPU Patching in macOS\n\nThis section is dedicated to GPU patching, currently we support the following:\n\n\n# Intel iGPU Patching\n\n * Modern iGPU patching\n   * Sandy and newer is supported\n * Legacy iGPU patching\n   * GMA series is supported\n\n\n# Nvidia Patching\n\n * Legacy Nvidia Patching\n   * Tesla through Fermi series are supported",normalizedContent:"# gpu patching in macos\n\nthis section is dedicated to gpu patching, currently we support the following:\n\n\n# intel igpu patching\n\n * modern igpu patching\n   * sandy and newer is supported\n * legacy igpu patching\n   * gma series is supported\n\n\n# nvidia patching\n\n * legacy nvidia patching\n   * tesla through fermi series are supported",charsets:{}},{title:"Intel iGPU Patching",frontmatter:{},regularPath:"/gpu-patching/intel-patching/",relativePath:"gpu-patching/intel-patching/README.md",key:"v-95e31c08",path:"/gpu-patching/intel-patching/",headers:[{level:2,title:"Terminology",slug:"terminology",normalizedTitle:"terminology",charIndex:441},{level:2,title:"Getting started",slug:"getting-started",normalizedTitle:"getting started",charIndex:1078},{level:3,title:"AAPL,ig-platform-id explainer",slug:"aapl-ig-platform-id-explainer",normalizedTitle:"aapl,ig-platform-id explainer",charIndex:1230},{level:3,title:"device-id explainer",slug:"device-id-explainer",normalizedTitle:"device-id explainer",charIndex:1263},{level:2,title:"Learning to patch with WhateverGreen",slug:"learning-to-patch-with-whatevergreen",normalizedTitle:"learning to patch with whatevergreen",charIndex:5803}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Terminology Getting started AAPL,ig-platform-id explainer device-id explainer Learning to patch with WhateverGreen",content:"# Intel iGPU Patching\n\nThis guide will be a more in-depth look into patching macOS to support more hardware variations of Intel's iGPUs including proper display out, fixing color tint issues, HiDPI issues and etc. Note this guide is not a beginners tutorial, we recommend you follow the recommend iGPU properties listed in the config.plist section of the guide to start off.\n\nThis guide supports:\n\n * Sandy Bridge through Ice Lake iGPUs\n\n\n# Terminology\n\nTERM                   DESCRIPTION\nFramebuffer            Refers to the kext used in macOS to drive a GPU\nFramebuffer Profile    Profile in a framebuffer which determines how the iGPU will\n                       act\nWhateverGreen          Kext used to patch GPU drivers to better support PC hardware\nAAPL,ig-platform-id    Property used by macOS to determine the framebuffer profile\n                       with Ivy Bridge and newer\nAAPL,snb-platform-id   Property used by macOS to determine the framebuffer profile\n                       with Sandy Bridge\ndevice-id              Used by IOKit to match hardware to kexts\n\n\n# Getting started\n\nBefore we jump too deep into this rabbit hole, we should first explain what we're doing and why we need to do this.\n\nBasic topics:\n\n * AAPL,ig-platform-id explainer\n * device-id explainer\n\n\n# AAPL,ig-platform-id explainer\n\nBy default in Macs with iGPUs, there are a few configurations:\n\n * iGPU is the sole display output\n   * Commonly seen on Mac Minis, MacBook Airs, 13\" MacBook Pros and iMacs without a dGPU\n * iGPU is only used for internal displays, and dGPUs are handling external displays\n   * Commonly seen with 15\" MacBook Pros\n * iGPU is solely used for internal compute, and dGPU handles all display outputs\n   * Commonly seen with iMacs that include dGPUs\n\nThe reason why this is important is due to the amount of iGPU configurations Apple supports in the iGPU kexts, specifically known as framebuffer personalities. These personalities determine many things including number of displays, types of displays allowed, location of these displays, minimum VRAM required, etc, and so we need to either hope one of these profiles matches our hardware or try to patch it.\n\nTo specify a framebuffer personality in macOS, we use the DeviceProperties section in OpenCore to add an entry called AAPL,ig-platform-id\n\n * Note: on Sandy Bridge, we use AAPL,snb-platform-id instead\n\nThe format of this entry is hexadecimal, and is byte swapped from the actual value. A full list of these values can be found in WhateverGreen's manual: FAQ.IntelHD.en.md\n\nFor this example, lets try to find a framebuffer compatible for a desktop HD 4600 iGPU. We'll first want to scroll down the manual until we hit the Intel HD Graphics 4200-5200 (Haswell processors) entry. Here we're given a list of all supported framebuffers in macOS, including the hardware type(ie. Mobile vs desktop), VRAM requirements, etc. If you scroll to the bottom of this list, you're also given some recommended options:\n\nDesktop :\n 0x0D220003 (default)\nLaptop :\n 0x0A160000 (default)\n 0x0A260005 (recommended)\n 0x0A260006 (recommended)\nEmpty Framebuffer :\n 0x04120004 (default)\n\n\nThe first 2 entries are pretty obvious, however the last one(Empty Framebuffer) refers to systems where they have a dGPU already setup but still have an iGPU enabled in the background to handle tasks such as hardware accelerated decoding in tasks it excels at.\n\nNow since we're using the desktop HD 4600, we'll grab the corresponding framebuffer profile: 0x0D220003\n\nNow by itself, we cannot use this in our config.plist. The reasoning being is that it's in Big Endian while macOS's IOService tree expects it to be in Little Endian. To convert it however is quite simple:\n\n# To start, remove the 0x and then space them out in pairs\n0x0D220003 -> 0D 22 00 03\n\n# Next, reverse the order but keep the pairs together\n0D 22 00 03 -> 03 00 22 0D\n\n# And now you have your final framebuffer profile\n0300220D = AAPL,ig-platform-id\n\n\nFrom here, lets open up our config.plist and head to DeviceProperties -> Add. Now we'll want to add a new Entry called PciRoot(0x0)/Pci(0x2,0x0). This is the location of Intel's iGPUs relative to the IOService path, and has been consistent as far back as Yonah series CPUs(2007+):\n\nKEY                   TYPE   VALUE\nAAPL,ig-platform-id   Data   0300220D\n\n\n\n\n# device-id explainer\n\ndevice-id is what macOS, or more specifically IOKit, uses to determine which devices are allowed to connect to which drivers. Why this is important for us is that Apple's iGPU drivers have a limited amount of IDs even though the kext itself can support much more.\n\nTo determine whether you need a new device-id injected, you'll want to compare WhateverGreen's list of supported IDs to what you have.\n\nFor this example, lets take a look at the i3-4150 with an HD 4400 iGPU. Using Intel's ARK page, we can see the following:\n\nDevice ID = 0x41E\n\n\nNow that we have our actual Device ID, lets compare it to WhateverGreen's list:\n\nNative supported DevIDs:\n\n 0x0d26\n 0x0a26\n 0x0a2e\n 0x0d22\n 0x0412\n\n\nUnfortunately the ID is not present in macOS, so we'll need to find a similar iGPU to ours and use their Device ID. The HD 4600 found in the i3-4330 is a very close match, so we'll use its Device ID:\n\nDevice ID = 0x412\n\n\nHowever, by default this cannot be injected. We'll need to first pad it to 8 bits and hex swap:\n\n# First, remove 0x and pad it to 8 bits by using 0's in front of it\n0x412 -> 00 00 04 12\n\n# Next reverse it, but keep the pairs in tact\n00 00 04 12 -> 12 04 00 00\n\n# And voila, you have your device-id\n12040000 = device-id\n\n\nNow that we have our device-id, we'll do the same thing as before with ig-platform-id. Open your config.plist and add this new entry under PciRoot(0x0)/Pci(0x2,0x0):\n\nKEY         TYPE   VALUE\ndevice-id   Data   12040000\n\n\n\n\n# Learning to patch with WhateverGreen\n\nNow that we've gone over the basics of setting up an iGPU, let's get into some deeper topics. We'll need to go over some prerequisites first:\n\n * Lilu and WhateverGreen are present under EFI/OC/Kexts and in your config.plist\n   * To verify if they loaded correctly in macOS, run the below command(if nothing is outputted, the kexts are not loading)\n   * kextstat | grep -E \"Lilu|WhateverGreen\"\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) has been correctly setup\n   * Refer to your specific generation in the config.plist section\n\nNow head forth into your framebuffer patching journey!:\n\n * Patching the VRAM requirement of macOS\n   * Relevant for systems with locked BIOS and cannot increase the VRAM\n * Patching the display type\n   * Relevant for systems where you may get distorted colors on certain monitors\n * Patching the display connections\n   * Relevant for systems where certain display outputs do not work",normalizedContent:"# intel igpu patching\n\nthis guide will be a more in-depth look into patching macos to support more hardware variations of intel's igpus including proper display out, fixing color tint issues, hidpi issues and etc. note this guide is not a beginners tutorial, we recommend you follow the recommend igpu properties listed in the config.plist section of the guide to start off.\n\nthis guide supports:\n\n * sandy bridge through ice lake igpus\n\n\n# terminology\n\nterm                   description\nframebuffer            refers to the kext used in macos to drive a gpu\nframebuffer profile    profile in a framebuffer which determines how the igpu will\n                       act\nwhatevergreen          kext used to patch gpu drivers to better support pc hardware\naapl,ig-platform-id    property used by macos to determine the framebuffer profile\n                       with ivy bridge and newer\naapl,snb-platform-id   property used by macos to determine the framebuffer profile\n                       with sandy bridge\ndevice-id              used by iokit to match hardware to kexts\n\n\n# getting started\n\nbefore we jump too deep into this rabbit hole, we should first explain what we're doing and why we need to do this.\n\nbasic topics:\n\n * aapl,ig-platform-id explainer\n * device-id explainer\n\n\n# aapl,ig-platform-id explainer\n\nby default in macs with igpus, there are a few configurations:\n\n * igpu is the sole display output\n   * commonly seen on mac minis, macbook airs, 13\" macbook pros and imacs without a dgpu\n * igpu is only used for internal displays, and dgpus are handling external displays\n   * commonly seen with 15\" macbook pros\n * igpu is solely used for internal compute, and dgpu handles all display outputs\n   * commonly seen with imacs that include dgpus\n\nthe reason why this is important is due to the amount of igpu configurations apple supports in the igpu kexts, specifically known as framebuffer personalities. these personalities determine many things including number of displays, types of displays allowed, location of these displays, minimum vram required, etc, and so we need to either hope one of these profiles matches our hardware or try to patch it.\n\nto specify a framebuffer personality in macos, we use the deviceproperties section in opencore to add an entry called aapl,ig-platform-id\n\n * note: on sandy bridge, we use aapl,snb-platform-id instead\n\nthe format of this entry is hexadecimal, and is byte swapped from the actual value. a full list of these values can be found in whatevergreen's manual: faq.intelhd.en.md\n\nfor this example, lets try to find a framebuffer compatible for a desktop hd 4600 igpu. we'll first want to scroll down the manual until we hit the intel hd graphics 4200-5200 (haswell processors) entry. here we're given a list of all supported framebuffers in macos, including the hardware type(ie. mobile vs desktop), vram requirements, etc. if you scroll to the bottom of this list, you're also given some recommended options:\n\ndesktop :\n 0x0d220003 (default)\nlaptop :\n 0x0a160000 (default)\n 0x0a260005 (recommended)\n 0x0a260006 (recommended)\nempty framebuffer :\n 0x04120004 (default)\n\n\nthe first 2 entries are pretty obvious, however the last one(empty framebuffer) refers to systems where they have a dgpu already setup but still have an igpu enabled in the background to handle tasks such as hardware accelerated decoding in tasks it excels at.\n\nnow since we're using the desktop hd 4600, we'll grab the corresponding framebuffer profile: 0x0d220003\n\nnow by itself, we cannot use this in our config.plist. the reasoning being is that it's in big endian while macos's ioservice tree expects it to be in little endian. to convert it however is quite simple:\n\n# to start, remove the 0x and then space them out in pairs\n0x0d220003 -> 0d 22 00 03\n\n# next, reverse the order but keep the pairs together\n0d 22 00 03 -> 03 00 22 0d\n\n# and now you have your final framebuffer profile\n0300220d = aapl,ig-platform-id\n\n\nfrom here, lets open up our config.plist and head to deviceproperties -> add. now we'll want to add a new entry called pciroot(0x0)/pci(0x2,0x0). this is the location of intel's igpus relative to the ioservice path, and has been consistent as far back as yonah series cpus(2007+):\n\nkey                   type   value\naapl,ig-platform-id   data   0300220d\n\n\n\n\n# device-id explainer\n\ndevice-id is what macos, or more specifically iokit, uses to determine which devices are allowed to connect to which drivers. why this is important for us is that apple's igpu drivers have a limited amount of ids even though the kext itself can support much more.\n\nto determine whether you need a new device-id injected, you'll want to compare whatevergreen's list of supported ids to what you have.\n\nfor this example, lets take a look at the i3-4150 with an hd 4400 igpu. using intel's ark page, we can see the following:\n\ndevice id = 0x41e\n\n\nnow that we have our actual device id, lets compare it to whatevergreen's list:\n\nnative supported devids:\n\n 0x0d26\n 0x0a26\n 0x0a2e\n 0x0d22\n 0x0412\n\n\nunfortunately the id is not present in macos, so we'll need to find a similar igpu to ours and use their device id. the hd 4600 found in the i3-4330 is a very close match, so we'll use its device id:\n\ndevice id = 0x412\n\n\nhowever, by default this cannot be injected. we'll need to first pad it to 8 bits and hex swap:\n\n# first, remove 0x and pad it to 8 bits by using 0's in front of it\n0x412 -> 00 00 04 12\n\n# next reverse it, but keep the pairs in tact\n00 00 04 12 -> 12 04 00 00\n\n# and voila, you have your device-id\n12040000 = device-id\n\n\nnow that we have our device-id, we'll do the same thing as before with ig-platform-id. open your config.plist and add this new entry under pciroot(0x0)/pci(0x2,0x0):\n\nkey         type   value\ndevice-id   data   12040000\n\n\n\n\n# learning to patch with whatevergreen\n\nnow that we've gone over the basics of setting up an igpu, let's get into some deeper topics. we'll need to go over some prerequisites first:\n\n * lilu and whatevergreen are present under efi/oc/kexts and in your config.plist\n   * to verify if they loaded correctly in macos, run the below command(if nothing is outputted, the kexts are not loading)\n   * kextstat | grep -e \"lilu|whatevergreen\"\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) has been correctly setup\n   * refer to your specific generation in the config.plist section\n\nnow head forth into your framebuffer patching journey!:\n\n * patching the vram requirement of macos\n   * relevant for systems with locked bios and cannot increase the vram\n * patching the display type\n   * relevant for systems where you may get distorted colors on certain monitors\n * patching the display connections\n   * relevant for systems where certain display outputs do not work",charsets:{cjk:!0}},{title:"Patching Bus IDs",frontmatter:{},regularPath:"/gpu-patching/intel-patching/busid.html",relativePath:"gpu-patching/intel-patching/busid.md",key:"v-49d89153",path:"/gpu-patching/intel-patching/busid.html",headers:[{level:2,title:"Parsing the framebuffer",slug:"parsing-the-framebuffer",normalizedTitle:"parsing the framebuffer",charIndex:532},{level:2,title:"Mapping the video ports",slug:"mapping-the-video-ports",normalizedTitle:"mapping the video ports",charIndex:2436},{level:3,title:"Mapping within macOS",slug:"mapping-within-macos",normalizedTitle:"mapping within macos",charIndex:2490},{level:3,title:"Mapping without macOS",slug:"mapping-without-macos",normalizedTitle:"mapping without macos",charIndex:2565}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Parsing the framebuffer Mapping the video ports Mapping within macOS Mapping without macOS",content:"# Patching Bus IDs\n\nThis section is mainly relevant for those who cannot use certain display outputs regardless of the connector-type or SMBIOS patch, as Apple has hardcoded the output BusIDs in a way that doesn't match your hardware. To resolve, we'll be manually patching these bus IDs into supporting our hardware.\n\nThis page will be a bit more technical as we've assumed you've read through the previous pages and have a decent grasp of WhateverGreen.\n\n * Patching the display type\n * Patching the VRAM requirement of macOS\n\n\n# Parsing the framebuffer\n\nTo start, let's assume we're using a Z390 board with a UHD 630. This system is iGPU-only in macOS and has issues with using certain display-outs, and is using the 0x3E9B0007 framebuffer.\n\nWhen we look at this framebuffer from WhateverGreen's manual, we see the following:\n\nID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302\nTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)\nGPU Name: Intel UHD Graphics 630\nModel Name(s):\nCamelia: Disabled\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nNow let's parse it down to the BusID information, as this is what we will be patching:\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nHere we see that this framebuffer personality has 3 Bus IDs listed, let's try to break them down to be a bit more understandable. Let's take entry 1:\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n\n\nBIT        NAME             VALUE\nBit 1      Port             01\nBit 2      Bus ID           05\nBit 3-4    Pipe Number      0900\nBit 5-8    Connector Type   00040000\nBit 9-12   Flags            C7030000\n\nThings to keep in mind:\n\n * BusID is a unique value and cannot be used by multiple entries\n * Connector-type values are the same as discussed in the Connector-type patching page\n\n\n# Mapping the video ports\n\nHere we have 2 sections:\n\n * Mapping within macOS\n   * You can boot macOS and use at least 1 display\n * Mapping without macOS\n   * Blackscreen on all displays\n\n\n# Mapping within macOS\n\nMapping videos in macOS is fairly easy, as we can assume that one of our ports is mapped correctly in the framebuffer.\n\nFor this example, we'll explain the common HDMI-hotplug fix for Kaby lake users. To start, lets look at the 0x591B0000 framebuffer:\n\nID: 591B0000, STOLEN: 38 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000130B\nTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 136 MB, MAX OVERALL: 137 MB (144191488 bytes)\nModel name: Intel HD Graphics KBL CRB\nCamellia: CamelliaDisabled (0), Freq: 1388 Hz, FreqMax: 1388 Hz\nMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n00000800 02000000 98000000\n02040A00 00080000 87010000\n03060A00 00040000 87010000\n\n\nHere we see that entry 2 is the HDMI port however on a real Kaby lake laptop it's very common for hot plug to kernel panic the machine. This is due to the bus ID and port not aligning perfectly with the hardware.\n\nTo resolve, we'll want to patch it to something more appropriate(ie. 0204 to 0105, these have been tested to work properly)\n\nThere are 2 ways to patch:\n\n * Replace the entire entry\n * Replace sections of the entry\n\n# Replace the entire entry\n\nTo replace the entire entry, we'll first want to locate our entry and ensure it's enumerated correctly. This is because Apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nSo since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con2-enable\n\nNext lets make the patch, we know that port needs to be patched to 01 and BusID changed to 05:\n\n * 01050A00 00080000 87010000\n\nAnd finally, we're given the following patches:\n\nframebuffer-patch-enable | Data | `01000000`\nframebuffer-con2-enable  | Data | `01000000`\nframebuffer-con2-alldata | Data | `01050A00 00080000 87010000`\n\n\n# Replace sections of the entry\n\nTo replace sections of the entry, we'll first want to locate our entry and ensure it's enumerated correctly. This is because Apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nSo since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con1-enable\n\nNext lets make the patch, we know that port needs to be patched to 01 and BusID changed to 05:\n\n * framebuffer-con2-index = 01\n * framebuffer-con2-busid = 05\n\nAnd finally, we get these patches:\n\nframebuffer-patch-enable | Data | `01000000`\nframebuffer-con2-enable  | Data | `01000000`\nframebuffer-con2-index   | Data | `01`\nframebuffer-con2-busid   | Data | `05`\n\n\n\n# Mapping without macOS\n\nMapping your display outs is fairly simple, however is quite time consuming as you need to try every BusID value until you get an output.\n\nFor this example, we'll use the 0x3E9B0007 framebuffer again.\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nTo start, we'll be trying to go through entry 1's BusIDs in hope we find working value.\n\n# 1. Here plug in your HDMI display\n\n# 2. Set Port 1 to the HDMI connector type\n\n * 01xx0900 00080000 C7030000\n\nSupported Connector Types\n\nCommon connector types supported in macOS\n\n<02 00 00 00>        LVDS and eDP      - Laptop displays\n<10 00 00 00>        VGA               - Unsupported in 10.8 and newer\n<00 04 00 00>        DisplayPort       - USB-C display-out are DP internally\n<01 00 00 00>        DUMMY             - Used when there is no physical port\n<00 08 00 00>        HDMI\n<80 00 00 00>        S-Video\n<04 00 00 00>        DVI (Dual Link)\n<00 02 00 00>        DVI (Single Link)\n\n\nReminder that VGA on Skylake and newer are actually DisplayPort internally, so use that connector type instead.\n\n# 3. Disable ports 2 and 3 with busid=00\n\n * 02000A00 00040000 C7030000\n * 03000800 00040000 C7030000\n\n# 4. Walk through busids for Port 1 if the previous didn't work. The maximum busid on most platforms generally 0x06\n\n * 01010900 00080000 C7030000\n * 01020900 00080000 C7030000\n * 01030900 00080000 C7030000\n * etc\n\nIf you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * port 1 = 01000900 00040000 C7030000\n * port 2 = 02xx0A00 00080000 C7030000\n * port 3 = 03000800 00040000 C7030000\n\n# Adding to your config.plist\n\nYou'll now want to add the following patches to DeviceProperteies -> Add -> PciRoot(0x0)/Pci(0x2,0x0):\n\nframebuffer-patch-enable | Data | `01000000`\nframebuffer-con0-enable  | Data | `01000000`\nframebuffer-con1-enable  | Data | `01000000`\nframebuffer-con2-enable  | Data | `01000000`\nframebuffer-con0-alldata | Data | port 1 (ie. `01010900 00080000 C7030000`)\nframebuffer-con1-alldata | Data | port 2 (ie. `02000A00 00040000 C7030000`)\nframebuffer-con2-alldata | Data | port 3 (ie. `03000800 00040000 C7030000`)\n\n\nNote that:\n\n * port 1 would be labeled as con0\n * port 1's BusID is set to 01\n * port 2 and 3's BusID are set to 00, disabling them\n\nWhen done, you should get something similar:\n\n\n\nAnd as mentioned before, if this combo doesn't work, increment port 1's BusID and if that doesn't work disable port 1's busID and try port 2 and so forth.",normalizedContent:"# patching bus ids\n\nthis section is mainly relevant for those who cannot use certain display outputs regardless of the connector-type or smbios patch, as apple has hardcoded the output busids in a way that doesn't match your hardware. to resolve, we'll be manually patching these bus ids into supporting our hardware.\n\nthis page will be a bit more technical as we've assumed you've read through the previous pages and have a decent grasp of whatevergreen.\n\n * patching the display type\n * patching the vram requirement of macos\n\n\n# parsing the framebuffer\n\nto start, let's assume we're using a z390 board with a uhd 630. this system is igpu-only in macos and has issues with using certain display-outs, and is using the 0x3e9b0007 framebuffer.\n\nwhen we look at this framebuffer from whatevergreen's manual, we see the following:\n\nid: 3e9b0007, stolen: 57 mb, fbmem: 0 bytes, vram: 1536 mb, flags: 0x00801302\ntotal stolen: 58 mb, total cursor: 1 mb (1572864 bytes), max stolen: 172 mb, max overall: 173 mb (181940224 bytes)\ngpu name: intel uhd graphics 630\nmodel name(s):\ncamelia: disabled\nmobile: 0, pipecount: 3, portcount: 3, fbmemorycount: 3\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nnow let's parse it down to the busid information, as this is what we will be patching:\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nhere we see that this framebuffer personality has 3 bus ids listed, let's try to break them down to be a bit more understandable. let's take entry 1:\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n\n\nbit        name             value\nbit 1      port             01\nbit 2      bus id           05\nbit 3-4    pipe number      0900\nbit 5-8    connector type   00040000\nbit 9-12   flags            c7030000\n\nthings to keep in mind:\n\n * busid is a unique value and cannot be used by multiple entries\n * connector-type values are the same as discussed in the connector-type patching page\n\n\n# mapping the video ports\n\nhere we have 2 sections:\n\n * mapping within macos\n   * you can boot macos and use at least 1 display\n * mapping without macos\n   * blackscreen on all displays\n\n\n# mapping within macos\n\nmapping videos in macos is fairly easy, as we can assume that one of our ports is mapped correctly in the framebuffer.\n\nfor this example, we'll explain the common hdmi-hotplug fix for kaby lake users. to start, lets look at the 0x591b0000 framebuffer:\n\nid: 591b0000, stolen: 38 mb, fbmem: 21 mb, vram: 1536 mb, flags: 0x0000130b\ntotal stolen: 39 mb, total cursor: 1 mb (1572864 bytes), max stolen: 136 mb, max overall: 137 mb (144191488 bytes)\nmodel name: intel hd graphics kbl crb\ncamellia: camelliadisabled (0), freq: 1388 hz, freqmax: 1388 hz\nmobile: 1, pipecount: 3, portcount: 3, fbmemorycount: 3\n[0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n[3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n00000800 02000000 98000000\n02040a00 00080000 87010000\n03060a00 00040000 87010000\n\n\nhere we see that entry 2 is the hdmi port however on a real kaby lake laptop it's very common for hot plug to kernel panic the machine. this is due to the bus id and port not aligning perfectly with the hardware.\n\nto resolve, we'll want to patch it to something more appropriate(ie. 0204 to 0105, these have been tested to work properly)\n\nthere are 2 ways to patch:\n\n * replace the entire entry\n * replace sections of the entry\n\n# replace the entire entry\n\nto replace the entire entry, we'll first want to locate our entry and ensure it's enumerated correctly. this is because apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nso since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con2-enable\n\nnext lets make the patch, we know that port needs to be patched to 01 and busid changed to 05:\n\n * 01050a00 00080000 87010000\n\nand finally, we're given the following patches:\n\nframebuffer-patch-enable | data | `01000000`\nframebuffer-con2-enable  | data | `01000000`\nframebuffer-con2-alldata | data | `01050a00 00080000 87010000`\n\n\n# replace sections of the entry\n\nto replace sections of the entry, we'll first want to locate our entry and ensure it's enumerated correctly. this is because apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nso since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con1-enable\n\nnext lets make the patch, we know that port needs to be patched to 01 and busid changed to 05:\n\n * framebuffer-con2-index = 01\n * framebuffer-con2-busid = 05\n\nand finally, we get these patches:\n\nframebuffer-patch-enable | data | `01000000`\nframebuffer-con2-enable  | data | `01000000`\nframebuffer-con2-index   | data | `01`\nframebuffer-con2-busid   | data | `05`\n\n\n\n# mapping without macos\n\nmapping your display outs is fairly simple, however is quite time consuming as you need to try every busid value until you get an output.\n\nfor this example, we'll use the 0x3e9b0007 framebuffer again.\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nto start, we'll be trying to go through entry 1's busids in hope we find working value.\n\n# 1. here plug in your hdmi display\n\n# 2. set port 1 to the hdmi connector type\n\n * 01xx0900 00080000 c7030000\n\nsupported connector types\n\ncommon connector types supported in macos\n\n<02 00 00 00>        lvds and edp      - laptop displays\n<10 00 00 00>        vga               - unsupported in 10.8 and newer\n<00 04 00 00>        displayport       - usb-c display-out are dp internally\n<01 00 00 00>        dummy             - used when there is no physical port\n<00 08 00 00>        hdmi\n<80 00 00 00>        s-video\n<04 00 00 00>        dvi (dual link)\n<00 02 00 00>        dvi (single link)\n\n\nreminder that vga on skylake and newer are actually displayport internally, so use that connector type instead.\n\n# 3. disable ports 2 and 3 with busid=00\n\n * 02000a00 00040000 c7030000\n * 03000800 00040000 c7030000\n\n# 4. walk through busids for port 1 if the previous didn't work. the maximum busid on most platforms generally 0x06\n\n * 01010900 00080000 c7030000\n * 01020900 00080000 c7030000\n * 01030900 00080000 c7030000\n * etc\n\nif you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * port 1 = 01000900 00040000 c7030000\n * port 2 = 02xx0a00 00080000 c7030000\n * port 3 = 03000800 00040000 c7030000\n\n# adding to your config.plist\n\nyou'll now want to add the following patches to deviceproperteies -> add -> pciroot(0x0)/pci(0x2,0x0):\n\nframebuffer-patch-enable | data | `01000000`\nframebuffer-con0-enable  | data | `01000000`\nframebuffer-con1-enable  | data | `01000000`\nframebuffer-con2-enable  | data | `01000000`\nframebuffer-con0-alldata | data | port 1 (ie. `01010900 00080000 c7030000`)\nframebuffer-con1-alldata | data | port 2 (ie. `02000a00 00040000 c7030000`)\nframebuffer-con2-alldata | data | port 3 (ie. `03000800 00040000 c7030000`)\n\n\nnote that:\n\n * port 1 would be labeled as con0\n * port 1's busid is set to 01\n * port 2 and 3's busid are set to 00, disabling them\n\nwhen done, you should get something similar:\n\n\n\nand as mentioned before, if this combo doesn't work, increment port 1's busid and if that doesn't work disable port 1's busid and try port 2 and so forth.",charsets:{cjk:!0}},{title:"Patching Connector Types",frontmatter:{},regularPath:"/gpu-patching/intel-patching/connector.html",relativePath:"gpu-patching/intel-patching/connector.md",key:"v-00d46393",path:"/gpu-patching/intel-patching/connector.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# Patching Connector Types\n\n * Images and info based off CorpNewt's Vanilla Guide\n\nThis section is mainly relevant for users who either get black screen or incorrect color output on their displays(usually HDMI ports). This is due to Apple forcing display types onto your hardware,. To work around it, we'll patch Apple's connector types to properly respect our hardware.\n\nFor this example, let's take a UHD 630 system with an HDMI display attached. The machine has already been correctly setup however there's a Pink/Purple tint on the HDMI display.\n\nGrab a copy of IOReg and search for the iGPU entry:\n\n\n\nNext, clear out the entry so we can see the children of the iGPU device:\n\n\n\nAs we can see in the above screenshot, we have a few framebuffer entries listed. These are all display personalities present in the framebuffer personality, and all have their own settings.\n\nFor us, we care about the entries that have a display0 child, as this is what's driving a physical display. In this example, we can see it's AppleIntelFramebuffer@1. When we select it, you'll see in the left pane it has the property connector-type with the value <00 04 00 00>. And when we look to the below list:\n\n<02 00 00 00>        LVDS and eDP      - Laptop displays\n<10 00 00 00>        VGA               - Unsupported in 10.8 and newer\n<00 04 00 00>        DisplayPort       - USB-C display-out are DP internally\n<01 00 00 00>        DUMMY             - Used when there is no physical port\n<00 08 00 00>        HDMI\n<80 00 00 00>        S-Video\n<04 00 00 00>        DVI (Dual Link)\n<00 02 00 00>        DVI (Single Link)\n\n\n * Note: VGA on Skylake and newer are DisplayPorts internally and so are supported by macOS. Please use the DisplayPort connector for these systems.\n\nLooking closer, we see that the HDMI port was actually listed as a DisplayPort. This is where WhateverGreen's patching mechanisms come into play.\n\nSince the incorrect port was located at AppleIntelFramebuffer@1, this is port 1. Next we'll to enable WhateverGreen's patching mechanism for con1, and then set the connector type to HDMI. To do this, we set the following Properties under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0):\n\n * framebuffer-patch-enable = 01000000\n   * Enables WhateverGreen's patching mechanism\n * framebuffer-conX-enable = 01000000\n   * Enables WhateverGreen's patching on conX\n * framebuffer-conX-type = 00080000\n   * Sets the port to HDMI(<00 08 00 00>)\n\nNote: Remember to replace the conX in both patches with con1 to reflect the port that we want fixed, then set the values as listed above.\n\n",normalizedContent:"# patching connector types\n\n * images and info based off corpnewt's vanilla guide\n\nthis section is mainly relevant for users who either get black screen or incorrect color output on their displays(usually hdmi ports). this is due to apple forcing display types onto your hardware,. to work around it, we'll patch apple's connector types to properly respect our hardware.\n\nfor this example, let's take a uhd 630 system with an hdmi display attached. the machine has already been correctly setup however there's a pink/purple tint on the hdmi display.\n\ngrab a copy of ioreg and search for the igpu entry:\n\n\n\nnext, clear out the entry so we can see the children of the igpu device:\n\n\n\nas we can see in the above screenshot, we have a few framebuffer entries listed. these are all display personalities present in the framebuffer personality, and all have their own settings.\n\nfor us, we care about the entries that have a display0 child, as this is what's driving a physical display. in this example, we can see it's appleintelframebuffer@1. when we select it, you'll see in the left pane it has the property connector-type with the value <00 04 00 00>. and when we look to the below list:\n\n<02 00 00 00>        lvds and edp      - laptop displays\n<10 00 00 00>        vga               - unsupported in 10.8 and newer\n<00 04 00 00>        displayport       - usb-c display-out are dp internally\n<01 00 00 00>        dummy             - used when there is no physical port\n<00 08 00 00>        hdmi\n<80 00 00 00>        s-video\n<04 00 00 00>        dvi (dual link)\n<00 02 00 00>        dvi (single link)\n\n\n * note: vga on skylake and newer are displayports internally and so are supported by macos. please use the displayport connector for these systems.\n\nlooking closer, we see that the hdmi port was actually listed as a displayport. this is where whatevergreen's patching mechanisms come into play.\n\nsince the incorrect port was located at appleintelframebuffer@1, this is port 1. next we'll to enable whatevergreen's patching mechanism for con1, and then set the connector type to hdmi. to do this, we set the following properties under deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0):\n\n * framebuffer-patch-enable = 01000000\n   * enables whatevergreen's patching mechanism\n * framebuffer-conx-enable = 01000000\n   * enables whatevergreen's patching on conx\n * framebuffer-conx-type = 00080000\n   * sets the port to hdmi(<00 08 00 00>)\n\nnote: remember to replace the conx in both patches with con1 to reflect the port that we want fixed, then set the values as listed above.\n\n",charsets:{}},{title:"Patching VRAM",frontmatter:{},regularPath:"/gpu-patching/intel-patching/vram.html",relativePath:"gpu-patching/intel-patching/vram.md",key:"v-07350bfb",path:"/gpu-patching/intel-patching/vram.html",headers:[{level:2,title:"Creating our patch",slug:"creating-our-patch",normalizedTitle:"creating our patch",charIndex:2394},{level:2,title:"Applying our patch",slug:"applying-our-patch",normalizedTitle:"applying our patch",charIndex:3296}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Creating our patch Applying our patch",content:"# Patching VRAM\n\nThis section is mainly relevant for users who cannot unlock their BIOS to increase the allocated VRAM for their iGPU which results in a kernel panic in macOS. To work around this, we'll first want to identify the minimum amount of VRAM required for the framebuffer and then patch it to require less.\n\nFor this example, let's take a Haswell Lake Framebuffer that's commonly used on desktop Haswell iGPUs: 0x0D220003(0300220D when hex swapped)\n\nNow let's take a look at the corresponding information in WhateverGreen's manual(note you'll need to click \"Spoiler: Azul connectors\")\n\nID: 0D220003, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x00000402\nTOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)\nCamellia: CamelliaDisabled (0), Freq: 5273 Hz, FreqMax: 5273 Hz\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - ConnectorDP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - ConnectorDP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x00000011 - ConnectorDP\n01050900 00040000 87000000\n02040A00 00040000 87000000\n03060800 00040000 11000000\n\n\nHere what matters is the first 2 lines:\n\nID: 0D220003, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x00000402\nTOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)\n\n\nHere the main entries we care about:\n\nENTRY          VALUE   COMMENT\nSTOLEN         32MB    Memory reserved for the iGPU\nFBMEM          19MB    Memory reserved for the framebuffer\nTOTAL CURSOR   1 MB    Memory reserved for cursor\nTOTAL STOLEN   52 MB   Combination of the above\n\nNow let's say for example your motherboard only allocates 32MB for the iGPU, this will be too little for what the framebuffer expects and so will most likely kernel panic when it tries to write into an area of memory that does not exist.\n\nThat's where WhateverGreen's patching capabilities come in, here we're able to set the exact amount of iGPU memory the framebuffer expects with the following properties:\n\nVALUE                      COMMENT\nframebuffer-patch-enable   This enables WhateverGreen's patching capabilities\nframebuffer-stolenmem      This sets the value used by STOLEN entry\nframebuffer-fbmem          This sets the value used by FBMEM entry\n\n\n# Creating our patch\n\nSo to lower this VRAM requirement, we'll want to set STOLEN to 19MB and FBMEM to 9MB. This will get us underneath the 32MB limit.\n\nTo do this, we run the following commands to covert 9MB:\n\n# Convert 9MB Megabytes to Bytes\necho '9 * 1024 * 1024' | bc\n 9437184\n\n# Convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 9437184' | bc\n 900000\n\n# Hexswap so it can be injected correctly\n# ie. swap in pairs\n900000 -> 90 00 00 -> 00 00 90\n\n# Pad the value to 4 bytes with 00 at the end\n00 00 90 00\n\n\nAnd when we do this for both value, we get:\n\n * 19MB = 00 00 30 01\n * 9MB = 00 00 90 00\n\nAnd when we punch it into our WhateverGreen properties:\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n * For patch-enable, 01000000 simply refers to being enabled\n\n\n# Applying our patch\n\nNow with our patch made, head into your config.plist then under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) and add the properties:\n\n",normalizedContent:"# patching vram\n\nthis section is mainly relevant for users who cannot unlock their bios to increase the allocated vram for their igpu which results in a kernel panic in macos. to work around this, we'll first want to identify the minimum amount of vram required for the framebuffer and then patch it to require less.\n\nfor this example, let's take a haswell lake framebuffer that's commonly used on desktop haswell igpus: 0x0d220003(0300220d when hex swapped)\n\nnow let's take a look at the corresponding information in whatevergreen's manual(note you'll need to click \"spoiler: azul connectors\")\n\nid: 0d220003, stolen: 32 mb, fbmem: 19 mb, vram: 1536 mb, flags: 0x00000402\ntotal stolen: 52 mb, total cursor: 1 mb (1572864 bytes), max stolen: 116 mb, max overall: 117 mb (123219968 bytes)\ncamellia: camelliadisabled (0), freq: 5273 hz, freqmax: 5273 hz\nmobile: 0, pipecount: 3, portcount: 3, fbmemorycount: 3\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - connectordp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - connectordp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x00000011 - connectordp\n01050900 00040000 87000000\n02040a00 00040000 87000000\n03060800 00040000 11000000\n\n\nhere what matters is the first 2 lines:\n\nid: 0d220003, stolen: 32 mb, fbmem: 19 mb, vram: 1536 mb, flags: 0x00000402\ntotal stolen: 52 mb, total cursor: 1 mb (1572864 bytes), max stolen: 116 mb, max overall: 117 mb (123219968 bytes)\n\n\nhere the main entries we care about:\n\nentry          value   comment\nstolen         32mb    memory reserved for the igpu\nfbmem          19mb    memory reserved for the framebuffer\ntotal cursor   1 mb    memory reserved for cursor\ntotal stolen   52 mb   combination of the above\n\nnow let's say for example your motherboard only allocates 32mb for the igpu, this will be too little for what the framebuffer expects and so will most likely kernel panic when it tries to write into an area of memory that does not exist.\n\nthat's where whatevergreen's patching capabilities come in, here we're able to set the exact amount of igpu memory the framebuffer expects with the following properties:\n\nvalue                      comment\nframebuffer-patch-enable   this enables whatevergreen's patching capabilities\nframebuffer-stolenmem      this sets the value used by stolen entry\nframebuffer-fbmem          this sets the value used by fbmem entry\n\n\n# creating our patch\n\nso to lower this vram requirement, we'll want to set stolen to 19mb and fbmem to 9mb. this will get us underneath the 32mb limit.\n\nto do this, we run the following commands to covert 9mb:\n\n# convert 9mb megabytes to bytes\necho '9 * 1024 * 1024' | bc\n 9437184\n\n# convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 9437184' | bc\n 900000\n\n# hexswap so it can be injected correctly\n# ie. swap in pairs\n900000 -> 90 00 00 -> 00 00 90\n\n# pad the value to 4 bytes with 00 at the end\n00 00 90 00\n\n\nand when we do this for both value, we get:\n\n * 19mb = 00 00 30 01\n * 9mb = 00 00 90 00\n\nand when we punch it into our whatevergreen properties:\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n * for patch-enable, 01000000 simply refers to being enabled\n\n\n# applying our patch\n\nnow with our patch made, head into your config.plist then under deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) and add the properties:\n\n",charsets:{cjk:!0}},{title:"Legacy Intel Setup",frontmatter:{},regularPath:"/gpu-patching/legacy-intel/",relativePath:"gpu-patching/legacy-intel/README.md",key:"v-00ebb4fa",path:"/gpu-patching/legacy-intel/",headers:[{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:562},{level:2,title:"GMA 950 setup",slug:"gma-950-setup",normalizedTitle:"gma 950 setup",charIndex:1243},{level:3,title:"Property injection",slug:"property-injection",normalizedTitle:"property injection",charIndex:2519},{level:2,title:"GMA X3100 Setup",slug:"gma-x3100-setup",normalizedTitle:"gma x3100 setup",charIndex:1115},{level:3,title:"Property injection",slug:"property-injection-2",normalizedTitle:"property injection",charIndex:2519},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:1170},{level:3,title:"Dell laptops",slug:"dell-laptops",normalizedTitle:"dell laptops",charIndex:8119},{level:3,title:"Kernel Panic after 30 seconds",slug:"kernel-panic-after-30-seconds",normalizedTitle:"kernel panic after 30 seconds",charIndex:1209}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Prerequisites GMA 950 setup Property injection GMA X3100 Setup Property injection Troubleshooting Dell laptops Kernel Panic after 30 seconds",content:"# Legacy Intel Setup\n\nCovers support for the following GPU models:\n\n * GMA 900 (10.4 and 10.5)\n   * Partial support in 10.6 and 10.7, however acceleration issues are common\n * GMA 950(10.4-10.7)\n   * GMA 3150's can be spoofed for support, however proper acceleration is missing\n * GMA X3100(10.5-10.7)\n   * Note only mobile models(ie. 965 Express Chipset Family)\n\nPlease note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it. Information is based off of Clover's InjectIntel\n\n\n# Prerequisites\n\nUnfortunately GMA support is a bit more complicated with PCs, and because of this we need to force a 32-Bit kernelspace as the 64-Bit GMA drivers are known for weird GPU corruption and sleep issues. To do this:\n\n * Ensure all your kexts are either 32-Bit or FAT\n   * Run lipo -archs on the kext's binary to verify\n   * Common kexts are hosted here: Legacy-Kexts\n * Ensure you're booting a 32-Bit kernel\n   * Set Kernel -> Scheme -> KernelArch to i386\n\nNow we can proceed to setup:\n\n * GMA 950 Setup\n   * Supports GMA 900, 950 and 3150\n * GMA X3100 Setup\n   * Only supports mobile GMA X3100\n * Troubleshooting\n   * Dell Laptops\n   * Kernel Panic after 30 seconds\n\n\n# GMA 950 setup\n\n * Supported OSes: 10.4-10.7\n\nThis section is mainly relevant for GMA 900 and 950 users, and partial support for the GMA 3150 series. Note that GMA 900 are only properly supported in 10.4 and 10.5\n\nWithin AppleIntelGMA950.kext's Info.plist, the following Device IDs are supported:\n\n# Values pulled from OS X 10.7.0\n0x2582 - GMA 900 - Grantsdale - 945GM/GMS/940GML\n0x2592 - GMA 900 - Alviso     - 945G\n0x2772 - GMA 950 - Lakeport   - 915GM/GMS/910GML\n0x27A2 - GMA 950 - Calistoga  - 82915G/GV/910GL\n\n\nIf your iGPU is from one of the above families, but the device ID is not present you can easily add a fake device-id:\n\n# GMA 950(Calistoga) Fake ID\nconfig.plist:\n|-DeviceProperties\n |- Add\n  |- PciRoot(0x0)/Pci(0x2,0x0)\n   |- device-id | Data | A2270000\n\n\nFor a full list of supported GPU families, see below:\n\nGMA Device families\n\nFollowing pulled from Clover's GMA.c:\n\n# Grantsdale\n0x2582 - GMA 900 - 945GM/GMS/940GML\n0x258A - GMA 900 - E7221\n0x2782 - GMA 900 - 82915G\n\n# Alviso\n0x2592 - GMA 900 - 915GM/GMS/910GML\n0x2792 - GMA 900 - 915GM/GMS/910GML\n\n# Lakeport\n0x2772 - GMA 950 - 915GM/GMS/910GML\n0x2776 - GMA 950 - 915GM/GMS/910GML\n\n# Calistoga\n0x27A2 - GMA 950 - 82915G/GV/910GL\n0x27A6 - GMA 950 - 945GM/GMS/GME, 943/940GML\n0x27AE - GMA 950 - 945GSE\n\n\n\n# Property injection\n\nTo ensure proper acceleration with OpenCore, head to your config.plist then DeviceProperties -> Add. Create a new child called PciRoot(0x0)/Pci(0x2,0x0) and we'll be adding our needed properties:\n\nDesktops need very little properties, and most of the time can boot without any:\n\n * Desktop:\n\n| model         | String | GMA 950  | // Mainly cosmetic\n| AAPL,HasPanel | Data   | 00000000 |\n\n\n * Laptop:\n\n| model                     | String | GMA 950  | // Mainly cosmetic\n| AAPL,HasPanel             |  Data  | 01000000 |\n| AAPL01,BacklightIntensity |  Data  | 3F000008 |\n| AAPL01,BootDisplay        |  Data  | 01000000 |\n| AAPL01,DataJustify        |  Data  | 01000000 |\n| AAPL01,DualLink           |  Data  | 00       |\n\n* Set AAPL01,DualLink to 01 if your internal display is higher than 1366x768\n\n\nFor a full list of what Clover injects, see below:\n\nClover's InjectIntel Properties\n\nThe below properties is what Clover will inject for GMA 900/950 series iGPUs:\n\n| built-in                  | Data | 01       |\n| AAPL,HasPanel             | Data | 01000000 |\n| AAPL01,BacklightIntensity | Data | 3F000008 |\n| AAPL01,BootDisplay        | Data | 01000000 |\n| AAPL01,DataJustify        | Data | 01000000 |\n| AAPL01,Dither             | Data | 00000000 |\n| AAPL01,Interlace          | Data | 00000000 |\n| AAPL01,Inverter           | Data | 00000000 |\n| AAPL01,InverterCurrent    | Data | 00000000 |\n| AAPL01,LinkFormat         | Data | 00000000 |\n| AAPL01,LinkType           | Data | 00000000 |\n| AAPL01,Pipe               | Data | 01000000 |\n| AAPL01,Refresh            | Data | 3B000000 |\n| AAPL01,Stretch            | Data | 00000000 |\n| AAPL01,T1                 | Data | 00000000 |\n| AAPL01,T2                 | Data | 01000000 |\n| AAPL01,T3                 | Data | C8000000 |\n| AAPL01,T4                 | Data | C8010000 |\n| AAPL01,T5                 | Data | 01000000 |\n| AAPL01,T6                 | Data | 00000000 |\n| AAPL01,T7                 | Data | 90100000 |\n\n\nFor GMA 3150 users, you'll also want to add this patch:\n\nGMA 3150 Patch\n\nUnder Kernel -> Patch, add the following:\n\nComment    = GMA 3150 Cursor corruption fix\nEnabled    = True\nIdentifier = com.apple.driver.AppleIntelIntegratedFramebuffer\nFind       = 8b550883bab0000000017e36890424e832bbffff\nReplace    = b800000002909090909090909090eb0400000000\nMaxKernel  = 11.99.99\nMinKernel  = 8.00.00\n\n\nSource: GMA.c\n\n\n# GMA X3100 Setup\n\n * Supported OSes: 10.5-10.7\n\nWithin AppleIntelGMAX3100.kext's Info.plist, the following Device IDs are supported:\n\n# Values pulled from OS X 10.7.0\n0x2a02 - GMA X3100 - Crestline - GM965/GL960\n\n\nIf your iGPU is from the Crestline family, however the device ID is not present you can easily add a fake device-id:\n\n# GMA X3100(Crestline) Fake ID\nconfig.plist:\n|-DeviceProperties\n |- Add\n  |- PciRoot(0x0)/Pci(0x2,0x0)\n   |- device-id | Data | 022A0000\n\n\nFor a full list of supported GPU families, see below:\n\nGMA Device families\n\nFollowing pulled from Clover's GMA.c:\n\n# Calistoga\n0x2A02 - GMA X3100 - GM965/GL960\n0x2A03 - GMA X3100 - GM965/GL960\n0x2A12 - GMA X3100 - GME965/GLE960\n0x2A13 - GMA X3100 - GME965/GLE960\n\n\n\n# Property injection\n\nTo ensure proper acceleration with OpenCore, head to your config.plist then DeviceProperties -> Add. Create a new child called PciRoot(0x0)/Pci(0x2,0x0) and we'll be adding our needed properties:\n\nX3100 need very little properties, and most of the time can boot without any:\n\n| model                     | String | GMA X3100 | // Mainly cosmetic\n| AAPL,HasPanel             |  Data  | 01000000  |\n| AAPL,SelfRefreshSupported |  Data  | 01000000  | // Optional\n| AAPL,aux-power-connected  |  Data  | 01000000  | // Optional\n| AAPL,backlight-control    |  Data  | 01000008  | // Optional\n| AAPL01,BacklightIntensity |  Data  | 38000008  |\n| AAPL01,BootDisplay        |  Data  | 01000000  |\n| AAPL01,DataJustify        |  Data  | 01000000  |\n| AAPL01,DualLink           |  Data  | 00        |\n\n* Set AAPL01,DualLink to 01 if your internal display is higher than 1366x768\n\n\nFor a full list of what Clover injects, see below:\n\nClover's InjectIntel Properties\n\nThe below properties is what Clover will inject for GMA 900/950 series iGPUs:\n\n| built-in                       | Data | 01       |\n| AAPL,HasPanel                  | Data | 01000000 |\n| AAPL,SelfRefreshSupported      | Data | 01000000 |\n| AAPL,aux-power-connected       | Data | 01000000 |\n| AAPL,backlight-control         | Data | 01000008 |\n| AAPL00,blackscreen-preferences | Data | 00000008 |\n| AAPL01,BootDisplay             | Data | 01000000 |\n| AAPL01,BacklightIntensity      | Data | 38000008 |\n| AAPL01,blackscreen-preferences | Data | 00000000 |\n| AAPL01,DataJustify             | Data | 01000000 |\n| AAPL01,Dither                  | Data | 00000000 |\n| AAPL01,Interlace               | Data | 00000000 |\n| AAPL01,Inverter                | Data | 00000000 |\n| AAPL01,InverterCurrent         | Data | 08520000 |\n| AAPL01,LinkFormat              | Data | 00000000 |\n| AAPL01,LinkType                | Data | 00000000 |\n| AAPL01,Pipe                    | Data | 01000000 |\n| AAPL01,Refresh                 | Data | 3D000000 |\n| AAPL01,Stretch                 | Data | 00000000 |\n| AAPL01,T1                      | Data | 00000000 |\n| AAPL01,T2                      | Data | 01000000 |\n| AAPL01,T3                      | Data | C8000000 |\n| AAPL01,T4                      | Data | C8010000 |\n| AAPL01,T5                      | Data | 01000000 |\n| AAPL01,T6                      | Data | 00000000 |\n| AAPL01,T7                      | Data | 90100000 |\n\n\n\n# Troubleshooting\n\n\n# Dell laptops\n\nAn annoying issues with Dell laptops using GMA iGPUs is that they commonly get blackscreen during boot. This is due to the DVI device in ACPI, so we'll need to patch it to play nicely in macOS.\n\nExample SSDT:\n\nDefinitionBlock (\"\", \"SSDT\", 2, \"DRTNIA\", \"SsdtDvi\", 0x00001000)\n{\n    External (_SB_.PCI0.SBRG.GFX0.DVI_, DeviceObj)\n\n    Scope (\\_SB.PCI0.SBRG.GFX0.DVI)\n    {\n        Method (_STA, 0, NotSerialized)  // _STA: Status\n        {\n            If (_OSI (\"Darwin\"))\n            {\n                Return (0)\n            }\n            Else\n            {\n                Return (0x0F)\n            }\n        }\n    }\n\n\n\n# Kernel Panic after 30 seconds\n\nAnother odd issues with 10.6 and older is that the PciRoot's _UID value must be Zero else the kernel panic will happen. Example of bad UID entry:\n\nDevice (PCI0)  {\n Name (_HID, EisaId (\"PNP0A08\")) // Use PNP0A08 to find your PciRoot\n Name (_CID, EisaId (\"PNP0A03\"))\n Name (_ADR, One)\n Name (_UID, Zero)               // Needs to be patched to Zero\n",normalizedContent:"# legacy intel setup\n\ncovers support for the following gpu models:\n\n * gma 900 (10.4 and 10.5)\n   * partial support in 10.6 and 10.7, however acceleration issues are common\n * gma 950(10.4-10.7)\n   * gma 3150's can be spoofed for support, however proper acceleration is missing\n * gma x3100(10.5-10.7)\n   * note only mobile models(ie. 965 express chipset family)\n\nplease note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it. information is based off of clover's injectintel\n\n\n# prerequisites\n\nunfortunately gma support is a bit more complicated with pcs, and because of this we need to force a 32-bit kernelspace as the 64-bit gma drivers are known for weird gpu corruption and sleep issues. to do this:\n\n * ensure all your kexts are either 32-bit or fat\n   * run lipo -archs on the kext's binary to verify\n   * common kexts are hosted here: legacy-kexts\n * ensure you're booting a 32-bit kernel\n   * set kernel -> scheme -> kernelarch to i386\n\nnow we can proceed to setup:\n\n * gma 950 setup\n   * supports gma 900, 950 and 3150\n * gma x3100 setup\n   * only supports mobile gma x3100\n * troubleshooting\n   * dell laptops\n   * kernel panic after 30 seconds\n\n\n# gma 950 setup\n\n * supported oses: 10.4-10.7\n\nthis section is mainly relevant for gma 900 and 950 users, and partial support for the gma 3150 series. note that gma 900 are only properly supported in 10.4 and 10.5\n\nwithin appleintelgma950.kext's info.plist, the following device ids are supported:\n\n# values pulled from os x 10.7.0\n0x2582 - gma 900 - grantsdale - 945gm/gms/940gml\n0x2592 - gma 900 - alviso     - 945g\n0x2772 - gma 950 - lakeport   - 915gm/gms/910gml\n0x27a2 - gma 950 - calistoga  - 82915g/gv/910gl\n\n\nif your igpu is from one of the above families, but the device id is not present you can easily add a fake device-id:\n\n# gma 950(calistoga) fake id\nconfig.plist:\n|-deviceproperties\n |- add\n  |- pciroot(0x0)/pci(0x2,0x0)\n   |- device-id | data | a2270000\n\n\nfor a full list of supported gpu families, see below:\n\ngma device families\n\nfollowing pulled from clover's gma.c:\n\n# grantsdale\n0x2582 - gma 900 - 945gm/gms/940gml\n0x258a - gma 900 - e7221\n0x2782 - gma 900 - 82915g\n\n# alviso\n0x2592 - gma 900 - 915gm/gms/910gml\n0x2792 - gma 900 - 915gm/gms/910gml\n\n# lakeport\n0x2772 - gma 950 - 915gm/gms/910gml\n0x2776 - gma 950 - 915gm/gms/910gml\n\n# calistoga\n0x27a2 - gma 950 - 82915g/gv/910gl\n0x27a6 - gma 950 - 945gm/gms/gme, 943/940gml\n0x27ae - gma 950 - 945gse\n\n\n\n# property injection\n\nto ensure proper acceleration with opencore, head to your config.plist then deviceproperties -> add. create a new child called pciroot(0x0)/pci(0x2,0x0) and we'll be adding our needed properties:\n\ndesktops need very little properties, and most of the time can boot without any:\n\n * desktop:\n\n| model         | string | gma 950  | // mainly cosmetic\n| aapl,haspanel | data   | 00000000 |\n\n\n * laptop:\n\n| model                     | string | gma 950  | // mainly cosmetic\n| aapl,haspanel             |  data  | 01000000 |\n| aapl01,backlightintensity |  data  | 3f000008 |\n| aapl01,bootdisplay        |  data  | 01000000 |\n| aapl01,datajustify        |  data  | 01000000 |\n| aapl01,duallink           |  data  | 00       |\n\n* set aapl01,duallink to 01 if your internal display is higher than 1366x768\n\n\nfor a full list of what clover injects, see below:\n\nclover's injectintel properties\n\nthe below properties is what clover will inject for gma 900/950 series igpus:\n\n| built-in                  | data | 01       |\n| aapl,haspanel             | data | 01000000 |\n| aapl01,backlightintensity | data | 3f000008 |\n| aapl01,bootdisplay        | data | 01000000 |\n| aapl01,datajustify        | data | 01000000 |\n| aapl01,dither             | data | 00000000 |\n| aapl01,interlace          | data | 00000000 |\n| aapl01,inverter           | data | 00000000 |\n| aapl01,invertercurrent    | data | 00000000 |\n| aapl01,linkformat         | data | 00000000 |\n| aapl01,linktype           | data | 00000000 |\n| aapl01,pipe               | data | 01000000 |\n| aapl01,refresh            | data | 3b000000 |\n| aapl01,stretch            | data | 00000000 |\n| aapl01,t1                 | data | 00000000 |\n| aapl01,t2                 | data | 01000000 |\n| aapl01,t3                 | data | c8000000 |\n| aapl01,t4                 | data | c8010000 |\n| aapl01,t5                 | data | 01000000 |\n| aapl01,t6                 | data | 00000000 |\n| aapl01,t7                 | data | 90100000 |\n\n\nfor gma 3150 users, you'll also want to add this patch:\n\ngma 3150 patch\n\nunder kernel -> patch, add the following:\n\ncomment    = gma 3150 cursor corruption fix\nenabled    = true\nidentifier = com.apple.driver.appleintelintegratedframebuffer\nfind       = 8b550883bab0000000017e36890424e832bbffff\nreplace    = b800000002909090909090909090eb0400000000\nmaxkernel  = 11.99.99\nminkernel  = 8.00.00\n\n\nsource: gma.c\n\n\n# gma x3100 setup\n\n * supported oses: 10.5-10.7\n\nwithin appleintelgmax3100.kext's info.plist, the following device ids are supported:\n\n# values pulled from os x 10.7.0\n0x2a02 - gma x3100 - crestline - gm965/gl960\n\n\nif your igpu is from the crestline family, however the device id is not present you can easily add a fake device-id:\n\n# gma x3100(crestline) fake id\nconfig.plist:\n|-deviceproperties\n |- add\n  |- pciroot(0x0)/pci(0x2,0x0)\n   |- device-id | data | 022a0000\n\n\nfor a full list of supported gpu families, see below:\n\ngma device families\n\nfollowing pulled from clover's gma.c:\n\n# calistoga\n0x2a02 - gma x3100 - gm965/gl960\n0x2a03 - gma x3100 - gm965/gl960\n0x2a12 - gma x3100 - gme965/gle960\n0x2a13 - gma x3100 - gme965/gle960\n\n\n\n# property injection\n\nto ensure proper acceleration with opencore, head to your config.plist then deviceproperties -> add. create a new child called pciroot(0x0)/pci(0x2,0x0) and we'll be adding our needed properties:\n\nx3100 need very little properties, and most of the time can boot without any:\n\n| model                     | string | gma x3100 | // mainly cosmetic\n| aapl,haspanel             |  data  | 01000000  |\n| aapl,selfrefreshsupported |  data  | 01000000  | // optional\n| aapl,aux-power-connected  |  data  | 01000000  | // optional\n| aapl,backlight-control    |  data  | 01000008  | // optional\n| aapl01,backlightintensity |  data  | 38000008  |\n| aapl01,bootdisplay        |  data  | 01000000  |\n| aapl01,datajustify        |  data  | 01000000  |\n| aapl01,duallink           |  data  | 00        |\n\n* set aapl01,duallink to 01 if your internal display is higher than 1366x768\n\n\nfor a full list of what clover injects, see below:\n\nclover's injectintel properties\n\nthe below properties is what clover will inject for gma 900/950 series igpus:\n\n| built-in                       | data | 01       |\n| aapl,haspanel                  | data | 01000000 |\n| aapl,selfrefreshsupported      | data | 01000000 |\n| aapl,aux-power-connected       | data | 01000000 |\n| aapl,backlight-control         | data | 01000008 |\n| aapl00,blackscreen-preferences | data | 00000008 |\n| aapl01,bootdisplay             | data | 01000000 |\n| aapl01,backlightintensity      | data | 38000008 |\n| aapl01,blackscreen-preferences | data | 00000000 |\n| aapl01,datajustify             | data | 01000000 |\n| aapl01,dither                  | data | 00000000 |\n| aapl01,interlace               | data | 00000000 |\n| aapl01,inverter                | data | 00000000 |\n| aapl01,invertercurrent         | data | 08520000 |\n| aapl01,linkformat              | data | 00000000 |\n| aapl01,linktype                | data | 00000000 |\n| aapl01,pipe                    | data | 01000000 |\n| aapl01,refresh                 | data | 3d000000 |\n| aapl01,stretch                 | data | 00000000 |\n| aapl01,t1                      | data | 00000000 |\n| aapl01,t2                      | data | 01000000 |\n| aapl01,t3                      | data | c8000000 |\n| aapl01,t4                      | data | c8010000 |\n| aapl01,t5                      | data | 01000000 |\n| aapl01,t6                      | data | 00000000 |\n| aapl01,t7                      | data | 90100000 |\n\n\n\n# troubleshooting\n\n\n# dell laptops\n\nan annoying issues with dell laptops using gma igpus is that they commonly get blackscreen during boot. this is due to the dvi device in acpi, so we'll need to patch it to play nicely in macos.\n\nexample ssdt:\n\ndefinitionblock (\"\", \"ssdt\", 2, \"drtnia\", \"ssdtdvi\", 0x00001000)\n{\n    external (_sb_.pci0.sbrg.gfx0.dvi_, deviceobj)\n\n    scope (\\_sb.pci0.sbrg.gfx0.dvi)\n    {\n        method (_sta, 0, notserialized)  // _sta: status\n        {\n            if (_osi (\"darwin\"))\n            {\n                return (0)\n            }\n            else\n            {\n                return (0x0f)\n            }\n        }\n    }\n\n\n\n# kernel panic after 30 seconds\n\nanother odd issues with 10.6 and older is that the pciroot's _uid value must be zero else the kernel panic will happen. example of bad uid entry:\n\ndevice (pci0)  {\n name (_hid, eisaid (\"pnp0a08\")) // use pnp0a08 to find your pciroot\n name (_cid, eisaid (\"pnp0a03\"))\n name (_adr, one)\n name (_uid, zero)               // needs to be patched to zero\n",charsets:{cjk:!0}},{title:"Legacy Nvidia Patching",frontmatter:{},regularPath:"/gpu-patching/nvidia-patching/",relativePath:"gpu-patching/nvidia-patching/README.md",key:"v-7fa8f7d8",path:"/gpu-patching/nvidia-patching/",headers:[{level:3,title:"Finding the GPU pathing",slug:"finding-the-gpu-pathing",normalizedTitle:"finding the gpu pathing",charIndex:728},{level:3,title:"Building our DeviceProperties",slug:"building-our-deviceproperties",normalizedTitle:"building our deviceproperties",charIndex:1135},{level:3,title:"model",slug:"model",normalizedTitle:"model",charIndex:1372},{level:3,title:"VRAM,totalsize",slug:"vram-totalsize",normalizedTitle:"vram,totalsize",charIndex:1551},{level:3,title:"rom-revision",slug:"rom-revision",normalizedTitle:"rom-revision",charIndex:1630},{level:3,title:"NVCAP",slug:"nvcap",normalizedTitle:"nvcap",charIndex:1749},{level:3,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:6885}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Finding the GPU pathing Building our DeviceProperties model VRAM,totalsize rom-revision NVCAP Cleaning up",content:"# Legacy Nvidia Patching\n\n * Please note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it.\n\nWith legacy Nvidia GPUs, macOS has difficulties enabling acceleration due to many missing properties. To work around this, we can inject properties into IOService for macOS to easily interpret.\n\nTo start off, we'll be assuming the following:\n\n * macOS has already been installed in some way\n   * We need macOS installed to determine certain properties\n * Your GPU is either Fermi or older\n   * Kepler and newer do not need Device Property injection\n * Lilu and WhateverGreen are loaded\n   * verify by running kextstat | grep -E \"Lilu|WhateverGreen\"\n\n\n# Finding the GPU pathing\n\nFirst lets grab gfxutil and run the following:\n\npath/to/gfxutil -f display\n\n\nThis should spit out something like the following:\n\n67:00.0 10DE:0A20 /PC02@0/BR2A@0/GFX0@0/ = PciRoot(0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\nWhat we care about is the PciRoot section, as this is where our GPU is located and where we'll be injecting our properties:\n\nPciRoot(0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n\n# Building our DeviceProperties\n\nWith Nvidia GPUs, there's actually not too many properties required for setup. The main ones that are recommended are the following:\n\nPROPERTY         VALUE                                          COMMENT\nmodel            ex. GeForce GT 220                             GPU model name, cosmetic\ndevice_type      NVDA,Parent                                    Always set as NVDA,Parent\nVRAM,totalsize   ex. 0000004000000000                           Sets VRAM size\nrom-revision     Dortania                                       Property must exist, however the value can be anything\nNVCAP            ex. 0500000000000F00000000000000000F00000000   sets display properties used by macOS, more info below\n@0,compatible    NVDA,NVMac                                     Always set as NVDA,NVMac\n@0,device_type   display                                        Always set as display\n@0,name          NVDA,Display-A                                 Always set as NVDA,Display-A\n@1,compatible    NVDA,NVMac                                     Always set as NVDA,NVMac\n@1,device_type   display                                        Always set as display\n@1,name          NVDA,Display-B                                 Always set as NVDA,Display-B\n\nAnd to calculate the properties few properties:\n\n * model\n * VRAM,totalsize\n * rom-revision\n * NVCAP\n\n\n# model\n\nTechnically cosmetic, however macOS expects this entry so we'll provide it. The format is as follows:\n\nGeForce [Device Name]\n# Example\nGeForce GT 220\n\n\n\n# VRAM,totalsize\n\nAmount of VRAM present on your card, in hexadecimal.\n\nFor this example, lets convert 1024MB to hexadecimal:\n\n# Convert 1024MB Megabytes to Bytes\necho '1024 * 1024 * 1024' | bc\n 1073741824\n\n# Convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 1073741824' | bc\n 40000000\n\n# Hexswap so it can be injected correctly\n# ie. swap in pairs\n40000000 -> 40 00 00 00 -> 00 00 00 40\n\n# Pad the value to 8 bytes with 00 at the end\n00 00 00 40 00 00 00 00\n\n# And you're done\nVRAM,totalsize = 0000004000000000\n\n\n\n# rom-revision\n\nSimply can be any value, however the property must exist as some GPUs fail to initialize without it(ex. GT 220's)\n\nrom-revision = Dortania\n\n\n\n# NVCAP\n\nThis is where the fun comes it, as we'll now need to calculate the NVCAP value. Thankfully for us, 1Revenger1 has created a tool to automate the process: NVCAP Calculator\n\nTo use this program, simply grab your VBIOS(TechPowerUp hosts most VBIOS) and run NVCAP-Calculator within your terminal.\n\nOnce its running, you should see the following:\n\n\n\nGive it your VBIOS and then press enter. Once it takes you to the main menu, select option 2 to take you to the NVCAP calculation page.\n\n\n\nHere you can see the connectors that NVCAP-Calculator was able to find. Each Display may represent multiple DCB Entries, such as DVI (normally represented as two entries) or duplicate DCB entries. The goal here is to assign each display to a head. Each head can only output to one display at a time. For example, if your using 2 DVI ports, each should be on their own head to have proper dual monitor support.\n\nNote that some displays may be assigned automatically. An LVDS display will be put on it's own head automatically, and TV displays will be put on the TV head automatically.\n\nTo start assigning displays, press 1. To assign a display to a head, you type the number of the display then the number of the head. For example, typing in 1 1 results in:\n\n\n\nYou can type in 1 1 again to remove the display from the head. Once you are done assigning displays, it should look something like this:\n\n\n\nOnce you are done setting up the displays, press q to return to the other NVCAP settings. You should set the rest of the NVCAP settings as follows:\n\nNVCAP VALUE                    DETAILS                                                EXAMPLE COMMAND\nVersion                        04 for 7 series and older, 05 for 8 series and newer   3 then 4\nComposite                      01 for S-Video, 00 otherwise                           4 to toggle\nScript based Power/Backlight   00 ony useful for genuine MacBook Pros                 3 to toggle\nField F (Unknown)              0F for 300 series and newer, otherwise 07              6 then 0x0f\n\nOnce done, enter in c to calculate the NVCAP value\n\n\n\nYou now have your NVCAP value!\n\nNVCAP: \n05000000 00000300 0c000000 0000000f 00000000\n\n\nFor those who are wanting a break down on how to calculate the NVCAP value:\n\nNVCAP Table\n\nInfo based off of WhateverGreen's NVCAP.bt file\n\nNVCAP BIT     NAME                           COMMENT\nByte 1        NVCAP Version                  04 for 7 series and older, 05 for 8 series and newer\nByte 2        Laptop with Lid                01 for true, 00 otherwise\nByte 3        Composite                      01 for S-Video, 00 otherwise\nByte 4        Backlight                      01 for Tesla V1 with Backlight, otherwise 00 for newer GPUs\n                                             regardless of screen type\nBytes 5+6     TVDCBMask                      00 00, relates to DCB entry 5\nBytes 7+8     Head0DCBMask                   00 00, see below\nBytes 9+10    Head1DCBMask                   00 00, see below\nBytes 11+12   Head2DCBMask                   00 00, non-applicable for Fermi and older\nBytes 13+14   Head3DCBMask                   00 00, non-applicable for Fermi and older\nByte 15       ScriptBasedPowerAndBacklight   00, only relevant for genuine MacBook Pros\nByte 16       Unknown                        0F for 300 series and newer, otherwise 07\nByte 17       EDID                           00\nByte 18       Reserved                       00\nByte 19       Reserved                       00\nByte 20       Reserved                       00\n\n\n# Cleaning up\n\nNow that we've gotten all our properties, we can now add em up and place them in our config.plist:\n\nPciRoot(0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\nmodel          | String | GeForce GT 220\ndevice_type    | String | NVDA,Parent\nVRAM,totalsize |  Data  | 0000004000000000\nrom-revision   | String | Dortania\nNVCAP          |  Data  | 05000000 00000300 0c000000 0000000f 00000000\n@0,compatible  | String | NVDA,NVMac\n@0,device_type | String | display\n@0,name        | String | NVDA,Display-A\n@1,compatible  | String | NVDA,NVMac\n@1,device_type | String | display\n@1,name        | String | NVDA,Display-B\n\n\nOpen your config.plist and head to DeviceProperties -> Add, next create a new child with the name of your GPU's path(ie the one with gfxutil). Then, finally add the properties as children to the PciRoot. You should end up with something similar:\n\n",normalizedContent:"# legacy nvidia patching\n\n * please note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it.\n\nwith legacy nvidia gpus, macos has difficulties enabling acceleration due to many missing properties. to work around this, we can inject properties into ioservice for macos to easily interpret.\n\nto start off, we'll be assuming the following:\n\n * macos has already been installed in some way\n   * we need macos installed to determine certain properties\n * your gpu is either fermi or older\n   * kepler and newer do not need device property injection\n * lilu and whatevergreen are loaded\n   * verify by running kextstat | grep -e \"lilu|whatevergreen\"\n\n\n# finding the gpu pathing\n\nfirst lets grab gfxutil and run the following:\n\npath/to/gfxutil -f display\n\n\nthis should spit out something like the following:\n\n67:00.0 10de:0a20 /pc02@0/br2a@0/gfx0@0/ = pciroot(0x2)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\nwhat we care about is the pciroot section, as this is where our gpu is located and where we'll be injecting our properties:\n\npciroot(0x2)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n\n# building our deviceproperties\n\nwith nvidia gpus, there's actually not too many properties required for setup. the main ones that are recommended are the following:\n\nproperty         value                                          comment\nmodel            ex. geforce gt 220                             gpu model name, cosmetic\ndevice_type      nvda,parent                                    always set as nvda,parent\nvram,totalsize   ex. 0000004000000000                           sets vram size\nrom-revision     dortania                                       property must exist, however the value can be anything\nnvcap            ex. 0500000000000f00000000000000000f00000000   sets display properties used by macos, more info below\n@0,compatible    nvda,nvmac                                     always set as nvda,nvmac\n@0,device_type   display                                        always set as display\n@0,name          nvda,display-a                                 always set as nvda,display-a\n@1,compatible    nvda,nvmac                                     always set as nvda,nvmac\n@1,device_type   display                                        always set as display\n@1,name          nvda,display-b                                 always set as nvda,display-b\n\nand to calculate the properties few properties:\n\n * model\n * vram,totalsize\n * rom-revision\n * nvcap\n\n\n# model\n\ntechnically cosmetic, however macos expects this entry so we'll provide it. the format is as follows:\n\ngeforce [device name]\n# example\ngeforce gt 220\n\n\n\n# vram,totalsize\n\namount of vram present on your card, in hexadecimal.\n\nfor this example, lets convert 1024mb to hexadecimal:\n\n# convert 1024mb megabytes to bytes\necho '1024 * 1024 * 1024' | bc\n 1073741824\n\n# convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 1073741824' | bc\n 40000000\n\n# hexswap so it can be injected correctly\n# ie. swap in pairs\n40000000 -> 40 00 00 00 -> 00 00 00 40\n\n# pad the value to 8 bytes with 00 at the end\n00 00 00 40 00 00 00 00\n\n# and you're done\nvram,totalsize = 0000004000000000\n\n\n\n# rom-revision\n\nsimply can be any value, however the property must exist as some gpus fail to initialize without it(ex. gt 220's)\n\nrom-revision = dortania\n\n\n\n# nvcap\n\nthis is where the fun comes it, as we'll now need to calculate the nvcap value. thankfully for us, 1revenger1 has created a tool to automate the process: nvcap calculator\n\nto use this program, simply grab your vbios(techpowerup hosts most vbios) and run nvcap-calculator within your terminal.\n\nonce its running, you should see the following:\n\n\n\ngive it your vbios and then press enter. once it takes you to the main menu, select option 2 to take you to the nvcap calculation page.\n\n\n\nhere you can see the connectors that nvcap-calculator was able to find. each display may represent multiple dcb entries, such as dvi (normally represented as two entries) or duplicate dcb entries. the goal here is to assign each display to a head. each head can only output to one display at a time. for example, if your using 2 dvi ports, each should be on their own head to have proper dual monitor support.\n\nnote that some displays may be assigned automatically. an lvds display will be put on it's own head automatically, and tv displays will be put on the tv head automatically.\n\nto start assigning displays, press 1. to assign a display to a head, you type the number of the display then the number of the head. for example, typing in 1 1 results in:\n\n\n\nyou can type in 1 1 again to remove the display from the head. once you are done assigning displays, it should look something like this:\n\n\n\nonce you are done setting up the displays, press q to return to the other nvcap settings. you should set the rest of the nvcap settings as follows:\n\nnvcap value                    details                                                example command\nversion                        04 for 7 series and older, 05 for 8 series and newer   3 then 4\ncomposite                      01 for s-video, 00 otherwise                           4 to toggle\nscript based power/backlight   00 ony useful for genuine macbook pros                 3 to toggle\nfield f (unknown)              0f for 300 series and newer, otherwise 07              6 then 0x0f\n\nonce done, enter in c to calculate the nvcap value\n\n\n\nyou now have your nvcap value!\n\nnvcap: \n05000000 00000300 0c000000 0000000f 00000000\n\n\nfor those who are wanting a break down on how to calculate the nvcap value:\n\nnvcap table\n\ninfo based off of whatevergreen's nvcap.bt file\n\nnvcap bit     name                           comment\nbyte 1        nvcap version                  04 for 7 series and older, 05 for 8 series and newer\nbyte 2        laptop with lid                01 for true, 00 otherwise\nbyte 3        composite                      01 for s-video, 00 otherwise\nbyte 4        backlight                      01 for tesla v1 with backlight, otherwise 00 for newer gpus\n                                             regardless of screen type\nbytes 5+6     tvdcbmask                      00 00, relates to dcb entry 5\nbytes 7+8     head0dcbmask                   00 00, see below\nbytes 9+10    head1dcbmask                   00 00, see below\nbytes 11+12   head2dcbmask                   00 00, non-applicable for fermi and older\nbytes 13+14   head3dcbmask                   00 00, non-applicable for fermi and older\nbyte 15       scriptbasedpowerandbacklight   00, only relevant for genuine macbook pros\nbyte 16       unknown                        0f for 300 series and newer, otherwise 07\nbyte 17       edid                           00\nbyte 18       reserved                       00\nbyte 19       reserved                       00\nbyte 20       reserved                       00\n\n\n# cleaning up\n\nnow that we've gotten all our properties, we can now add em up and place them in our config.plist:\n\npciroot(0x2)/pci(0x0,0x0)/pci(0x0,0x0)\n\nmodel          | string | geforce gt 220\ndevice_type    | string | nvda,parent\nvram,totalsize |  data  | 0000004000000000\nrom-revision   | string | dortania\nnvcap          |  data  | 05000000 00000300 0c000000 0000000f 00000000\n@0,compatible  | string | nvda,nvmac\n@0,device_type | string | display\n@0,name        | string | nvda,display-a\n@1,compatible  | string | nvda,nvmac\n@1,device_type | string | display\n@1,name        | string | nvda,display-b\n\n\nopen your config.plist and head to deviceproperties -> add, next create a new child with the name of your gpu's path(ie the one with gfxutil). then, finally add the properties as children to the pciroot. you should end up with something similar:\n\n",charsets:{cjk:!0}},{title:"Battery Status",frontmatter:{},regularPath:"/laptop-specific/battery.html",relativePath:"laptop-specific/battery.md",key:"v-13d59a53",path:"/laptop-specific/battery.html",headers:[{level:2,title:"Dual Battery",slug:"dual-battery",normalizedTitle:"dual battery",charIndex:1095},{level:2,title:"Cycle Count",slug:"cycle-count",normalizedTitle:"cycle count",charIndex:1326},{level:2,title:"Battery Information Supplement",slug:"battery-information-supplement",normalizedTitle:"battery information supplement",charIndex:2024},{level:2,title:"DSDT Patching",slug:"dsdt-patching",normalizedTitle:"dsdt patching",charIndex:2606},{level:2,title:"Battery Hot-patching",slug:"battery-hot-patching",normalizedTitle:"battery hot-patching",charIndex:3233}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Dual Battery Cycle Count Battery Information Supplement DSDT Patching Battery Hot-patching",content:"# Battery Status\n\nWith ECEnabler.kext, ACPI patching is no longer required for working battery percentage. If you would like battery functionality beyond charge percentage (e.g. cycle count, or temperature/other supplemental data) or have dual batteries, you still will need to create ACPI patches - see the resources below.\n\n * If battery status is not working even with ECEnabler, make sure you have the SMCBatteryManager VirtualSMC plugin enabled in your OpenCore configuration.\n\n * Certain devices, such as the Surface 3, Surface Pro 5, Surface Book 2, and Surface Laptop (and all subsequent Surface devices), use proprietary Embedded Controllers (or other similar hardware) instead of standard ACPI battery devices and OperationRegion fields, and thus without device-specific kexts, battery status cannot work.\n\nBattery Patching Resources\n * Note: If you are using the ECEnabler kext, you do not need to split EC fields as shown in the guides below. This means that you can use the field names in your DSDT directly instead of through utility methods (e.g. B1B2, B1B4, RE1B, and RECB).\n\n\n# Dual Battery\n\nBecause macOS does not properly support systems with dual batteries, you have to merge the two batteries in ACPI.\n\nRefer to the VirtualSMC documentation for information on how to handle dual-battery laptops: Link\n\n\n# Cycle Count\n\nSome laptop vendors, such as HP, already supply cycle count information. However, their firmwares either do not implement or expose it within the _BIX method. In the past, Rehabman's ACPIBatteryManager employed a hack to support cycle counts on firmwares which do not have a _BIX method, however with SMCBatteryManager this is no longer supported.\n\nRefer to the VirtualSMC documentation for information on how to transition from the ACPIBatteryManager cycle count hack to a proper _BIX method implementation: Link\n\nThe documentation may also prove useful for those implementing cycle count for the first time rather than transitioning from the ACPIBatteryManager cycle count hack.\n\n\n# Battery Information Supplement\n\nAlthough many laptops supply supplemental battery information (e.g. manufacture date and battery temperature) in their EC fields, the traditional _BIF, _BIX, and _BST ACPI methods do not support providing this information. Thus, SMCBatteryManager supports two ACPI methods, CBIS and CBSS to provide this information to macOS.\n\nRefer to the VirtualSMC documentation for information on how to implement these methods: Link\n\nLegacy Patching Resources\n * Note: Rehabman's guides say to use ACPIBatteryManager, you must use SMCBatteryManager instead.\n\n\n# DSDT Patching\n\nWhile custom DSDT injection should be avoided as to prevent issues with Windows and firmware updates, it can be quite helpful as a starting point since it's a bit easier to grasp and do yourself:\n\nRehabman's how to patch DSDT for working battery status\n\n * Note: When re-injecting your DSDT, it should be the first in the list of ACPI -> Add in the config.plist. And also remember that the patched DSDT would also go into EFI/OC/ACPI\n\n * Note 2: Avoid using the MaciASL and iASL provided by Rehabman, they have been long neglected and so highly recommended grabbing a newer variant from Acidanthera: MaciASL\n\n\n# Battery Hot-patching\n\nOnce you've finally gotten your DSDT patched and battery working in macOS, it's time to finally create our very own hot-patches. How these differ from regular DSDT patching is that it's done on the fly with the DSDT allowing for greater flexibility with firmware updates:\n\nRehabman's Guide to Using Clover to \"hotpatch\" ACPI\n\n * Note: Specifically post #2 refers to battery hot-patching",normalizedContent:"# battery status\n\nwith ecenabler.kext, acpi patching is no longer required for working battery percentage. if you would like battery functionality beyond charge percentage (e.g. cycle count, or temperature/other supplemental data) or have dual batteries, you still will need to create acpi patches - see the resources below.\n\n * if battery status is not working even with ecenabler, make sure you have the smcbatterymanager virtualsmc plugin enabled in your opencore configuration.\n\n * certain devices, such as the surface 3, surface pro 5, surface book 2, and surface laptop (and all subsequent surface devices), use proprietary embedded controllers (or other similar hardware) instead of standard acpi battery devices and operationregion fields, and thus without device-specific kexts, battery status cannot work.\n\nbattery patching resources\n * note: if you are using the ecenabler kext, you do not need to split ec fields as shown in the guides below. this means that you can use the field names in your dsdt directly instead of through utility methods (e.g. b1b2, b1b4, re1b, and recb).\n\n\n# dual battery\n\nbecause macos does not properly support systems with dual batteries, you have to merge the two batteries in acpi.\n\nrefer to the virtualsmc documentation for information on how to handle dual-battery laptops: link\n\n\n# cycle count\n\nsome laptop vendors, such as hp, already supply cycle count information. however, their firmwares either do not implement or expose it within the _bix method. in the past, rehabman's acpibatterymanager employed a hack to support cycle counts on firmwares which do not have a _bix method, however with smcbatterymanager this is no longer supported.\n\nrefer to the virtualsmc documentation for information on how to transition from the acpibatterymanager cycle count hack to a proper _bix method implementation: link\n\nthe documentation may also prove useful for those implementing cycle count for the first time rather than transitioning from the acpibatterymanager cycle count hack.\n\n\n# battery information supplement\n\nalthough many laptops supply supplemental battery information (e.g. manufacture date and battery temperature) in their ec fields, the traditional _bif, _bix, and _bst acpi methods do not support providing this information. thus, smcbatterymanager supports two acpi methods, cbis and cbss to provide this information to macos.\n\nrefer to the virtualsmc documentation for information on how to implement these methods: link\n\nlegacy patching resources\n * note: rehabman's guides say to use acpibatterymanager, you must use smcbatterymanager instead.\n\n\n# dsdt patching\n\nwhile custom dsdt injection should be avoided as to prevent issues with windows and firmware updates, it can be quite helpful as a starting point since it's a bit easier to grasp and do yourself:\n\nrehabman's how to patch dsdt for working battery status\n\n * note: when re-injecting your dsdt, it should be the first in the list of acpi -> add in the config.plist. and also remember that the patched dsdt would also go into efi/oc/acpi\n\n * note 2: avoid using the maciasl and iasl provided by rehabman, they have been long neglected and so highly recommended grabbing a newer variant from acidanthera: maciasl\n\n\n# battery hot-patching\n\nonce you've finally gotten your dsdt patched and battery working in macos, it's time to finally create our very own hot-patches. how these differ from regular dsdt patching is that it's done on the fly with the dsdt allowing for greater flexibility with firmware updates:\n\nrehabman's guide to using clover to \"hotpatch\" acpi\n\n * note: specifically post #2 refers to battery hot-patching",charsets:{}},{title:"Fixing CFG Lock",frontmatter:{},regularPath:"/misc/msr-lock.html",relativePath:"misc/msr-lock.md",key:"v-aaa8e5da",path:"/misc/msr-lock.html",headers:[{level:2,title:"What is CFG-Lock",slug:"what-is-cfg-lock",normalizedTitle:"what is cfg-lock",charIndex:318},{level:2,title:"Checking if your firmware supports CFG Lock unlocking",slug:"checking-if-your-firmware-supports-cfg-lock-unlocking",normalizedTitle:"checking if your firmware supports cfg lock unlocking",charIndex:1276},{level:3,title:"Checking via OpenCore logs",slug:"checking-via-opencore-logs",normalizedTitle:"checking via opencore logs",charIndex:1663},{level:3,title:"Checking via ControlMsrE2",slug:"checking-via-controlmsre2",normalizedTitle:"checking via controlmsre2",charIndex:2242},{level:2,title:"Disabling CFG Lock",slug:"disabling-cfg-lock",normalizedTitle:"disabling cfg lock",charIndex:2070},{level:2,title:"Turning off CFG-Lock manually",slug:"turning-off-cfg-lock-manually",normalizedTitle:"turning off cfg-lock manually",charIndex:3428}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"What is CFG-Lock Checking if your firmware supports CFG Lock unlocking Checking via OpenCore logs Checking via ControlMsrE2 Disabling CFG Lock Turning off CFG-Lock manually",content:"# Fixing CFG Lock\n\nThis guide is only recommended for users who have already installed macOS, for users who are installing for the first time enable AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks\n\n * Note that this guide is only applicable for Intel users. AMD users don't have any type of CFG Lock\n\n\n# What is CFG-Lock\n\nCFG-Lock is a setting in your BIOS that allows for a specific register(in this case the MSR 0xE2) to be written to. By default, most motherboards lock this variable with many even hiding the option outright in the GUI. And why we care about it is that macOS actually wants to write to this variable, and not just one part of macOS. Instead both the Kernel (XNU) and AppleIntelPowerManagement want this register.\n\nSo to fix it we have 2 options:\n\n# 1. Patch macOS to work with our hardware\n\n * This creates instability and unnecessary patching for many\n * The 2 patches we use for this:\n   * AppleCpuPmCfgLock for AppleIntelPowerManagement.kext\n   * AppleXcpmCfgLock for the Kernel(XNU)\n\n# 2. Patch our firmware to support MSR E2 write\n\n * Very much preferred, as avoids patching allowing for greater flexibility regarding stability and OS upgrades\n\nNote: Penyrn based machines actually don't need to worry about unlocking this register\n\n\n# Checking if your firmware supports CFG Lock unlocking\n\nBefore proceeding with the rest of this guide, you'll first need to check if your firmware supports CFG Lock unlocking. To check it, you can proceed into two ways:\n\n 1. Use the DEBUG version of OpenCore and check what the log says about CFG Lock\n 2. Use a tool called ControlMsrE2 which will speed up the whole checking process\n\n\n# Checking via OpenCore logs\n\nFor users who prefer using DEBUG release, you'll want to enable the DEBUG variant of OpenCore with Target set to 67 and boot OpenCore. This should provide you with a file in the format of opencore-YYYY-MM-DD-hhmmss.txt on the root of the drive.\n\nWithin this file, search for OCCPU: EIST CFG Lock:\n\nOCCPU: EIST CFG Lock 1\n\n\nIf it returns 1, then you proceed with this guide here: Disabling CFG Lock.\n\nOtherwise(ie. 0), no reason to continue and you can simply disable Kernel -> Quirks -> AppleCpuPmCfgLock and Kernel -> Quirks -> AppleXcpmCfgLock.\n\n\n# Checking via ControlMsrE2\n\nTo start, download ControlMsrE2 and add this tool inside EFI/OC/Tools and config.plist(this can be done with ProperTree's snapshot function(ie. Cmd+R)). Next, boot OpenCore and select the ControlMsrE2.efi entry. This should provide you one of the following:\n\n * CFG-Lock is enabled:\n\nThis firmware has LOCKED MSR 0xE2 register!\n\n\n * CFG-Lock is disabled:\n\nThis firmware has UNLOCKED MSR 0xE2 register!\n\n\nFor the former, please continue here: Disabling CFG Lock.\n\nFor the latter, you don't need to do any CFG-Lock patches and can simply disable Kernel -> Quirks -> AppleCpuPmCfgLock and Kernel -> Quirks -> AppleXcpmCfgLock.\n\n\n# Disabling CFG Lock\n\nSo you've created the EFI folder but you can't still boot without unlocking before CFG Lock. In order to do this you'll need the following:\n\nInside your EFI/OC/Tools folder and config.plist, add the following tool(this can be done with ProperTree's snapshot function(ie. Cmd+R)):\n\n * Modified GRUB Shell\n\nAnd some apps to help us out:\n\n * UEFITool (Make sure it's UEFITool and not UEFIExtract)\n * Universal-IFR-Extractor\n\nAnd the final part, grabbing your BIOS from the vendors' website.\n\nNow the fun part!\n\n\n# Turning off CFG-Lock manually\n\nPlease note that the only firmwares that can be directly opened by UEFITool are ASUS, MSI and ASRock. Other firmwares need a special procedure which we'll not directly cover into this guide. For Dell firmwares, please refer to dreamwhite's guide\n\n 1. Open your firmware with UEFITool and then find CFG Lock as a Unicode string. If nothing pops up then your firmware doesn't support CFG Lock, otherwise continue on.\n\n\n\n 1. You'll find that this string is found within a Setup folder, right-click and export as Setup.bin (or even Setup.sct)\n\n 2. Open your setup file with ifrextract and export as a .txt file with terminal:\n    \n    path/to/ifrextract path/to/Setup.bin path/to/Setup.txt\n    \n\n 3. Open the text file and search for CFG Lock, VarStoreInfo (VarOffset/VarName): and note the offset right after it (ie: 0x43) and the VarStore ID right after the offset (ie: 0x3)\n\n 4. Search for VarStoreId: 0x3 where 0x3 is replaced with the value of the VarStoreId you found and note the Name after it (ie: CpuSetup)\n\n\n\n 1. Run the Modified GRUB Shell and write the following command where CpuSetup is replaced with the VarStore Name you've previously extracted and 0x43 is replaced with the offset you've previously extracted:\n    \n    setup_var_cv CpuSetup 0x43 0x01 0x00\n    \n\nAt this point, run either reboot in the shell or simply reboot your machine. And with that, you should have CFG Lock unlocked! To verify, you can run over the methods listed at Checking if your firmware supports CFG Lock unlocking to verify whether the variable was set correctly then finally disable Kernel -> Quirks -> AppleCpuPmCfgLock and Kernel -> Quirks -> AppleXcpmCfgLock.\n\n * Do note that variable offsets are unique not just to each motherboard but even to its firmware version. Never try to use an offset without checking.\n\nAnd you're done! Now you'll have correct CPU power management\n\n * Note: Every time you reset your BIOS you will need to flip this bit again, make sure to write it down with the BIOS version so you know which.\n\n * Note 2: Some OEMs like Lenovo may have the variable set but cannot unlock it without physically modding the BIOS, for these situations you may need to use a tool like RU: CFG LOCK/Unlocking - Alternative method",normalizedContent:"# fixing cfg lock\n\nthis guide is only recommended for users who have already installed macos, for users who are installing for the first time enable applecpupmcfglock and applexcpmcfglock under kernel -> quirks\n\n * note that this guide is only applicable for intel users. amd users don't have any type of cfg lock\n\n\n# what is cfg-lock\n\ncfg-lock is a setting in your bios that allows for a specific register(in this case the msr 0xe2) to be written to. by default, most motherboards lock this variable with many even hiding the option outright in the gui. and why we care about it is that macos actually wants to write to this variable, and not just one part of macos. instead both the kernel (xnu) and appleintelpowermanagement want this register.\n\nso to fix it we have 2 options:\n\n# 1. patch macos to work with our hardware\n\n * this creates instability and unnecessary patching for many\n * the 2 patches we use for this:\n   * applecpupmcfglock for appleintelpowermanagement.kext\n   * applexcpmcfglock for the kernel(xnu)\n\n# 2. patch our firmware to support msr e2 write\n\n * very much preferred, as avoids patching allowing for greater flexibility regarding stability and os upgrades\n\nnote: penyrn based machines actually don't need to worry about unlocking this register\n\n\n# checking if your firmware supports cfg lock unlocking\n\nbefore proceeding with the rest of this guide, you'll first need to check if your firmware supports cfg lock unlocking. to check it, you can proceed into two ways:\n\n 1. use the debug version of opencore and check what the log says about cfg lock\n 2. use a tool called controlmsre2 which will speed up the whole checking process\n\n\n# checking via opencore logs\n\nfor users who prefer using debug release, you'll want to enable the debug variant of opencore with target set to 67 and boot opencore. this should provide you with a file in the format of opencore-yyyy-mm-dd-hhmmss.txt on the root of the drive.\n\nwithin this file, search for occpu: eist cfg lock:\n\noccpu: eist cfg lock 1\n\n\nif it returns 1, then you proceed with this guide here: disabling cfg lock.\n\notherwise(ie. 0), no reason to continue and you can simply disable kernel -> quirks -> applecpupmcfglock and kernel -> quirks -> applexcpmcfglock.\n\n\n# checking via controlmsre2\n\nto start, download controlmsre2 and add this tool inside efi/oc/tools and config.plist(this can be done with propertree's snapshot function(ie. cmd+r)). next, boot opencore and select the controlmsre2.efi entry. this should provide you one of the following:\n\n * cfg-lock is enabled:\n\nthis firmware has locked msr 0xe2 register!\n\n\n * cfg-lock is disabled:\n\nthis firmware has unlocked msr 0xe2 register!\n\n\nfor the former, please continue here: disabling cfg lock.\n\nfor the latter, you don't need to do any cfg-lock patches and can simply disable kernel -> quirks -> applecpupmcfglock and kernel -> quirks -> applexcpmcfglock.\n\n\n# disabling cfg lock\n\nso you've created the efi folder but you can't still boot without unlocking before cfg lock. in order to do this you'll need the following:\n\ninside your efi/oc/tools folder and config.plist, add the following tool(this can be done with propertree's snapshot function(ie. cmd+r)):\n\n * modified grub shell\n\nand some apps to help us out:\n\n * uefitool (make sure it's uefitool and not uefiextract)\n * universal-ifr-extractor\n\nand the final part, grabbing your bios from the vendors' website.\n\nnow the fun part!\n\n\n# turning off cfg-lock manually\n\nplease note that the only firmwares that can be directly opened by uefitool are asus, msi and asrock. other firmwares need a special procedure which we'll not directly cover into this guide. for dell firmwares, please refer to dreamwhite's guide\n\n 1. open your firmware with uefitool and then find cfg lock as a unicode string. if nothing pops up then your firmware doesn't support cfg lock, otherwise continue on.\n\n\n\n 1. you'll find that this string is found within a setup folder, right-click and export as setup.bin (or even setup.sct)\n\n 2. open your setup file with ifrextract and export as a .txt file with terminal:\n    \n    path/to/ifrextract path/to/setup.bin path/to/setup.txt\n    \n\n 3. open the text file and search for cfg lock, varstoreinfo (varoffset/varname): and note the offset right after it (ie: 0x43) and the varstore id right after the offset (ie: 0x3)\n\n 4. search for varstoreid: 0x3 where 0x3 is replaced with the value of the varstoreid you found and note the name after it (ie: cpusetup)\n\n\n\n 1. run the modified grub shell and write the following command where cpusetup is replaced with the varstore name you've previously extracted and 0x43 is replaced with the offset you've previously extracted:\n    \n    setup_var_cv cpusetup 0x43 0x01 0x00\n    \n\nat this point, run either reboot in the shell or simply reboot your machine. and with that, you should have cfg lock unlocked! to verify, you can run over the methods listed at checking if your firmware supports cfg lock unlocking to verify whether the variable was set correctly then finally disable kernel -> quirks -> applecpupmcfglock and kernel -> quirks -> applexcpmcfglock.\n\n * do note that variable offsets are unique not just to each motherboard but even to its firmware version. never try to use an offset without checking.\n\nand you're done! now you'll have correct cpu power management\n\n * note: every time you reset your bios you will need to flip this bit again, make sure to write it down with the bios version so you know which.\n\n * note 2: some oems like lenovo may have the variable set but cannot unlock it without physically modding the bios, for these situations you may need to use a tool like ru: cfg lock/unlocking - alternative method",charsets:{}},{title:"Emulated NVRAM",frontmatter:{},regularPath:"/misc/nvram.html",relativePath:"misc/nvram.md",key:"v-c6c22d8e",path:"/misc/nvram.html",headers:[{level:2,title:"Cleaning out the Clover gunk",slug:"cleaning-out-the-clover-gunk",normalizedTitle:"cleaning out the clover gunk",charIndex:468},{level:2,title:"Verifying if you have working NVRAM",slug:"verifying-if-you-have-working-nvram",normalizedTitle:"verifying if you have working nvram",charIndex:1103},{level:2,title:"Emulating NVRAM (with a nvram.plist)",slug:"emulating-nvram-with-a-nvram-plist",normalizedTitle:"emulating nvram (with a nvram.plist)",charIndex:1478}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Cleaning out the Clover gunk Verifying if you have working NVRAM Emulating NVRAM (with a nvram.plist)",content:"# Emulated NVRAM\n\nDANGER\n\nThis is not up to date for OpenCore 0.8.3!\n\nSo this section is for those who don't have native NVRAM, the most common hardware to have incompatible native NVRAM with macOS are X99 and some X299 series chipsets:\n\n * X99\n * X299\n\nFor B360, B365, H310, H370, and Z390 users, make sure you have SSDT-PMC both under EFI/OC/ACPI and config.plist -> ACPI -> Add. For more info on making and compiling SSDTs, please see Getting started with ACPI\n\n\n# Cleaning out the Clover gunk\n\nSo some may not have noticed but Clover may have installed RC scripts into macOS for proper NVRAM emulation. This is an issue as it conflicts with OpenCore's method of emulation.\n\nFiles to delete:\n\n * /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi\n * /Volumes/EFI/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_ESP.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nIf folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\n\n# Verifying if you have working NVRAM\n\nTo start, open the terminal and run the following command, which sets a variable named test in your NVRAM to the current date and time:\n\nsudo nvram myvar=\"$(date)\"\n\n\nNow reboot and run this:\n\nnvram myvar\n\n\nIf nothing returns then your NVRAM is not working. If a line containing myvar and then the current date, your NVRAM is working.\n\n\n# Emulating NVRAM (with a nvram.plist)\n\nIf you don't have native NVRAM, don't fret. We can set up emulated NVRAM by using a script to save the NVRAM contents to a plist during the shutdown process, which will then be loaded by OpenCore at the next startup.\n\nTo enable emulated NVRAM, you'll need the following set:\n\nWithin your config.plist:\n\n * Booter -> Quirks:\n   * DisableVariableWrite: set to NO\n * Misc -> Security:\n   * ExposeSensitiveData: set to at least 0x1\n * NVRAM:\n   * LegacyOverwrite set to YES\n   * LegacySchema: NVRAM variables set (OpenCore compares these to the variables present in nvram.plist)\n   * WriteFlash: set to YES\n\nAnd within your EFI:\n\n * OpenVariableRuntimeDxe.efi driver\n * OpenRuntime.efi driver (this is needed for proper sleep, shutdown and other services to work correctly)\n\nMake sure to snapshot after to make sure the drivers are listed in your config.plist. Afterwards, make sure that both OpenVariableRuntimeDxe.efi and OpenRuntime.efi have LoadEarly set to YES, and that OpenVariableRuntimeDxe.efi is placed before OpenRuntime.efi in your config .\n\nNow grab the LogoutHook folder (inside Utilities) and place it somewhere safe (e.g. within your user directory, as shown below):\n\n/Users/$(whoami)/LogoutHook/\n\nOpen up terminal and run the following (one at a time):\n\ncd /Users/$(whoami)/LogoutHook/\n./Launchd.command install \n\n\nAnd voila! You have emulated NVRAM!",normalizedContent:"# emulated nvram\n\ndanger\n\nthis is not up to date for opencore 0.8.3!\n\nso this section is for those who don't have native nvram, the most common hardware to have incompatible native nvram with macos are x99 and some x299 series chipsets:\n\n * x99\n * x299\n\nfor b360, b365, h310, h370, and z390 users, make sure you have ssdt-pmc both under efi/oc/acpi and config.plist -> acpi -> add. for more info on making and compiling ssdts, please see getting started with acpi\n\n\n# cleaning out the clover gunk\n\nso some may not have noticed but clover may have installed rc scripts into macos for proper nvram emulation. this is an issue as it conflicts with opencore's method of emulation.\n\nfiles to delete:\n\n * /volumes/efi/efi/clover/drivers64uefi/emuvariableuefi-64.efi\n * /volumes/efi/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_esp.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nif folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\n\n# verifying if you have working nvram\n\nto start, open the terminal and run the following command, which sets a variable named test in your nvram to the current date and time:\n\nsudo nvram myvar=\"$(date)\"\n\n\nnow reboot and run this:\n\nnvram myvar\n\n\nif nothing returns then your nvram is not working. if a line containing myvar and then the current date, your nvram is working.\n\n\n# emulating nvram (with a nvram.plist)\n\nif you don't have native nvram, don't fret. we can set up emulated nvram by using a script to save the nvram contents to a plist during the shutdown process, which will then be loaded by opencore at the next startup.\n\nto enable emulated nvram, you'll need the following set:\n\nwithin your config.plist:\n\n * booter -> quirks:\n   * disablevariablewrite: set to no\n * misc -> security:\n   * exposesensitivedata: set to at least 0x1\n * nvram:\n   * legacyoverwrite set to yes\n   * legacyschema: nvram variables set (opencore compares these to the variables present in nvram.plist)\n   * writeflash: set to yes\n\nand within your efi:\n\n * openvariableruntimedxe.efi driver\n * openruntime.efi driver (this is needed for proper sleep, shutdown and other services to work correctly)\n\nmake sure to snapshot after to make sure the drivers are listed in your config.plist. afterwards, make sure that both openvariableruntimedxe.efi and openruntime.efi have loadearly set to yes, and that openvariableruntimedxe.efi is placed before openruntime.efi in your config .\n\nnow grab the logouthook folder (inside utilities) and place it somewhere safe (e.g. within your user directory, as shown below):\n\n/users/$(whoami)/logouthook/\n\nopen up terminal and run the following (one at a time):\n\ncd /users/$(whoami)/logouthook/\n./launchd.command install \n\n\nand voila! you have emulated nvram!",charsets:{}},{title:"Fixing RTC write issues",frontmatter:{},regularPath:"/misc/rtc.html",relativePath:"misc/rtc.md",key:"v-740c98ba",path:"/misc/rtc.html",headers:[{level:2,title:"Finding our bad RTC region",slug:"finding-our-bad-rtc-region",normalizedTitle:"finding our bad rtc region",charIndex:1611},{level:2,title:"Making the blacklist more permanent",slug:"making-the-blacklist-more-permanent",normalizedTitle:"making the blacklist more permanent",charIndex:4387}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Finding our bad RTC region Making the blacklist more permanent",content:"# Fixing RTC write issues\n\nWhat this section attempts to teach is how to resolve RTC(CMOS) issues on reboot/wake with certain machines. Most commonly looking like the image below:\n\n\n\nThe reason that these CMOS and safe mode errors happen is due to AppleRTC writing to certain areas that are not supported by the hardware properly and thus resulting in panics and errors.\n\nTo get around this, we've commonly blocked out all RTC writes with these types of patches but they're not ideal for many reasons including both breaking Windows and Linux and disabling potential supported regions like for power management.\n\nSo with OpenCore, we've got a few options to choose:\n\n * Patch AppleRTC from writing to specific regions\n   * They may break in future OS updates\n   * Much more difficult for the end user to patch\n   * Does not handle EfiBoot writing to RTC\n * Omit bad regions from being writable\n   * They may break in future firmware updates\n   * Much easier for the end user to patch\n   * Prevents EfiBoot from breaking your system as well\n\nThe former is actually already integrated into OpenCore with the DisableRtcChecksum quirk, but has the downfall of only blocking regions 0x58-0x59 and only working in the kernel level. Best way to know if this option is best, enable it and try. If this doesn't work, disable as it's an unnecessary patch.\n\nWith the latter, we're able to block very specific regions of our choice that match our exact model. And we're able to do this both in the kernel level and firmware aiding with hibernation support. This however will requires much more time and RTCMemoryFixup.\n\n\n# Finding our bad RTC region\n\nFor the rest of this guide, we're going to assume you've tested option 1(DisableRtcChecksum) and it didn't work or you're having issues with EfiBoot also writing to RTC. To get started, we should first introduce a few ideas:\n\n * RTC will have regions spanning from 0 to 255\n * These regions will be in the hexadecimal counting system so in reality will be 0x00-0xFF\n * To omit bad regions, we use the boot-arg rtcfx_exclude=00-FF\n   * Replace 00-FF with your bad region (or regions)\n   * Reminder that boot-args is located under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 in your config.plist\n   * This will also require you to have RTCMemoryFixup in your config.plist and EFI/OC/Kexts folder.\n * There can be multiple bad regions\n * To find the bad region, we'll want to split out search into chunks\n\nRegarding splitting out chunks, what we'll be doing is omitting chunks of RTC regions until we've narrowed down far enough to the exact spot that's bad. You can see the below on how to start:\n\n# 1. Testing RtcMemoryFixup\n\n * To start, you'll need to add rtcfx_exclude=00-FF in boot-args. If after a reboot the RTC errors seems solved, this will tell you whether your CMOS errors are RTC related\n\n# 2. Split 0x00-0xFF into 2\n\n * 0x00-0x7F and 0x80-0xFF\n   * write down the excluded range which fixes the RTC errors and proceed by splitting more into chunks\n   * e.g. rtcfx_exclude=00-7Ffixes the RTC errors so you're gonna split it by half and don't consider more rtcfx_exclude=80-FF\n * Test rtcfx_exclude=00-7F and rtcfx_exclude=80-FF\n   * Note you may also get a bad range of 7F-80, or even bad regions split into multiple sections(ex. 0x00-0x01 and 0x80-0x81)\n   * You can use rtcfx_exclude=00-01,7F-80 to resolve this\n\n# 3. After testing which regions is bad, shrink even more\n\n * Assuming our bad region was within 0x80-0xFF, you'd next split that into 2:\n * 0x80-0xBF and 0xC0-0xFF\n   * if you had multiple ranges that are bad\n\n# 4. And you'll continue on with this pattern until you've narrowed down the bad region. Note that you will need to reboot each time to test if you're still getting CMOS/Safe-mode errors\n\n * Also note that the final bad spot will usually be a range and not a singular spot.\n * ie. rtcfx_exclude=85-86 instead of one singular value\n\nPro tip: To find a value in between 2 regions, I recommend first converting from hexadecimal to decimal, then run the below equation:\n\n * (x + y) / 2\n\nNow lets try to use this with step 1 from earlier:\n\n * 0x00-0xFF -> 0-255 -> (0 + 255) / 2 = 127.5\n\nNow with 127.5, you'll round up and down to get yourselves an end and a start value:\n\n * 0-127 -> 0x00-0x7F\n\n * 128-255 -> 0x80-0xFF\n\nAnd hopefully this can help better understand how you got our values from step 1.\n\n\n# Making the blacklist more permanent\n\nOnce you've found the bad RTC region, you can now finally add it to OpenCore itself and allow this region to also be blacklisted at the firmware level.\n\nFor this, open up your config.plist and head to the NVRAM -> Add section. Here under the 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102 GUID, you'll want to add a new entry called rtc-blacklist\n\nNext you'll want to add our bad RTC region as an array, so rtcfx_exclude=85-86 will become rtc-blacklist | Data | 8586. This will also work with longer ranges such as 85-89 and such however with rtc-blacklist you must include every entry(ie. <85 86 87 88 89>). Remember to remove the boot-arg once you're set rtc-blacklist\n\nNext ensure you have NVRAM -> Delete also set as NVRAM variables will not be overwritten by OpenCore unless explicitly told so.\n\nOnce all this is done, you should have something similar to below:\n\n",normalizedContent:"# fixing rtc write issues\n\nwhat this section attempts to teach is how to resolve rtc(cmos) issues on reboot/wake with certain machines. most commonly looking like the image below:\n\n\n\nthe reason that these cmos and safe mode errors happen is due to applertc writing to certain areas that are not supported by the hardware properly and thus resulting in panics and errors.\n\nto get around this, we've commonly blocked out all rtc writes with these types of patches but they're not ideal for many reasons including both breaking windows and linux and disabling potential supported regions like for power management.\n\nso with opencore, we've got a few options to choose:\n\n * patch applertc from writing to specific regions\n   * they may break in future os updates\n   * much more difficult for the end user to patch\n   * does not handle efiboot writing to rtc\n * omit bad regions from being writable\n   * they may break in future firmware updates\n   * much easier for the end user to patch\n   * prevents efiboot from breaking your system as well\n\nthe former is actually already integrated into opencore with the disablertcchecksum quirk, but has the downfall of only blocking regions 0x58-0x59 and only working in the kernel level. best way to know if this option is best, enable it and try. if this doesn't work, disable as it's an unnecessary patch.\n\nwith the latter, we're able to block very specific regions of our choice that match our exact model. and we're able to do this both in the kernel level and firmware aiding with hibernation support. this however will requires much more time and rtcmemoryfixup.\n\n\n# finding our bad rtc region\n\nfor the rest of this guide, we're going to assume you've tested option 1(disablertcchecksum) and it didn't work or you're having issues with efiboot also writing to rtc. to get started, we should first introduce a few ideas:\n\n * rtc will have regions spanning from 0 to 255\n * these regions will be in the hexadecimal counting system so in reality will be 0x00-0xff\n * to omit bad regions, we use the boot-arg rtcfx_exclude=00-ff\n   * replace 00-ff with your bad region (or regions)\n   * reminder that boot-args is located under nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 in your config.plist\n   * this will also require you to have rtcmemoryfixup in your config.plist and efi/oc/kexts folder.\n * there can be multiple bad regions\n * to find the bad region, we'll want to split out search into chunks\n\nregarding splitting out chunks, what we'll be doing is omitting chunks of rtc regions until we've narrowed down far enough to the exact spot that's bad. you can see the below on how to start:\n\n# 1. testing rtcmemoryfixup\n\n * to start, you'll need to add rtcfx_exclude=00-ff in boot-args. if after a reboot the rtc errors seems solved, this will tell you whether your cmos errors are rtc related\n\n# 2. split 0x00-0xff into 2\n\n * 0x00-0x7f and 0x80-0xff\n   * write down the excluded range which fixes the rtc errors and proceed by splitting more into chunks\n   * e.g. rtcfx_exclude=00-7ffixes the rtc errors so you're gonna split it by half and don't consider more rtcfx_exclude=80-ff\n * test rtcfx_exclude=00-7f and rtcfx_exclude=80-ff\n   * note you may also get a bad range of 7f-80, or even bad regions split into multiple sections(ex. 0x00-0x01 and 0x80-0x81)\n   * you can use rtcfx_exclude=00-01,7f-80 to resolve this\n\n# 3. after testing which regions is bad, shrink even more\n\n * assuming our bad region was within 0x80-0xff, you'd next split that into 2:\n * 0x80-0xbf and 0xc0-0xff\n   * if you had multiple ranges that are bad\n\n# 4. and you'll continue on with this pattern until you've narrowed down the bad region. note that you will need to reboot each time to test if you're still getting cmos/safe-mode errors\n\n * also note that the final bad spot will usually be a range and not a singular spot.\n * ie. rtcfx_exclude=85-86 instead of one singular value\n\npro tip: to find a value in between 2 regions, i recommend first converting from hexadecimal to decimal, then run the below equation:\n\n * (x + y) / 2\n\nnow lets try to use this with step 1 from earlier:\n\n * 0x00-0xff -> 0-255 -> (0 + 255) / 2 = 127.5\n\nnow with 127.5, you'll round up and down to get yourselves an end and a start value:\n\n * 0-127 -> 0x00-0x7f\n\n * 128-255 -> 0x80-0xff\n\nand hopefully this can help better understand how you got our values from step 1.\n\n\n# making the blacklist more permanent\n\nonce you've found the bad rtc region, you can now finally add it to opencore itself and allow this region to also be blacklisted at the firmware level.\n\nfor this, open up your config.plist and head to the nvram -> add section. here under the 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102 guid, you'll want to add a new entry called rtc-blacklist\n\nnext you'll want to add our bad rtc region as an array, so rtcfx_exclude=85-86 will become rtc-blacklist | data | 8586. this will also work with longer ranges such as 85-89 and such however with rtc-blacklist you must include every entry(ie. <85 86 87 88 89>). remember to remove the boot-arg once you're set rtc-blacklist\n\nnext ensure you have nvram -> delete also set as nvram variables will not be overwritten by opencore unless explicitly told so.\n\nonce all this is done, you should have something similar to below:\n\n",charsets:{cjk:!0}},{title:"Installing and using BootCamp utilities",frontmatter:{},regularPath:"/multiboot/bootcamp.html",relativePath:"multiboot/bootcamp.md",key:"v-ecd4631e",path:"/multiboot/bootcamp.html",headers:[{level:2,title:"Preparations",slug:"preparations",normalizedTitle:"preparations",charIndex:814},{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:1101},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:3180},{level:2,title:"Can't find Windows/BootCamp drive in picker",slug:"can-t-find-windows-bootcamp-drive-in-picker",normalizedTitle:"can't find windows/bootcamp drive in picker",charIndex:3200},{level:2,title:'"You can\'t change the startup disk to the selected disk" error',slug:"you-can-t-change-the-startup-disk-to-the-selected-disk-error",normalizedTitle:"&quot;you can't change the startup disk to the selected disk&quot; error",charIndex:null},{level:2,title:"Booting Windows results in BlueScreen or Linux crashes",slug:"booting-windows-results-in-bluescreen-or-linux-crashes",normalizedTitle:"booting windows results in bluescreen or linux crashes",charIndex:3313},{level:2,title:"Booting Windows error: OCB: StartImage failed - Already started",slug:"booting-windows-error-ocb-startimage-failed-already-started",normalizedTitle:"booting windows error: ocb: startimage failed - already started",charIndex:3371},{level:2,title:"Windows Startup Disk can't see APFS drives",slug:"windows-startup-disk-can-t-see-apfs-drives",normalizedTitle:"windows startup disk can't see apfs drives",charIndex:1687}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Preparations Installation Troubleshooting Can't find Windows/BootCamp drive in picker \"You can't change the startup disk to the selected disk\" error Booting Windows results in BlueScreen or Linux crashes Booting Windows error: OCB: StartImage failed - Already started Windows Startup Disk can't see APFS drives",content:"# Installing and using BootCamp utilities\n\nSo a neat feature of OpenCore is the ability to avoid the BIOS entirely and use Startup disk solely for multiboot. Problem comes in when we try to boot windows and have no way of setting the boot option back to macOS. That's where the BootCamp utilities come in.\n\n * Note: This guide will not cover the creation of the Windows installer, only the installation of BootCamp drivers.\n   * Example of Windows installer creation: Build a Bootable Windows ISO\n   * Reminder: Windows MUST be GPT/GUID based, OpenCore will not boot legacy installs\n * Note 2: Using BootCamp utilities from macOS will erase the EFI/BOOT/BOOTx64.efi file on your EFI, which is needed for booting OpenCore. And OpenCore itself does not support MBR based installs so the utility is useless to us\n\n\n# Preparations\n\nTo start we'll need the following:\n\n * Windows already installed\n   * MUST be UEFI/GPT based\n * Brigadier\n   * To download the BootCamp drivers\n * Setup LauncherOption\n   * Not required but can help alleviate headaches when Windows erases the BOOTx64.efi OpenCore uses\n\n\n# Installation\n\nTo install, it's as simple as grabbing Brigadier and running either Brigadier.bat for Windows or Brigadier.command for macOS. If the SMBIOS you're currently using either has BootCamp issues or want to download for another SMBIOS, you can add -- model{SMBIOS} to the end:\n\npath/to/Brigadier --model MacPro7,1\n\n\n * Note: Older versions of the BootCamp installer(6.0) do not support APFS, you'll need to either choose a newer SMBIOS that would have it bundled(ie. iMac 19,1) or after installation update your bootcamp software. See below for more details on troubleshooting: Windows Startup Disk can't see APFS drives\n\n\n\nNext you will find our bootcamp drivers under either:\n\n * Windows:\n\n\\Users\\{Username}\\bootcamp-{filename}\\BootCamp\n\n\n * macOS:\n\n/Users/{Username}/BootCamp-{filename}/WindowsSupport.dmg\n\n\nmacOS users will next need to expand WindowsSupport.dmg and place it somewhere Windows can get.\n\n\n\nNext, within Windows, you have two choices.\n\nEither navigate to the bootcamp-{filename}\\BootCamp folder and run Setup.exe, this requires correct spoofing of SMBIOS SystemProductName - shown as System Model in Windows - to launch:\n\n\n\nAlternatively, launch bootcamp-{filename}\\BootCamp\\Drivers\\Apple\\BootCamp.msi as Administrator - for instance by starting it directly from an Administrator command shell - this skips the BootCamp model check entirely:\n\n\n\nOnce all is finished, you now have BootCamp switching! There should be a little BootCamp icon in you tray now that you can select which drive to boot to.\n\n * Note: For those no needing the extra drivers BootCamp provides, you can delete the following:\n   * $WinPEDriver$: DO NOT delete the folder itself, just the drivers inside\n     * Apple Wifi card users will want to keep the following:\n       * $WinPEDriver$/BroadcomWireless\n       * $WinPEDriver$/BroadcomBluetooth\n       * $WinPEDriver$/AppleBluetoothBroadcom\n   * BootCamp/Drivers/...\n     * DO NOT delete BootCamp/Drivers/Apple\n     * Apple Wifi card users will want to keep the following:\n       * BootCamp/Drivers/Broadcom/BroadcomBluetooth\n\n\n# Troubleshooting\n\n * Can't find Windows/BootCamp drive in picker\n * \"You can't change the startup disk to the selected disk\" error\n * Booting Windows results in BlueScreen or Linux crashes\n * Booting Windows error: OCB: StartImage failed - Already started\n * Windows Startup Disk can't see APFS drives\n\n\n# Can't find Windows/BootCamp drive in picker\n\nSo with OpenCore, we have to note that legacy Windows installs are not supported, only UEFI. Most installs now are UEFI based but those made by BootCamp Assistant in macOS are legacy based, so you'll have to find other means to make an installer(Google's your friend). This also means MasterBootRecord/Hybrid partitions are also broken so you'll need to format the drive you want to install onto with DiskUtility.\n\nNow to get onto troubleshooting:\n\n * Make sure Misc -> Security -> ScanPolicy is set to 0 to show all drives\n\nIf Windows and OpenCore's boot loaders are on the same drive, you'll need to add a BlessOverride entry:\n\nMisc -> BlessOverride -> \\EFI\\Microsoft\\Boot\\bootmgfw.efi\n\n\n * Note: As of OpenCore 0.5.9, this no longer needs to be specified. OpenCore should pick up on this entry automatically\n\n\n\n\n# \"You can't change the startup disk to the selected disk\" error\n\nThis is commonly caused by either:\n\n * 3rd Party NTFS Drivers(ie. Paragon)\n * Irregular partition setup of the Windows drive, specifically that the EFI is not the first partition.\n\nTo fix the former, either disable or uninstall these tools.\n\nTo fix the latter, we need to enable this quirk:\n\n * PlatformInfo -> Generic -> AdviseFeatures -> True\n\n\n\n\n# Booting Windows results in BlueScreen or Linux crashes\n\nThis is due to alignment issues, make sure SyncRuntimePermissions is enabled on firmwares supporting MATs. Check your logs whether your firmware supports Memory Attribute Tables(generally seen on 2018 firmwares and newer)\n\nFor Z390 and newer motherboards, you'll also want to enable ProtectUefiServices to ensure OpenCore's patches are applying correctly.\n\nIf your firmware is quite old(generally 2013 and older), you'll want to enable ProtectMemoryRegions.\n\nDue to the variations of firmwares from vendor to vendor, you'll need to play around with the combination of these 3 quirks and see which works best.\n\nCommon Windows error code:\n\n * 0xc000000d\n\n\n# Booting Windows error: OCB: StartImage failed - Already started\n\nThis is due to OpenCore getting confused when trying to boot Windows and accidentally thinking it's booting OpenCore. This can be avoided by either move Windows to it's own drive or adding a custom drive path under BlessOverride. See Configuration.pdf and Can't find Windows/BootCamp drive in picker entry for more details.\n\n\n# Windows Startup Disk can't see APFS drives\n\n * Outdated BootCamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). You can try to alleviate these issues by either updating to the newest release with Apple's software updater or selecting a newer SMBIOS from brigadier(ie. --model iMac19,1) and when running brigadier.\n\nFor the latter, you'll need to run the following(replace filename.msi with the BootCamp installation msi):\n\nmsiexec.exe /x \"c:\\filename.msi\"\n",normalizedContent:"# installing and using bootcamp utilities\n\nso a neat feature of opencore is the ability to avoid the bios entirely and use startup disk solely for multiboot. problem comes in when we try to boot windows and have no way of setting the boot option back to macos. that's where the bootcamp utilities come in.\n\n * note: this guide will not cover the creation of the windows installer, only the installation of bootcamp drivers.\n   * example of windows installer creation: build a bootable windows iso\n   * reminder: windows must be gpt/guid based, opencore will not boot legacy installs\n * note 2: using bootcamp utilities from macos will erase the efi/boot/bootx64.efi file on your efi, which is needed for booting opencore. and opencore itself does not support mbr based installs so the utility is useless to us\n\n\n# preparations\n\nto start we'll need the following:\n\n * windows already installed\n   * must be uefi/gpt based\n * brigadier\n   * to download the bootcamp drivers\n * setup launcheroption\n   * not required but can help alleviate headaches when windows erases the bootx64.efi opencore uses\n\n\n# installation\n\nto install, it's as simple as grabbing brigadier and running either brigadier.bat for windows or brigadier.command for macos. if the smbios you're currently using either has bootcamp issues or want to download for another smbios, you can add -- model{smbios} to the end:\n\npath/to/brigadier --model macpro7,1\n\n\n * note: older versions of the bootcamp installer(6.0) do not support apfs, you'll need to either choose a newer smbios that would have it bundled(ie. imac 19,1) or after installation update your bootcamp software. see below for more details on troubleshooting: windows startup disk can't see apfs drives\n\n\n\nnext you will find our bootcamp drivers under either:\n\n * windows:\n\n\\users\\{username}\\bootcamp-{filename}\\bootcamp\n\n\n * macos:\n\n/users/{username}/bootcamp-{filename}/windowssupport.dmg\n\n\nmacos users will next need to expand windowssupport.dmg and place it somewhere windows can get.\n\n\n\nnext, within windows, you have two choices.\n\neither navigate to the bootcamp-{filename}\\bootcamp folder and run setup.exe, this requires correct spoofing of smbios systemproductname - shown as system model in windows - to launch:\n\n\n\nalternatively, launch bootcamp-{filename}\\bootcamp\\drivers\\apple\\bootcamp.msi as administrator - for instance by starting it directly from an administrator command shell - this skips the bootcamp model check entirely:\n\n\n\nonce all is finished, you now have bootcamp switching! there should be a little bootcamp icon in you tray now that you can select which drive to boot to.\n\n * note: for those no needing the extra drivers bootcamp provides, you can delete the following:\n   * $winpedriver$: do not delete the folder itself, just the drivers inside\n     * apple wifi card users will want to keep the following:\n       * $winpedriver$/broadcomwireless\n       * $winpedriver$/broadcombluetooth\n       * $winpedriver$/applebluetoothbroadcom\n   * bootcamp/drivers/...\n     * do not delete bootcamp/drivers/apple\n     * apple wifi card users will want to keep the following:\n       * bootcamp/drivers/broadcom/broadcombluetooth\n\n\n# troubleshooting\n\n * can't find windows/bootcamp drive in picker\n * \"you can't change the startup disk to the selected disk\" error\n * booting windows results in bluescreen or linux crashes\n * booting windows error: ocb: startimage failed - already started\n * windows startup disk can't see apfs drives\n\n\n# can't find windows/bootcamp drive in picker\n\nso with opencore, we have to note that legacy windows installs are not supported, only uefi. most installs now are uefi based but those made by bootcamp assistant in macos are legacy based, so you'll have to find other means to make an installer(google's your friend). this also means masterbootrecord/hybrid partitions are also broken so you'll need to format the drive you want to install onto with diskutility.\n\nnow to get onto troubleshooting:\n\n * make sure misc -> security -> scanpolicy is set to 0 to show all drives\n\nif windows and opencore's boot loaders are on the same drive, you'll need to add a blessoverride entry:\n\nmisc -> blessoverride -> \\efi\\microsoft\\boot\\bootmgfw.efi\n\n\n * note: as of opencore 0.5.9, this no longer needs to be specified. opencore should pick up on this entry automatically\n\n\n\n\n# \"you can't change the startup disk to the selected disk\" error\n\nthis is commonly caused by either:\n\n * 3rd party ntfs drivers(ie. paragon)\n * irregular partition setup of the windows drive, specifically that the efi is not the first partition.\n\nto fix the former, either disable or uninstall these tools.\n\nto fix the latter, we need to enable this quirk:\n\n * platforminfo -> generic -> advisefeatures -> true\n\n\n\n\n# booting windows results in bluescreen or linux crashes\n\nthis is due to alignment issues, make sure syncruntimepermissions is enabled on firmwares supporting mats. check your logs whether your firmware supports memory attribute tables(generally seen on 2018 firmwares and newer)\n\nfor z390 and newer motherboards, you'll also want to enable protectuefiservices to ensure opencore's patches are applying correctly.\n\nif your firmware is quite old(generally 2013 and older), you'll want to enable protectmemoryregions.\n\ndue to the variations of firmwares from vendor to vendor, you'll need to play around with the combination of these 3 quirks and see which works best.\n\ncommon windows error code:\n\n * 0xc000000d\n\n\n# booting windows error: ocb: startimage failed - already started\n\nthis is due to opencore getting confused when trying to boot windows and accidentally thinking it's booting opencore. this can be avoided by either move windows to it's own drive or adding a custom drive path under blessoverride. see configuration.pdf and can't find windows/bootcamp drive in picker entry for more details.\n\n\n# windows startup disk can't see apfs drives\n\n * outdated bootcamp drivers(generally ver 6.0 will come with brigadier, bootcamp utility in macos provides newer version like ver 6.1). you can try to alleviate these issues by either updating to the newest release with apple's software updater or selecting a newer smbios from brigadier(ie. --model imac19,1) and when running brigadier.\n\nfor the latter, you'll need to run the following(replace filename.msi with the bootcamp installation msi):\n\nmsiexec.exe /x \"c:\\filename.msi\"\n",charsets:{}},{title:"Using LauncherOption",frontmatter:{},regularPath:"/multiboot/bootstrap.html",relativePath:"multiboot/bootstrap.md",key:"v-7995a69a",path:"/multiboot/bootstrap.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:611},{level:2,title:"Booting",slug:"booting",normalizedTitle:"booting",charIndex:1076},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:1442},{level:3,title:"Verify LauncherOption entry was applied",slug:"verify-launcheroption-entry-was-applied",normalizedTitle:"verify launcheroption entry was applied",charIndex:1700},{level:3,title:"Removing LauncherOption entry from BIOS",slug:"removing-launcheroption-entry-from-bios",normalizedTitle:"removing launcheroption entry from bios",charIndex:1743},{level:2,title:"Updating Bootstrap in 0.6.6",slug:"updating-bootstrap-in-0-6-6",normalizedTitle:"updating bootstrap in 0.6.6",charIndex:143},{level:3,title:"With Bootstrap disabled",slug:"with-bootstrap-disabled",normalizedTitle:"with bootstrap disabled",charIndex:2868},{level:3,title:"With Bootstrap enabled",slug:"with-bootstrap-enabled",normalizedTitle:"with bootstrap enabled",charIndex:3098}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Prerequisites Booting Troubleshooting Verify LauncherOption entry was applied Removing LauncherOption entry from BIOS Updating Bootstrap in 0.6.6 With Bootstrap disabled With Bootstrap enabled",content:"# Using LauncherOption\n\n * Note: With OpenCore 0.6.6, Bootstrap.efi has been replaced with LauncherOption. See here for more info on updating: Updating Bootstrap in 0.6.6\n\nWith OpenCore 0.6.6 and newer, we are now able to launch OpenCore directly from our firmwares without needing a launcher (Bootstrap.efi or BOOTx64.efi) as an intermediary. This allows us to add OpenCore to our motherboard's boot menu and prevent issues where either Windows or Linux try to overwrite the EFI/BOOT/BOOTx64.efi path, which can happen when installing or updating Windows and therefore breaking OpenCore's ability to boot.\n\n\n# Prerequisites\n\n\n\n * OpenCore 0.6.6 or newer\n   * For 0.6.5 and older users upgrading, see here: Updating Bootstrap in 0.6.6\n * config.plist settings:\n   * Misc -> Boot -> LauncherOption = Full\n     * Use Short for Insyde based firmwares, commonly found on laptops\n   * UEFI -> Quirks -> RequestBootVarRouting = True\n * OpenShell\n   * Bundled with OpenCore\n   * Remember to add this to both EFI/OC/Tools and Misc -> Tools\n   * This is mainly for troubleshooting\n\n\n# Booting\n\nIf everything is set up correctly, the first boot will have OpenCore create a new boot option in our BIOS (pointing to EFI/OC/OpenCore.efi) and future boots will update the entry making sure it's correct and ensuring it is still present. This now allows us to remove BOOTx64.efi and not worry about other OSes overwriting the EFI/BOOT/BOOTx64.efi path.\n\n\n# Troubleshooting\n\nIf no new boot option is created, you can follow these troubleshooting steps but first double-check the prerequisites were met. The following sections are a mini-guide in case LauncherOption doesn't work or you'd like to do it manually.\n\n * Verify LauncherOption entry was applied\n * Removing LauncherOption entry from BIOS\n\n\n# Verify LauncherOption entry was applied\n\nFor those wanting to verify that the entry was applied in OpenCore, enable logging (see OpenCore Debugging) and check for entries similar to these:\n\nOCB: Have existing option 1, valid 1\nOCB: Boot order has first option as the default option\n\n\n\n# Removing LauncherOption entry from BIOS\n\nBecause the LauncherOption entry is a protected entry when resetting NVRAM, you'll need to disable LauncherOption first before you can remove it:\n\n * Misc -> Security -> AllowNvramReset -> True\n * Misc -> Boot -> LauncherOption -> Disabled\n\nOnce these are set, you can reboot into the OpenCore picker and select the Reset NVRAM entry to clear your NVRAM, which will remove the LauncherOption entry too..\n\n\n# Updating Bootstrap in 0.6.6\n\nFor those updating to 0.6.6, you may have noticed Bootstrap.efi has been removed from OpenCore. This is due to changes with how OpenCore works; specifically OpenCore is now a UEFI application instead of a driver. This means OpenCore.efi can be loaded directly and a launcher (Bootstrap.efi) is no longer needed.\n\n\n# With Bootstrap disabled\n\nIf Bootstrap is disabled prior to updating to 0.6.6, you don't need to make any changes, just the usual file swapping. If afterwards you would like to try LauncherOption, you can do so with no issues.\n\n\n# With Bootstrap enabled\n\nIf Bootstrap is enabled prior to updating to 0.6.6, and your motherboard's firmware will autodetect EFI/BOOT/BOOTx64.efi, you can do the following before you update:\n\n 1. Set Misc -> Security -> AllowNvramReset to True and Misc -> Security -> BootProtect to None, then reset NVRAM (either outside of or in OpenCore) and boot. This will get rid of the old Bootstrap boot entry.\n\n 2. Update your OpenCore setup as normal, ensuring that you copy BOOTx64.efi from the OpenCore package to EFI/BOOT/BOOTx64.efi and set Misc -> Boot -> LauncherOption in your config.plist to Full (or Short if previously using BootstrapShort).\n\n 3. Reboot.\n    \n    On first boot you will need to boot from EFI/BOOT/BOOTx64.efi, but on subsequent boots you should see the LauncherOption entry created by OpenCore directly booting OpenCore.efi.\n\nIf your firmware does not automatically detect EFI/BOOT/BOOTx64.efi or you cannot put OpenCore's launcher there for any reason, you have multiple other options:\n\n * Put OpenShell.efi on a USB, rename and move to EFI/BOOT/BOOTx64.efi, and follow the above steps, except instead of selecting BOOTx64.efi from the boot menu, boot into the USB and launch OpenCore from there directly.\n * Add a folder EFI/OC/Bootstrap and copy and rename BOOTx64.efi from the OpenCore package to EFI/OC/Bootstrap/Bootstrap.efi. Then, after updating your OpenCore setup, set Misc -> Boot -> LauncherOption to the appropriate option (Full, or Short if previously using BootstrapShort) and boot OpenCore using the existing entry create by Bootstrap. After your first boot, you should see a new OpenCore boot entry added. You can then reset NVRAM in OpenCore (making sure to keep LauncherOption enabled so you don't delete the new entry) to get rid of the old Bootstrap boot entry.\n\nConversion notes:\n\n0.5.8 - 0.6.5                     0.6.6+\nMisc -> Security -> BootProtect   Misc -> Boot -> LauncherOption\nBootstrap                         Full\nBootstrapShort                    Short",normalizedContent:"# using launcheroption\n\n * note: with opencore 0.6.6, bootstrap.efi has been replaced with launcheroption. see here for more info on updating: updating bootstrap in 0.6.6\n\nwith opencore 0.6.6 and newer, we are now able to launch opencore directly from our firmwares without needing a launcher (bootstrap.efi or bootx64.efi) as an intermediary. this allows us to add opencore to our motherboard's boot menu and prevent issues where either windows or linux try to overwrite the efi/boot/bootx64.efi path, which can happen when installing or updating windows and therefore breaking opencore's ability to boot.\n\n\n# prerequisites\n\n\n\n * opencore 0.6.6 or newer\n   * for 0.6.5 and older users upgrading, see here: updating bootstrap in 0.6.6\n * config.plist settings:\n   * misc -> boot -> launcheroption = full\n     * use short for insyde based firmwares, commonly found on laptops\n   * uefi -> quirks -> requestbootvarrouting = true\n * openshell\n   * bundled with opencore\n   * remember to add this to both efi/oc/tools and misc -> tools\n   * this is mainly for troubleshooting\n\n\n# booting\n\nif everything is set up correctly, the first boot will have opencore create a new boot option in our bios (pointing to efi/oc/opencore.efi) and future boots will update the entry making sure it's correct and ensuring it is still present. this now allows us to remove bootx64.efi and not worry about other oses overwriting the efi/boot/bootx64.efi path.\n\n\n# troubleshooting\n\nif no new boot option is created, you can follow these troubleshooting steps but first double-check the prerequisites were met. the following sections are a mini-guide in case launcheroption doesn't work or you'd like to do it manually.\n\n * verify launcheroption entry was applied\n * removing launcheroption entry from bios\n\n\n# verify launcheroption entry was applied\n\nfor those wanting to verify that the entry was applied in opencore, enable logging (see opencore debugging) and check for entries similar to these:\n\nocb: have existing option 1, valid 1\nocb: boot order has first option as the default option\n\n\n\n# removing launcheroption entry from bios\n\nbecause the launcheroption entry is a protected entry when resetting nvram, you'll need to disable launcheroption first before you can remove it:\n\n * misc -> security -> allownvramreset -> true\n * misc -> boot -> launcheroption -> disabled\n\nonce these are set, you can reboot into the opencore picker and select the reset nvram entry to clear your nvram, which will remove the launcheroption entry too..\n\n\n# updating bootstrap in 0.6.6\n\nfor those updating to 0.6.6, you may have noticed bootstrap.efi has been removed from opencore. this is due to changes with how opencore works; specifically opencore is now a uefi application instead of a driver. this means opencore.efi can be loaded directly and a launcher (bootstrap.efi) is no longer needed.\n\n\n# with bootstrap disabled\n\nif bootstrap is disabled prior to updating to 0.6.6, you don't need to make any changes, just the usual file swapping. if afterwards you would like to try launcheroption, you can do so with no issues.\n\n\n# with bootstrap enabled\n\nif bootstrap is enabled prior to updating to 0.6.6, and your motherboard's firmware will autodetect efi/boot/bootx64.efi, you can do the following before you update:\n\n 1. set misc -> security -> allownvramreset to true and misc -> security -> bootprotect to none, then reset nvram (either outside of or in opencore) and boot. this will get rid of the old bootstrap boot entry.\n\n 2. update your opencore setup as normal, ensuring that you copy bootx64.efi from the opencore package to efi/boot/bootx64.efi and set misc -> boot -> launcheroption in your config.plist to full (or short if previously using bootstrapshort).\n\n 3. reboot.\n    \n    on first boot you will need to boot from efi/boot/bootx64.efi, but on subsequent boots you should see the launcheroption entry created by opencore directly booting opencore.efi.\n\nif your firmware does not automatically detect efi/boot/bootx64.efi or you cannot put opencore's launcher there for any reason, you have multiple other options:\n\n * put openshell.efi on a usb, rename and move to efi/boot/bootx64.efi, and follow the above steps, except instead of selecting bootx64.efi from the boot menu, boot into the usb and launch opencore from there directly.\n * add a folder efi/oc/bootstrap and copy and rename bootx64.efi from the opencore package to efi/oc/bootstrap/bootstrap.efi. then, after updating your opencore setup, set misc -> boot -> launcheroption to the appropriate option (full, or short if previously using bootstrapshort) and boot opencore using the existing entry create by bootstrap. after your first boot, you should see a new opencore boot entry added. you can then reset nvram in opencore (making sure to keep launcheroption enabled so you don't delete the new entry) to get rid of the old bootstrap boot entry.\n\nconversion notes:\n\n0.5.8 - 0.6.5                     0.6.6+\nmisc -> security -> bootprotect   misc -> boot -> launcheroption\nbootstrap                         full\nbootstrapshort                    short",charsets:{}},{title:"修复AppleALC的音频",frontmatter:{},regularPath:"/universal/audio.html",relativePath:"universal/audio.md",key:"v-561f93b3",path:"/universal/audio.html",headers:[{level:2,title:"找到你的 layout ID",slug:"找到你的-layout-id",normalizedTitle:"找到你的 layout id",charIndex:241},{level:2,title:"测试你的布局",slug:"测试你的布局",normalizedTitle:"测试你的布局",charIndex:908},{level:2,title:"使 Layout ID 更永久",slug:"使-layout-id-更永久",normalizedTitle:"使 layout id 更永久",charIndex:1220},{level:2,title:"各种各样的问题",slug:"各种各样的问题",normalizedTitle:"各种各样的问题",charIndex:2008},{level:3,title:"AMD上没有麦克风",slug:"amd上没有麦克风",normalizedTitle:"amd上没有麦克风",charIndex:2020},{level:3,title:"来自Clover的相同布局ID在OpenCore上不起作用",slug:"来自clover的相同布局id在opencore上不起作用",normalizedTitle:"来自clover的相同布局id在opencore上不起作用",charIndex:2159},{level:3,title:"10.15中电源状态改变时的内核崩溃",slug:"_10-15中电源状态改变时的内核崩溃",normalizedTitle:"10.15中电源状态改变时的内核崩溃",charIndex:2353},{level:2,title:"故障诊断",slug:"故障诊断",normalizedTitle:"故障诊断",charIndex:2478},{level:3,title:"检查是否有正确的kext",slug:"检查是否有正确的kext",normalizedTitle:"检查是否有正确的kext",charIndex:2637},{level:3,title:"检查AppleALC是否正确打补丁",slug:"检查applealc是否正确打补丁",normalizedTitle:"检查applealc是否正确打补丁",charIndex:3415},{level:3,title:"检查AppleHDA是否正常",slug:"检查applehda是否正常",normalizedTitle:"检查applehda是否正常",charIndex:4170},{level:3,title:"AppleALC工作不一致",slug:"applealc工作不一致",normalizedTitle:"applealc工作不一致",charIndex:2569},{level:3,title:"AppleALC不能正确处理多个声卡",slug:"applealc不能正确处理多个声卡",normalizedTitle:"applealc不能正确处理多个声卡",charIndex:4667},{level:3,title:"重启Windows后AppleALC无法正常工作",slug:"重启windows后applealc无法正常工作",normalizedTitle:"重启windows后applealc无法正常工作",charIndex:5592}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"找到你的 layout ID 测试你的布局 使 Layout ID 更永久 各种各样的问题 AMD上没有麦克风 来自Clover的相同布局ID在OpenCore上不起作用 10.15中电源状态改变时的内核崩溃 故障诊断 检查是否有正确的kext 检查AppleALC是否正确打补丁 检查AppleHDA是否正常 AppleALC工作不一致 AppleALC不能正确处理多个声卡 重启Windows后AppleALC无法正常工作",content:"# 修复AppleALC的音频\n\n首先，我们假设你已经安装了Lilu和AppleALC，如果你不确定它们是否被正确加载，你可以在终端中运行以下命令(这也会检查AppleHDA是否被加载，因为没有这个AppleALC就没有什么可以打补丁):\n\nkextstat | grep -E \"AppleHDA|AppleALC|Lilu\"\n\n\n如果3个都出现了，你就可以开始了。并确保VoodooHDA 不存在。否则这将与AppleALC冲突。\n\n如果您遇到问题，请参阅故障排除部分\n\n\n# 找到你的 layout ID\n\n在这个例子中，我们假设你的编解码器是ALC1220。要验证你的选择，你有两个选择:\n\n * 检查主板规格页和说明书\n * 检查Windows中的设备管理器\n * 在Windows中检查HWInfo64\n   * 打开时，请确保取消选择“仅限摘要”和“仅限传感器”\n * 在Windows中检查AIDA64 Extreme\n * 在Linux终端中运行cat\n   * cat /proc/asound/card0/codec#0 | less\n\n现在有了编解码器，我们需要将它与AppleALC支持的编解码器列表进行交叉引用:\n\n * AppleALC支持的编解码器\n\n使用ALC1220，我们得到以下结果:\n\n0x100003, layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34\n\n\n所以从这它告诉我们两件事:\n\n * 支持哪个硬件版本(0x100003)，仅当以不同布局列出多个版本时相关\n * 编解码器支持的各种布局id(layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34)\n\n现在有了一个受支持的布局id列表，我们准备进行一些尝试\n\n注意:如果你的音频编解码器是ALC 3XXX，这很可能是错误的，只是重新命名的控制器，请进行研究，看看实际的控制器是什么。\n\n * 一个这样的例子是ALC3601，但是当我们加载Linux时，真实的名称显示为:ALC 671\n\n\n# 测试你的布局\n\n为了测试我们的布局id，我们将使用引导参数alcid=xxx，其中xxx是你的布局。请记住，一次只尝试一个布局id。不要添加多个ID或alcid在boot-args中, 如果一个不工作，然后尝试下一个ID等\n\nconfig.plist\n├── NVRAM\n  ├── Add\n    ├── 7C436110-AB2A-4BBB-A880-FE41995C9F82\n          ├── boot-args | String | alcid=11\n\n\n如果没有布局ID工作，尝试为您的系统创建 SSDT-HPET fixes 这些在笔记本电脑和一些台式机上是必需的，以便AppleHDA工作。\n\n\n# 使 Layout ID 更永久\n\n一旦你找到了一个与你的黑苹果有效的布局ID，我们可以创建一个更永久的解决方案，更接近真实的mac如何设置他们的布局ID。\n\n在AppleALC中，有一个优先级层次结构来区分属性的优先级:\n\n 1. alcid=xxx 引导参数，用于调试和覆盖所有其他值\n 2. alc-layout-id 中的' alc-layout-id '， 只能在苹果硬件上使用\n 3. layout-id 中的' layout-id '， 应该在苹果和非苹果硬件上使用\n\n首先，我们需要找到音频控制器在PCI地图上的位置。为此，我们将使用一个名为 gfxutil 的方便工具，然后与macOS终端一起使用:\n\npath/to/gfxutil -f HDEF\n\n\n\n\n然后将这个带有子元素layout-id的PciRoot添加到配置中。\n\n\n\n注意AppleALC可以接受十进制/Number和十六进制/Data，通常最好的方法是十六进制，因为你可以避免任何不必要的转换。你可以使用一个简单的十进制到十六进制计算器 来找到你的答案。 printf '%x\\n' DECI_VAL:\n\n\n\n所以在这个例子中，alcid=11会变成:\n\n * layout-id | Data | <0B000000>\n * layout-id | Number | <11>\n\n请注意，最终的十六进制/数据值总共应该是4个字节。0B 00 00 00)，对于超过255的布局id (FF 00 00 00)需要记住字节是交换的。所以256会变成00 01 00 00\n\n * 使用Decimal/Number方法可以完全忽略十六进制交换和数据大小\n\n提醒:你必须删除引导参数，因为它总是优先级最高的，所以AppleALC会忽略所有其他条目，比如DeviceProperties\n\n\n# 各种各样的问题\n\n\n# AMD上没有麦克风\n\n * 这是AMD运行AppleALC时常见的问题，特别是没有补丁来支持Mic输入。目前“最好”的解决方案是购买USB DAC/Mic或使用VoodooHDA.kext方法。众所周知，VoodooHDA的问题是不稳定，音频质量比AppleALC更差\n\n\n# 来自Clover的相同布局ID在OpenCore上不起作用\n\n这可能会对IRQ冲突造成影响，在Clover上有一整套自动应用的ACPI热补丁。修复这个有点痛苦，但SSDTTime的 FixHPET 选项可以处理大多数情况。\n\n对于RTC和HPET从USB和音频等其他设备获取irq的奇怪情况，您可以参考trashOS仓库中的HP Compaq DC7900 ACPI 补丁 示例\n\n\n# 10.15中电源状态改变时的内核崩溃\n\n * 在config.plist中启用 PowerTimeoutKernelPanic\n   * Kernel -> Quirks -> PowerTimeoutKernelPanic -> True\n\n\n# 故障诊断\n\n对于故障诊断,我们需要复习几件事:\n\n * 检查你是否有正确的kexts\n * 检查AppleALC是否打补丁正确\n * 检查AppleHDA是否为vanilla\n * AppleALC工作不一致\n * AppleALC不能正确地使用多个声卡\n * AppleALC在Windows重启后不能工作\n\n\n# 检查是否有正确的kext\n\n首先，我们假设你已经安装了Lilu和AppleALC，如果你不确定它们是否被正确加载，你可以在终端中运行以下命令(这也会检查AppleHDA是否被加载，因为没有这个AppleALC就没有什么可以打补丁):\n\nkextstat | grep -E \"AppleHDA|AppleALC|Lilu\"\n\n\n如果3个都出现了，你就可以开始了。确保VoodooHDA 不存在。否则这将与AppleALC冲突。确保系统中没有的其他kext:\n\n * RealtekALC.kext\n * CloverALC.kext\n * VoodooHDA.kext\n * HDA Blocker.kext\n * HDAEnabler#.kext(# 可以是1、2或3)\n\n> 嘿，Lilu和/或AppleALC没有出现\n\n一般来说，最好的开始是通过查看你的OpenCore日志，看看Lilu和AppleALC是否正确注入:\n\n14:354 00:020 OC: Prelink injection Lilu.kext () - Success\n14:367 00:012 OC: Prelink injection AppleALC.kext () - Success\n\n\n如果它说注入失败:\n\n15:448 00:007 OC: Prelink injection AppleALC.kext () - Invalid Parameter\n\n\n你可以查看的主要地方是:\n\n * 注入顺序:确保Lilu在kext顺序上高于AppleALC\n * 所有的kext都是最新版本:对于Lilu插件尤其重要，因为不匹配的kext可能会导致问题\n\nNote: To setup file logging, see OpenCore Debugging.\n\n\n# 检查AppleALC是否正确打补丁\n\n所以对于AppleALC，检查补丁是否正确的最简单的事情之一是检查你的音频控制器是否被正确重命名。获取 IORegistryExplorer ，看看你是否有一个HDEF设备:\n\n\n\n正如你从上面的图像中看到的，我们有以下几点:\n\n * HDEF Device意味着我们的重命名完成了这项工作\n * AppleHDAController连接意味着Apple的音频kext连接成功\n * alc-layout-id是一个属性，表明我们的boot-arg/DeviceProperty注入成功\n   * 注意:layout-id | Data | 07000000是默认布局，alc-layout-id将覆盖它并成为AppleHDA使用的布局\n\n注意:不要手动重命名你的音频控制器，这可能会导致问题，因为AppleALC正在尝试打补丁。让AppleALC做它的工作。\n\nMore examples:\n\nCORRECT LAYOUT-ID   INCORRECT LAYOUT-ID\n                    \n\nAs you can see from the above 2, the right image is missing a lot of AppleHDAInput devices, meaning that AppleALC can't match up your physical ports to something it can understand and output to. This means you've got some work to find the right layout ID for your system.\n\n\n# 检查AppleHDA是否正常\n\n本节主要针对那些用定制AppleHDA替换了库里AppleHDA的人，这将验证你的AppleHDA是否为正品:\n\nsudo kextcache -i / && sudo kextcache -u /\n\n\n这将检查签名对AppleHDA是否有效，如果无效，则需要为你的系统获取AppleHDA的原始副本并替换它，或者更新macOS(更新时kext将被清除)。只有手动打过补丁的AppleHDA才会出现这种情况，所以如果是新安装，你的签名不太可能出现问题。\n\n\n# AppleALC工作不一致\n\n有时会出现一些罕见的情况，比如你的硬件没有及时初始化AppleHDAController，从而导致没有声音输出。要解决这个问题，你可以:\n\n在boot-args中指定延迟:\n\nalcdelay=1000\n\n\n或通过DeviceProperties(在你的HDEF设备中)指定:\n\nalc-delay | Number | 1000\n\n\n上面的引导参数/属性将使AppleHDAController延迟1000 ms(1秒)，注意ALC延迟不能超过3000 ms\n\n\n# AppleALC不能正确处理多个声卡\n\n在极少数情况下，你有2个声卡(例如内置Realtek和一个外部PCIe卡)，你可能想要避免使用你不使用或不需要补丁的AppleALC补丁设备(如本机PCIe卡)。如果你发现当外部音频控制器存在时，AppleALC不会给你的板载音频控制器打补丁，这一点尤其重要。\n\n为了解决这个问题，我们首先需要确定我们的音频控制器的位置。最简单的方法是运行 gfxutil并搜索PCI id:\n\n/path/to/gfxutil\n\n\n现在有了这个大输出，你需要找到你的PciRoot路径，例如，让我们使用创造性的Sound-Blaster AE-9PE PCIe声卡。为此，我们知道PCI ID是1102:0010。因此，查看我们的gfxutil输出，我们得到以下结果:\n\n66:00.0 1102:0010 /PC02@0/BR2A@0/SL05@0 = PciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n从这里，我们可以清楚地看到我们的PciRoot路径是:\n\nPciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n * 注意:这将假设您知道外部声卡的供应商和设备ID。作为参考，这些是常见的供应商id:\n   * Creative Labs: 1102\n   * AsusTek: 1043\n * 注意2:您的ACPI和PciRoot路径看起来不同，因此请注意您的 gfxutil输出\n\n现在我们有了我们的PciRoot路径，我们终于可以打开config.plist并添加我们的补丁。\n\n在DeviceProperties -> Add下，您将添加您的PciRoot(作为一个字典)与名为external-audio的子进程:\n\nDeviceProperties\n| --- > Add\n | --- > PciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)\n  | ----\x3e external-audio | Data | 01\n\n\n\n\n完成这些后，你可以重新启动，AppleALC现在应该会忽略你的外部音频控制器!\n\n\n# 重启Windows后AppleALC无法正常工作\n\n如果你发现从Windows重新启动到macOS中断了音频，我们建议在boot-args中添加alctcsel=1，或者在DeviceProperties中将此属性添加到你的音频设备:\n\nDeviceProperties\n| --- > Add\n | --- > PciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)(Adjust to your device)\n  | ----\x3e alctcsel | Data | 01000000\n",normalizedContent:"# 修复applealc的音频\n\n首先，我们假设你已经安装了lilu和applealc，如果你不确定它们是否被正确加载，你可以在终端中运行以下命令(这也会检查applehda是否被加载，因为没有这个applealc就没有什么可以打补丁):\n\nkextstat | grep -e \"applehda|applealc|lilu\"\n\n\n如果3个都出现了，你就可以开始了。并确保voodoohda 不存在。否则这将与applealc冲突。\n\n如果您遇到问题，请参阅故障排除部分\n\n\n# 找到你的 layout id\n\n在这个例子中，我们假设你的编解码器是alc1220。要验证你的选择，你有两个选择:\n\n * 检查主板规格页和说明书\n * 检查windows中的设备管理器\n * 在windows中检查hwinfo64\n   * 打开时，请确保取消选择“仅限摘要”和“仅限传感器”\n * 在windows中检查aida64 extreme\n * 在linux终端中运行cat\n   * cat /proc/asound/card0/codec#0 | less\n\n现在有了编解码器，我们需要将它与applealc支持的编解码器列表进行交叉引用:\n\n * applealc支持的编解码器\n\n使用alc1220，我们得到以下结果:\n\n0x100003, layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34\n\n\n所以从这它告诉我们两件事:\n\n * 支持哪个硬件版本(0x100003)，仅当以不同布局列出多个版本时相关\n * 编解码器支持的各种布局id(layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34)\n\n现在有了一个受支持的布局id列表，我们准备进行一些尝试\n\n注意:如果你的音频编解码器是alc 3xxx，这很可能是错误的，只是重新命名的控制器，请进行研究，看看实际的控制器是什么。\n\n * 一个这样的例子是alc3601，但是当我们加载linux时，真实的名称显示为:alc 671\n\n\n# 测试你的布局\n\n为了测试我们的布局id，我们将使用引导参数alcid=xxx，其中xxx是你的布局。请记住，一次只尝试一个布局id。不要添加多个id或alcid在boot-args中, 如果一个不工作，然后尝试下一个id等\n\nconfig.plist\n├── nvram\n  ├── add\n    ├── 7c436110-ab2a-4bbb-a880-fe41995c9f82\n          ├── boot-args | string | alcid=11\n\n\n如果没有布局id工作，尝试为您的系统创建 ssdt-hpet fixes 这些在笔记本电脑和一些台式机上是必需的，以便applehda工作。\n\n\n# 使 layout id 更永久\n\n一旦你找到了一个与你的黑苹果有效的布局id，我们可以创建一个更永久的解决方案，更接近真实的mac如何设置他们的布局id。\n\n在applealc中，有一个优先级层次结构来区分属性的优先级:\n\n 1. alcid=xxx 引导参数，用于调试和覆盖所有其他值\n 2. alc-layout-id 中的' alc-layout-id '， 只能在苹果硬件上使用\n 3. layout-id 中的' layout-id '， 应该在苹果和非苹果硬件上使用\n\n首先，我们需要找到音频控制器在pci地图上的位置。为此，我们将使用一个名为 gfxutil 的方便工具，然后与macos终端一起使用:\n\npath/to/gfxutil -f hdef\n\n\n\n\n然后将这个带有子元素layout-id的pciroot添加到配置中。\n\n\n\n注意applealc可以接受十进制/number和十六进制/data，通常最好的方法是十六进制，因为你可以避免任何不必要的转换。你可以使用一个简单的十进制到十六进制计算器 来找到你的答案。 printf '%x\\n' deci_val:\n\n\n\n所以在这个例子中，alcid=11会变成:\n\n * layout-id | data | <0b000000>\n * layout-id | number | <11>\n\n请注意，最终的十六进制/数据值总共应该是4个字节。0b 00 00 00)，对于超过255的布局id (ff 00 00 00)需要记住字节是交换的。所以256会变成00 01 00 00\n\n * 使用decimal/number方法可以完全忽略十六进制交换和数据大小\n\n提醒:你必须删除引导参数，因为它总是优先级最高的，所以applealc会忽略所有其他条目，比如deviceproperties\n\n\n# 各种各样的问题\n\n\n# amd上没有麦克风\n\n * 这是amd运行applealc时常见的问题，特别是没有补丁来支持mic输入。目前“最好”的解决方案是购买usb dac/mic或使用voodoohda.kext方法。众所周知，voodoohda的问题是不稳定，音频质量比applealc更差\n\n\n# 来自clover的相同布局id在opencore上不起作用\n\n这可能会对irq冲突造成影响，在clover上有一整套自动应用的acpi热补丁。修复这个有点痛苦，但ssdttime的 fixhpet 选项可以处理大多数情况。\n\n对于rtc和hpet从usb和音频等其他设备获取irq的奇怪情况，您可以参考trashos仓库中的hp compaq dc7900 acpi 补丁 示例\n\n\n# 10.15中电源状态改变时的内核崩溃\n\n * 在config.plist中启用 powertimeoutkernelpanic\n   * kernel -> quirks -> powertimeoutkernelpanic -> true\n\n\n# 故障诊断\n\n对于故障诊断,我们需要复习几件事:\n\n * 检查你是否有正确的kexts\n * 检查applealc是否打补丁正确\n * 检查applehda是否为vanilla\n * applealc工作不一致\n * applealc不能正确地使用多个声卡\n * applealc在windows重启后不能工作\n\n\n# 检查是否有正确的kext\n\n首先，我们假设你已经安装了lilu和applealc，如果你不确定它们是否被正确加载，你可以在终端中运行以下命令(这也会检查applehda是否被加载，因为没有这个applealc就没有什么可以打补丁):\n\nkextstat | grep -e \"applehda|applealc|lilu\"\n\n\n如果3个都出现了，你就可以开始了。确保voodoohda 不存在。否则这将与applealc冲突。确保系统中没有的其他kext:\n\n * realtekalc.kext\n * cloveralc.kext\n * voodoohda.kext\n * hda blocker.kext\n * hdaenabler#.kext(# 可以是1、2或3)\n\n> 嘿，lilu和/或applealc没有出现\n\n一般来说，最好的开始是通过查看你的opencore日志，看看lilu和applealc是否正确注入:\n\n14:354 00:020 oc: prelink injection lilu.kext () - success\n14:367 00:012 oc: prelink injection applealc.kext () - success\n\n\n如果它说注入失败:\n\n15:448 00:007 oc: prelink injection applealc.kext () - invalid parameter\n\n\n你可以查看的主要地方是:\n\n * 注入顺序:确保lilu在kext顺序上高于applealc\n * 所有的kext都是最新版本:对于lilu插件尤其重要，因为不匹配的kext可能会导致问题\n\nnote: to setup file logging, see opencore debugging.\n\n\n# 检查applealc是否正确打补丁\n\n所以对于applealc，检查补丁是否正确的最简单的事情之一是检查你的音频控制器是否被正确重命名。获取 ioregistryexplorer ，看看你是否有一个hdef设备:\n\n\n\n正如你从上面的图像中看到的，我们有以下几点:\n\n * hdef device意味着我们的重命名完成了这项工作\n * applehdacontroller连接意味着apple的音频kext连接成功\n * alc-layout-id是一个属性，表明我们的boot-arg/deviceproperty注入成功\n   * 注意:layout-id | data | 07000000是默认布局，alc-layout-id将覆盖它并成为applehda使用的布局\n\n注意:不要手动重命名你的音频控制器，这可能会导致问题，因为applealc正在尝试打补丁。让applealc做它的工作。\n\nmore examples:\n\ncorrect layout-id   incorrect layout-id\n                    \n\nas you can see from the above 2, the right image is missing a lot of applehdainput devices, meaning that applealc can't match up your physical ports to something it can understand and output to. this means you've got some work to find the right layout id for your system.\n\n\n# 检查applehda是否正常\n\n本节主要针对那些用定制applehda替换了库里applehda的人，这将验证你的applehda是否为正品:\n\nsudo kextcache -i / && sudo kextcache -u /\n\n\n这将检查签名对applehda是否有效，如果无效，则需要为你的系统获取applehda的原始副本并替换它，或者更新macos(更新时kext将被清除)。只有手动打过补丁的applehda才会出现这种情况，所以如果是新安装，你的签名不太可能出现问题。\n\n\n# applealc工作不一致\n\n有时会出现一些罕见的情况，比如你的硬件没有及时初始化applehdacontroller，从而导致没有声音输出。要解决这个问题，你可以:\n\n在boot-args中指定延迟:\n\nalcdelay=1000\n\n\n或通过deviceproperties(在你的hdef设备中)指定:\n\nalc-delay | number | 1000\n\n\n上面的引导参数/属性将使applehdacontroller延迟1000 ms(1秒)，注意alc延迟不能超过3000 ms\n\n\n# applealc不能正确处理多个声卡\n\n在极少数情况下，你有2个声卡(例如内置realtek和一个外部pcie卡)，你可能想要避免使用你不使用或不需要补丁的applealc补丁设备(如本机pcie卡)。如果你发现当外部音频控制器存在时，applealc不会给你的板载音频控制器打补丁，这一点尤其重要。\n\n为了解决这个问题，我们首先需要确定我们的音频控制器的位置。最简单的方法是运行 gfxutil并搜索pci id:\n\n/path/to/gfxutil\n\n\n现在有了这个大输出，你需要找到你的pciroot路径，例如，让我们使用创造性的sound-blaster ae-9pe pcie声卡。为此，我们知道pci id是1102:0010。因此，查看我们的gfxutil输出，我们得到以下结果:\n\n66:00.0 1102:0010 /pc02@0/br2a@0/sl05@0 = pciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n从这里，我们可以清楚地看到我们的pciroot路径是:\n\npciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n * 注意:这将假设您知道外部声卡的供应商和设备id。作为参考，这些是常见的供应商id:\n   * creative labs: 1102\n   * asustek: 1043\n * 注意2:您的acpi和pciroot路径看起来不同，因此请注意您的 gfxutil输出\n\n现在我们有了我们的pciroot路径，我们终于可以打开config.plist并添加我们的补丁。\n\n在deviceproperties -> add下，您将添加您的pciroot(作为一个字典)与名为external-audio的子进程:\n\ndeviceproperties\n| --- > add\n | --- > pciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)\n  | ----\x3e external-audio | data | 01\n\n\n\n\n完成这些后，你可以重新启动，applealc现在应该会忽略你的外部音频控制器!\n\n\n# 重启windows后applealc无法正常工作\n\n如果你发现从windows重新启动到macos中断了音频，我们建议在boot-args中添加alctcsel=1，或者在deviceproperties中将此属性添加到你的音频设备:\n\ndeviceproperties\n| --- > add\n | --- > pciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)(adjust to your device)\n  | ----\x3e alctcsel | data | 01000000\n",charsets:{cjk:!0}},{title:"修复DRM支持和iGPU性能",frontmatter:{},regularPath:"/universal/drm.html",relativePath:"universal/drm.md",key:"v-74fe7b93",path:"/universal/drm.html",headers:[{level:2,title:"测试硬件加速和解码",slug:"测试硬件加速和解码",normalizedTitle:"测试硬件加速和解码",charIndex:446},{level:2,title:"测试DRM",slug:"测试drm",normalizedTitle:"测试drm",charIndex:1766},{level:2,title:"修复DRM",slug:"修复drm",normalizedTitle:"修复drm",charIndex:2}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"测试硬件加速和解码 测试DRM 修复DRM",content:'# 修复DRM支持和iGPU性能\n\n * 注意:Safari 14和macOS 11, Big Sur目前不受WhateverGreen的DRM补丁支持。不过，在卡特琳娜及更老版本的Safari 13支持得还不错。\n * 注2:浏览器不使用基于硬件的DRM (ie Mozilla Firefox或基于Chrome的浏览器，如谷歌Chrome和Microsoft Edge)将有工作的DRM，而无需在igpu和dgpu上进行任何工作。以下指南是使用基于硬件的DRM Safari和其他应用程序。\n\n关于DRM，我们有几点需要提一下:\n\n * DRM需要支持的dGPU\n   * 有关支持的卡，请参阅GPU购买者指南\n * 仅igpu系统的DRM损坏\n   * 这个问题可以在10.12.2之前用Shiki(现在的WhateverGreen)修复，但在10.12.3时被破坏了\n   * 这是由于我们的igpu不支持苹果的固件，我们的管理引擎 没有苹果的证书\n * 工作硬件加速和解码\n\n\n# 测试硬件加速和解码\n\n因此，在我们开始修复DRM之前，我们需要确保您的硬件是工作的。最好的检查方法是运行 VDADecoderChecker:\n\n\n\n如果你在这一点上失败了，你可以检查以下几点:\n\n * 确保您的硬件支持\n   * 参见GPU购买指南\n * 确保你正在运行的SMBIOS与你的硬件匹配\n   * 例如，不要在台式机上使用Mac Mini SMBIOS，因为Mac Mini运行的是移动硬件，所以macOS也会有同样的要求\n * 确保iGPU在BIOS中是启用的，并且具有正确的设置属性(AAPL,ig-platform-id，如果需要，device-id)\n   * 您可以查看指南中的DeviceProperties部分或WhateverGreen的手册\n * 避免不必要的ACPI重命名，所有重要的重命名都由WhateverGreen处理\n   * change GFX0 to IGPU\n   * change PEG0 to GFX0\n   * change HECI to IMEI\n   * 等\n * 确保Lilu和WhateverGreen已加载\n   * 确保没有任何遗留的图形补丁，因为它们已经被合并到WhateverGreen中:\n     * IntelGraphicsFixup.kext\n     * NvidiaGraphicsFixup.kext\n     * Shiki.kext\n\n检查Lilu和WhateverGreen是否正确加载:\n\nkextstat | grep -E "Lilu|WhateverGreen"\n\n\n> 这些kext中的一个或多个没有出现\n\n一般来说，最好的开始是通过查看你的OpenCore日志，看看Lilu和WhateverGreen是否正确注入:\n\n14:354 00:020 OC: Prelink injection Lilu.kext () - Success\n14:367 00:012 OC: Prelink injection WhateverGreen.kext () - Success\n\n\n如果它说注射失败:\n\n15:448 00:007 OC: Prelink injection WhateverGreen.kext () - Invalid Parameter\n\n\n你可以查看的主要地方是:\n\n * 注射顺序:确保Lilu在WhateverGreen上面\n * 所有的kext都是最新版本:对于Lilu插件尤其重要，因为不匹配的kext可能会导致问题\n\n注意:要设置文件日志，请参阅 OpenCore 调试.\n\n注:在macOS 10.15及更新版本上，AppleGVA调试默认是关闭的，如果你在运行VDADecoderChecker时得到一个通用错误，你可以使用以下命令打开调试:\n\ndefaults write com.apple.AppleGVA enableSyslog -boolean true\n\n\n并撤销此操作:\n\ndefaults delete com.apple.AppleGVA enableSyslog\n\n\n\n# 测试DRM\n\n因此，在我们深入讨论之前，我们需要回顾一些事情，主要是你将在现实中看到的DRM类型:\n\nFairPlay 1.x: 基于软件的DRM，可以更好地支持legacy mac\n\n * 最简单的测试方法是播放iTunes电影: FairPlay 1.x test\n   * FairPlay 1.x预告片将在任何配置上工作，如果WhateverGreen被正确设置-包括只有igpu的配置。然而，FairPlay 1.x 电影将只在仅支持igpu的配置上播放大约3-5秒，之后会误以为HDCP不支持。\n\nFairPlay 2.x/3.x: 基于硬件的DRM，可以在Netflix、Amazon Prime中找到\n\n * 有几个方法测试:\n   * 在Netflix或Amazon Prime上播放节目\n   * 播放 Amazon Prime 预告片: 蜘蛛侠: 英雄远征\n     * 预告片本身并不使用DRM，但亚马逊仍然会在播放前进行检查\n * 注意:需要更新的AMD GPU才能工作(Polaris+)\n\nFairPlay 4.x: 混合DRM，在AppleTV+上找到\n\n * 您可以打开TV.app，选择TV+ ->免费Apple TV+首映，然后点击任何一集进行测试，无需任何试用(您需要一个iCloud帐户)\n * 如果你想使用Apple TV+，也可以免费试用\n * 注意:需要没有iGPU (Xeon)或更新的AMD GPU工作(Polaris+)\n   * 当iGPU不存在时，可以强制FairPlay 1.x\n\n如果在这些测试中一切正常，则无需继续!否则,继续。\n\n\n# 修复DRM\n\n因此，要修复DRM，我们主要可以走一条路:为DRM打补丁，使用软件或AMD解码。Vit为不同的硬件配置制作了一个很棒的小图表:\n\n * WhateverGreen的DRM图标\n\n那么如何使用它呢?首先，确定你在图表中有什么配置(AMD代表GPU，而不是CPU)。列出的SMBIOS (IM = iMac, MM = Mac Mini, IMP = iMac Pro, MP = Mac Pro)是你应该使用的，如果你匹配硬件配置。如果你没有匹配图表中的任何配置，你就不走运了。\n\n接下来，确定你需要使用什么Shiki模式。如果您的设置有两种配置，它们将在使用的Shiki标志上有所不同。通常，硬件解码比软件解码更重要。如果mode列为空，则操作完成。否则，你应该使用DeviceProperties > add将shikigva作为属性添加到任何GPU。例如，如果我们需要使用的模式是shikigva=80:\n\n\n\n你也可以使用启动参数——它位于mode列中。\n\n这里有一个例子。如果我们有一个Intel i9-9900K和一个RX 560，配置将是“AMD+IGPU”，我们应该使用iMac或Mac Mini SMBIOS(对于这个特定的配置，iMac19,1)。然后我们看到配置有两个选项:一个是模式为shikigva=16，另一个是shikigva=80。我们在“Prime预告片”和“Prime/Netflix”中看到了区别。我们希望Netflix能正常工作，所以我们选择shikigva=80选项。然后将类型为数字/整数和值为80的shikigva注入到我们的iGPU或dGPU中，重新启动，DRM应该可以工作了。\n\n这是另一个例子。这次，我们有一个Ryzen 3700X和一个RX 480。在这种情况下，我们的配置只有“AMD”，我们应该使用iMac Pro或Mac Pro SMBIOS。同样，有两个选项:不设置shiki参数，以及设置shikigva=128。我们更喜欢硬件解码而不是软件解码，因此我们将选择shikigva=128选项，并再次将shikigva注入我们的dGPU，这次的值为128。重新启动后DRM开始工作。\n\n注意:\n\n * 你可以使用gfxutil找到iGPU/dGPU的路径。\n   \n   * path/to/gfxutil -f GFX0\n   * GFX0: 表示dGPUs，如果安装了多个，请检查IORegistryExplorer中AMD卡的名称\n   * IGPU: 表示IGPU\n\n * 如果你使用DeviceProperties注入shikigva，请确保只对一个GPU执行此操作，否则WhateverGreen将使用它首先找到的任何内容，并且不能保证一致性。\n\n * IQSV代表英特尔快速同步视频:这仅在iGPU存在并启用并正确设置时有效。\n\n * 特殊配置(如Haswell + AMD dGPU和iMac SMBIOS，但iGPU是禁用的)不在图表中。你必须自己做研究。\n\n * Shiki 来源 有助于理解标志的作用以及何时使用它们，并可能有助于特殊配置。\n\n * 对于Big Sur下的 VDADecoderCreate failed. err: -12473 错误,强制使用AMD解码器(在适用的系统上)可以帮助解决这个问题:\n   \n   defaults write com.apple.AppleGVA gvaForceAMDAVCDecode -boolean yes\n   ',normalizedContent:'# 修复drm支持和igpu性能\n\n * 注意:safari 14和macos 11, big sur目前不受whatevergreen的drm补丁支持。不过，在卡特琳娜及更老版本的safari 13支持得还不错。\n * 注2:浏览器不使用基于硬件的drm (ie mozilla firefox或基于chrome的浏览器，如谷歌chrome和microsoft edge)将有工作的drm，而无需在igpu和dgpu上进行任何工作。以下指南是使用基于硬件的drm safari和其他应用程序。\n\n关于drm，我们有几点需要提一下:\n\n * drm需要支持的dgpu\n   * 有关支持的卡，请参阅gpu购买者指南\n * 仅igpu系统的drm损坏\n   * 这个问题可以在10.12.2之前用shiki(现在的whatevergreen)修复，但在10.12.3时被破坏了\n   * 这是由于我们的igpu不支持苹果的固件，我们的管理引擎 没有苹果的证书\n * 工作硬件加速和解码\n\n\n# 测试硬件加速和解码\n\n因此，在我们开始修复drm之前，我们需要确保您的硬件是工作的。最好的检查方法是运行 vdadecoderchecker:\n\n\n\n如果你在这一点上失败了，你可以检查以下几点:\n\n * 确保您的硬件支持\n   * 参见gpu购买指南\n * 确保你正在运行的smbios与你的硬件匹配\n   * 例如，不要在台式机上使用mac mini smbios，因为mac mini运行的是移动硬件，所以macos也会有同样的要求\n * 确保igpu在bios中是启用的，并且具有正确的设置属性(aapl,ig-platform-id，如果需要，device-id)\n   * 您可以查看指南中的deviceproperties部分或whatevergreen的手册\n * 避免不必要的acpi重命名，所有重要的重命名都由whatevergreen处理\n   * change gfx0 to igpu\n   * change peg0 to gfx0\n   * change heci to imei\n   * 等\n * 确保lilu和whatevergreen已加载\n   * 确保没有任何遗留的图形补丁，因为它们已经被合并到whatevergreen中:\n     * intelgraphicsfixup.kext\n     * nvidiagraphicsfixup.kext\n     * shiki.kext\n\n检查lilu和whatevergreen是否正确加载:\n\nkextstat | grep -e "lilu|whatevergreen"\n\n\n> 这些kext中的一个或多个没有出现\n\n一般来说，最好的开始是通过查看你的opencore日志，看看lilu和whatevergreen是否正确注入:\n\n14:354 00:020 oc: prelink injection lilu.kext () - success\n14:367 00:012 oc: prelink injection whatevergreen.kext () - success\n\n\n如果它说注射失败:\n\n15:448 00:007 oc: prelink injection whatevergreen.kext () - invalid parameter\n\n\n你可以查看的主要地方是:\n\n * 注射顺序:确保lilu在whatevergreen上面\n * 所有的kext都是最新版本:对于lilu插件尤其重要，因为不匹配的kext可能会导致问题\n\n注意:要设置文件日志，请参阅 opencore 调试.\n\n注:在macos 10.15及更新版本上，applegva调试默认是关闭的，如果你在运行vdadecoderchecker时得到一个通用错误，你可以使用以下命令打开调试:\n\ndefaults write com.apple.applegva enablesyslog -boolean true\n\n\n并撤销此操作:\n\ndefaults delete com.apple.applegva enablesyslog\n\n\n\n# 测试drm\n\n因此，在我们深入讨论之前，我们需要回顾一些事情，主要是你将在现实中看到的drm类型:\n\nfairplay 1.x: 基于软件的drm，可以更好地支持legacy mac\n\n * 最简单的测试方法是播放itunes电影: fairplay 1.x test\n   * fairplay 1.x预告片将在任何配置上工作，如果whatevergreen被正确设置-包括只有igpu的配置。然而，fairplay 1.x 电影将只在仅支持igpu的配置上播放大约3-5秒，之后会误以为hdcp不支持。\n\nfairplay 2.x/3.x: 基于硬件的drm，可以在netflix、amazon prime中找到\n\n * 有几个方法测试:\n   * 在netflix或amazon prime上播放节目\n   * 播放 amazon prime 预告片: 蜘蛛侠: 英雄远征\n     * 预告片本身并不使用drm，但亚马逊仍然会在播放前进行检查\n * 注意:需要更新的amd gpu才能工作(polaris+)\n\nfairplay 4.x: 混合drm，在appletv+上找到\n\n * 您可以打开tv.app，选择tv+ ->免费apple tv+首映，然后点击任何一集进行测试，无需任何试用(您需要一个icloud帐户)\n * 如果你想使用apple tv+，也可以免费试用\n * 注意:需要没有igpu (xeon)或更新的amd gpu工作(polaris+)\n   * 当igpu不存在时，可以强制fairplay 1.x\n\n如果在这些测试中一切正常，则无需继续!否则,继续。\n\n\n# 修复drm\n\n因此，要修复drm，我们主要可以走一条路:为drm打补丁，使用软件或amd解码。vit为不同的硬件配置制作了一个很棒的小图表:\n\n * whatevergreen的drm图标\n\n那么如何使用它呢?首先，确定你在图表中有什么配置(amd代表gpu，而不是cpu)。列出的smbios (im = imac, mm = mac mini, imp = imac pro, mp = mac pro)是你应该使用的，如果你匹配硬件配置。如果你没有匹配图表中的任何配置，你就不走运了。\n\n接下来，确定你需要使用什么shiki模式。如果您的设置有两种配置，它们将在使用的shiki标志上有所不同。通常，硬件解码比软件解码更重要。如果mode列为空，则操作完成。否则，你应该使用deviceproperties > add将shikigva作为属性添加到任何gpu。例如，如果我们需要使用的模式是shikigva=80:\n\n\n\n你也可以使用启动参数——它位于mode列中。\n\n这里有一个例子。如果我们有一个intel i9-9900k和一个rx 560，配置将是“amd+igpu”，我们应该使用imac或mac mini smbios(对于这个特定的配置，imac19,1)。然后我们看到配置有两个选项:一个是模式为shikigva=16，另一个是shikigva=80。我们在“prime预告片”和“prime/netflix”中看到了区别。我们希望netflix能正常工作，所以我们选择shikigva=80选项。然后将类型为数字/整数和值为80的shikigva注入到我们的igpu或dgpu中，重新启动，drm应该可以工作了。\n\n这是另一个例子。这次，我们有一个ryzen 3700x和一个rx 480。在这种情况下，我们的配置只有“amd”，我们应该使用imac pro或mac pro smbios。同样，有两个选项:不设置shiki参数，以及设置shikigva=128。我们更喜欢硬件解码而不是软件解码，因此我们将选择shikigva=128选项，并再次将shikigva注入我们的dgpu，这次的值为128。重新启动后drm开始工作。\n\n注意:\n\n * 你可以使用gfxutil找到igpu/dgpu的路径。\n   \n   * path/to/gfxutil -f gfx0\n   * gfx0: 表示dgpus，如果安装了多个，请检查ioregistryexplorer中amd卡的名称\n   * igpu: 表示igpu\n\n * 如果你使用deviceproperties注入shikigva，请确保只对一个gpu执行此操作，否则whatevergreen将使用它首先找到的任何内容，并且不能保证一致性。\n\n * iqsv代表英特尔快速同步视频:这仅在igpu存在并启用并正确设置时有效。\n\n * 特殊配置(如haswell + amd dgpu和imac smbios，但igpu是禁用的)不在图表中。你必须自己做研究。\n\n * shiki 来源 有助于理解标志的作用以及何时使用它们，并可能有助于特殊配置。\n\n * 对于big sur下的 vdadecodercreate failed. err: -12473 错误,强制使用amd解码器(在适用的系统上)可以帮助解决这个问题:\n   \n   defaults write com.apple.applegva gvaforceamdavcdecode -boolean yes\n   ',charsets:{cjk:!0}},{title:"GPU Patching",frontmatter:{},regularPath:"/universal/gpu-patches.html",relativePath:"universal/gpu-patches.md",key:"v-b798945a",path:"/universal/gpu-patches.html",headers:[{level:2,title:"Converting a clover fakeID to OpenCore",slug:"converting-a-clover-fakeid-to-opencore",normalizedTitle:"converting a clover fakeid to opencore",charIndex:248},{level:2,title:"iGPU BusID Patching",slug:"igpu-busid-patching",normalizedTitle:"igpu busid patching",charIndex:324},{level:3,title:"Mapping video ports",slug:"mapping-video-ports",normalizedTitle:"mapping video ports",charIndex:2748},{level:3,title:"Adding to your config.plist",slug:"adding-to-your-config-plist",normalizedTitle:"adding to your config.plist",charIndex:3460}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Converting a clover fakeID to OpenCore iGPU BusID Patching Mapping video ports Adding to your config.plist",content:"# GPU Patching\n\nThis little section is for those who need more than what is provided by simple framebuffer patching and WhateverGreen's auto-patches:\n\n * Applying a fakeID for unsupported GPUs\n * iGPU BusID patching for 300 series motherboards\n\n\n# Converting a clover fakeID to OpenCore\n\nGuide moved here: Renaming GPUs\n\n\n# iGPU BusID Patching\n\nThis section is for users running \"true\" 300 series motherboards( B360, B365, H310, H370, Z390) who are having issues setting up their iGPU as a display out.\n\nSo to get started I'll assume you've already done basic framebuffer patches in your config from the Coffee Lake portion of the guide, it should look something like this:\n\n\n\n * Note: With macOS 10.15.5, there seems to be a lot of issues with black screen using 07009B3E, if you get similar issues try swapping to 00009B3E\n\nNow that we're prepped, we can start looking into busID patching. Checking the dumps at the official WhateverGreen repository shows us this for the 3E9B0007 ID(Desktop UHD 630):\n\nID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302\nTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)\nGPU Name: Intel UHD Graphics 630\nModel Name(s):\nCamelia: Disabled\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nLooking at all this can be quite overwhelming, but we'll break it down to be a bit simpler. For use we care about this:\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nThese are your iGPUs ports by default, lets go through port 1 and see what each section is used for:\n\nThe first port:\n\n01050900 00040000 C7030000\n\n\nPort: 01\n\n * 01050900 00040000 C7030000\n\nbusId: 0x05\n\n * 01050900 00040000 C7030000\n\nPipe Number 9 (little endian):\n\n * 01050900 00040000 C7030000\n\nConnector type: DisplayPort\n\n * 01050900 00040000 C7030000\n\nFlags - We leave it as default:\n\n * 01050900 00040000 C7030000\n\nThings to note:\n\n * You cannot use the same busId twice, having 2 in use will create conflicts\n * Pipe number and flags don't need to changed\n\nList of connector types:\n\n * 00 04 00 00 - DisplayPort\n * 00 08 00 00 - HDMI\n * 04 00 00 00 - Digital DVI\n * 02 00 00 00 - LVDS (for laptops)\n * 01 00 00 00 - Dummy port\n\n\n# Mapping video ports\n\n 1. Plug display into HDMI port\n\n 2. Set Port 1 to the HDMI connector type:\n    \n    * 01xx0900 00080000 C7030000\n\n 3. Disable ports 2 and 3 with busid=00:\n    \n    * 02000A00 00040000 C7030000\n    * 03000800 00040000 C7030000\n\n 4. Walk through busids for Port 1 if the previous didn't work(yup you gotta do a shit ton of reboots). The maximum busid on most platforms is 0x06\n    \n    * 01010900 00080000 C7030000\n    * 01020900 00080000 C7030000\n    * 01030900 00080000 C7030000\n    * etc\n\nIf you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * 01000900 00040000 C7030000\n * 02xx0A00 00080000 C7030000\n * 03000800 00040000 C7030000\n\n\n# Adding to your config.plist\n\nSo adding these patches are simple though a bunch of entries are required:\n\n * framebuffer-con0-enable = 01000000\n * framebuffer-con1-enable = 01000000\n * framebuffer-con2-enable = 01000000\n * framebuffer-con0-alldata = port 1\n * framebuffer-con1-alldata = port 2\n * framebuffer-con2-alldata = port 3\n\nSo when adding the patches, port 1 will actually become con0 as the ports start at 0. These are also all data types when entering your values.\n\nA finished config should look something like this:\n\n\n\nSource for iGPU BusID patching: CorpNewt's Brain",normalizedContent:"# gpu patching\n\nthis little section is for those who need more than what is provided by simple framebuffer patching and whatevergreen's auto-patches:\n\n * applying a fakeid for unsupported gpus\n * igpu busid patching for 300 series motherboards\n\n\n# converting a clover fakeid to opencore\n\nguide moved here: renaming gpus\n\n\n# igpu busid patching\n\nthis section is for users running \"true\" 300 series motherboards( b360, b365, h310, h370, z390) who are having issues setting up their igpu as a display out.\n\nso to get started i'll assume you've already done basic framebuffer patches in your config from the coffee lake portion of the guide, it should look something like this:\n\n\n\n * note: with macos 10.15.5, there seems to be a lot of issues with black screen using 07009b3e, if you get similar issues try swapping to 00009b3e\n\nnow that we're prepped, we can start looking into busid patching. checking the dumps at the official whatevergreen repository shows us this for the 3e9b0007 id(desktop uhd 630):\n\nid: 3e9b0007, stolen: 57 mb, fbmem: 0 bytes, vram: 1536 mb, flags: 0x00801302\ntotal stolen: 58 mb, total cursor: 1 mb (1572864 bytes), max stolen: 172 mb, max overall: 173 mb (181940224 bytes)\ngpu name: intel uhd graphics 630\nmodel name(s):\ncamelia: disabled\nmobile: 0, pipecount: 3, portcount: 3, fbmemorycount: 3\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nlooking at all this can be quite overwhelming, but we'll break it down to be a bit simpler. for use we care about this:\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nthese are your igpus ports by default, lets go through port 1 and see what each section is used for:\n\nthe first port:\n\n01050900 00040000 c7030000\n\n\nport: 01\n\n * 01050900 00040000 c7030000\n\nbusid: 0x05\n\n * 01050900 00040000 c7030000\n\npipe number 9 (little endian):\n\n * 01050900 00040000 c7030000\n\nconnector type: displayport\n\n * 01050900 00040000 c7030000\n\nflags - we leave it as default:\n\n * 01050900 00040000 c7030000\n\nthings to note:\n\n * you cannot use the same busid twice, having 2 in use will create conflicts\n * pipe number and flags don't need to changed\n\nlist of connector types:\n\n * 00 04 00 00 - displayport\n * 00 08 00 00 - hdmi\n * 04 00 00 00 - digital dvi\n * 02 00 00 00 - lvds (for laptops)\n * 01 00 00 00 - dummy port\n\n\n# mapping video ports\n\n 1. plug display into hdmi port\n\n 2. set port 1 to the hdmi connector type:\n    \n    * 01xx0900 00080000 c7030000\n\n 3. disable ports 2 and 3 with busid=00:\n    \n    * 02000a00 00040000 c7030000\n    * 03000800 00040000 c7030000\n\n 4. walk through busids for port 1 if the previous didn't work(yup you gotta do a shit ton of reboots). the maximum busid on most platforms is 0x06\n    \n    * 01010900 00080000 c7030000\n    * 01020900 00080000 c7030000\n    * 01030900 00080000 c7030000\n    * etc\n\nif you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * 01000900 00040000 c7030000\n * 02xx0a00 00080000 c7030000\n * 03000800 00040000 c7030000\n\n\n# adding to your config.plist\n\nso adding these patches are simple though a bunch of entries are required:\n\n * framebuffer-con0-enable = 01000000\n * framebuffer-con1-enable = 01000000\n * framebuffer-con2-enable = 01000000\n * framebuffer-con0-alldata = port 1\n * framebuffer-con1-alldata = port 2\n * framebuffer-con2-alldata = port 3\n\nso when adding the patches, port 1 will actually become con0 as the ports start at 0. these are also all data types when entering your values.\n\na finished config should look something like this:\n\n\n\nsource for igpu busid patching: corpnewt's brain",charsets:{}},{title:"使用OpenCore修复iMessage和其他服务",frontmatter:{},regularPath:"/universal/iservices.html",relativePath:"universal/iservices.md",key:"v-7a42fe5a",path:"/universal/iservices.html",headers:[{level:2,title:"使用GenSMBIOS",slug:"使用gensmbios",normalizedTitle:"使用gensmbios",charIndex:527},{level:2,title:"使用macserial",slug:"使用macserial",normalizedTitle:"使用macserial",charIndex:658},{level:2,title:"选择MAC地址",slug:"选择mac地址",normalizedTitle:"选择mac地址",charIndex:1272},{level:2,title:"获得相应的ROM值",slug:"获得相应的rom值",normalizedTitle:"获得相应的rom值",charIndex:1480},{level:2,title:"生成UUID",slug:"生成uuid",normalizedTitle:"生成uuid",charIndex:1582},{level:2,title:"序列号有效期",slug:"序列号有效期",normalizedTitle:"序列号有效期",charIndex:2435},{level:2,title:"修复 en0",slug:"修复-en0",normalizedTitle:"修复 en0",charIndex:3032},{level:3,title:"如果我根本没有En0怎么办?",slug:"如果我根本没有en0怎么办",normalizedTitle:"如果我根本没有en0怎么办?",charIndex:3235},{level:3,title:"使en0显示为内置",slug:"使en0显示为内置",normalizedTitle:"使en0显示为内置",charIndex:3600},{level:2,title:"修复ROM",slug:"修复rom",normalizedTitle:"修复rom",charIndex:3153},{level:2,title:"验证NVRAM",slug:"验证nvram",normalizedTitle:"验证nvram",charIndex:4241},{level:2,title:"清除旧的尝试",slug:"清除旧的尝试",normalizedTitle:"清除旧的尝试",charIndex:4450},{level:2,title:"最后一次验证你的工作",slug:"最后一次验证你的工作",normalizedTitle:"最后一次验证你的工作",charIndex:5436},{level:2,title:"清理你的AppleID",slug:"清理你的appleid",normalizedTitle:"清理你的appleid",charIndex:5543},{level:2,title:"客户代码错误",slug:"客户代码错误",normalizedTitle:"客户代码错误",charIndex:6088}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"使用GenSMBIOS 使用macserial 选择MAC地址 获得相应的ROM值 生成UUID 序列号有效期 修复 en0 如果我根本没有En0怎么办? 使en0显示为内置 修复ROM 验证NVRAM 清除旧的尝试 最后一次验证你的工作 清理你的AppleID 客户代码错误",content:'# 使用OpenCore修复iMessage和其他服务\n\n这个页面是为那些有iMessage和其他iServices问题的人准备的，这是一个非常基本的指南，所以不会像其他一些指南那样深入讨论这些问题。本指南是对AppleLife修复服务指南的翻译和重新解释: Как завести сервисы Apple - iMessage, FaceTime, iCloud.\n\n你的Apple ID是使用iServices最具影响力的因素\n\n如果你的账户中有现有的苹果产品，比如iPhone，那么使用生成的串行集应该不会有任何问题。但是，如果你最近创建了一个账户，没有任何现有的苹果硬件或应用商店购买，你可能需要在尝试登录后打电话给苹果。\n\n下面将创建以下项目，这是使用iServices所必需的:\n\n * MLB\n * ROM*\n * SystemProductName\n * SystemSerialNumber\n * SystemUUID\n\n提示\n\n对于ROM，我们使用网络接口的MAC地址，小写，不含:。\n\n注意:你和你自己对你的AppleID负责，仔细阅读指南，如果你搞砸了，承担全部责任。Dortania和其他指南不会对你做的事情负责。\n\n\n# 使用GenSMBIOS\n\n下载GenSMBIOS并选择选项1下载MacSerial，选择下一个选项3生成一些新的series。我们要找的是一个没有注册购买日的有效序列号。\n\n提示: iMacPro1,1 10 将输出10个串行，这将节省您生成的时间\n\n\n\n\n# 使用macserial\n\n这是针对Linux用户的，也是使用GenSMBIOS的另一种选择。\n\n为你的型号生成一个新的 Serial 和 Board Serial (MLB)。\n\n要生成它，你需要macserial。\n\n您可以从这里下载OpenCorePkg的最新版本\n\n或者从源代码编译开发macserial\n\ngit clone --depth 1 https://github.com/acidanthera/OpenCorePkg.git\ncd ./OpenCorePkg/Utilities/macserial/\nmake\nchmod +x ./macserial\n\n\n在你的config.plist文件中找到你的SystemProductName。那是你的型号。\n\n用config.plist中的SystemProductName替换下面的"iMacPro1,1"。\n\n./macserial --num 1 --model "iMacPro1,1" \n\n\n示例输出:\n\n$ ./macserial \\\n        --model "iMacPro1,1" \nWarning: arc4random is not available!\nC02V7UYGHX87 | C02733401J9JG36A8\n\n\n左边的值是你的Serial number。 右边的值是你的Board Serial (MLB)。\n\n\n# 选择MAC地址\n\n选择一个具有组织唯一标识符(OUI)的MAC地址，该标识符对应于真实的Apple, Inc.接口。\n\n请看下面的列表:\n\nhttps://gitlab.com/wireshark/wireshark/-/raw/master/manuf\n\n例如:\n\n00:16:CB    Apple   Apple, Inc.\n\n\n组成最后3个八进制。\n\n例如:\n\n00:16:CB:00:11:22\n\n\n\n# 获得相应的ROM值\n\nROM是从你的MAC地址计算出来的。\n\nROM是从你的MAC地址计算出来的。\n\n例如:\n\nMAC: 00:16:CB:00:11:22\n\nROM: 0016cb001122\n\n\n# 生成UUID\n\n在终端中输入uuidgen\n\n$ uuidgen\n976AA603-75FC-456B-BC6D-9011BFB4968E\n\n\n然后简单地在config.plist中替换这些值:\n\nKEY                  DATA\nMLB                  C02733401J9JG36A8\nMac Address          00:16:CB:00:11:22\nROM                  0016cb001122\nSystemProductName    iMacPro1,1\nSystemSerialNumber   C02V7UYGHX87\nSystemUUID           976AA603-75FC-456B-BC6D-9011BFB4968E\n\n它应该看起来像这样:\n\n    <key>MLB</key>\n    <string>C02733401J9JG36A8</string>\n    <key>ROM</key>\n    <data>0016cb001122</data>\n    <key>SpoofVendor</key>\n    <true/>\n    <key>SystemProductName</key>\n    <string>iMacPro1,1</string>\n    <key>SystemSerialNumber</key>\n    <string>C02V7UYGHX87</string>\n    <key>SystemUUID</key>\n    <string>976AA603-75FC-456B-BC6D-9011BFB4968E</string>\n\n\n注意:如果你在使用App Store时有问题，你可能需要修复En0，这取决于你的硬件设置。\n\n全新的Apple ID几乎肯定无法使用。在你的账户中有其他真正的设备几乎总是有效的。\n\n如果您看到一个支持警告，请参见下面。\n\n\n# 序列号有效期\n\n现在将串行输入苹果检查覆盖页面，你将得到3个答复之一:\n\n很抱歉，我们无法查询这个序列号的覆盖范围。   有效的购买日期   购买日期未验证\n                                  \n\n提示\n\n复制并粘贴序列号，因为无效格式的序列号也将返回“我们很抱歉，我们无法检查这个序列号的覆盖范围。”\n\n第一个是我们想要的(你也可以使用第三个，但不建议使用，因为可能会与实际的Mac发生冲突)。现在我们可以将其余的值转换为config.plist -> PlatformInfo -> Generic:\n\n * Type = SystemProductName\n * Serial = SystemSerialNumber\n * Board Serial = MLB\n * SmUUID = SystemUUID\n\n注意\n\n虽然第一个选项适用于大多数情况，但请注意，如果你在Apple/iServices上有糟糕的记录，你可能需要一个“购买日期未验证”的选项。否则就会产生怀疑\n\n警告\n\n使用“购买日期未验证:”系列可能会在同一系列的另一台机器被激活时引起问题。对于初始设置，它可以帮助缓解您的帐户问题，但从长远来看，无效的串行可能是一个更安全的选择。\n\n提示\n\n检查太多的序列可能会导致速率受限。要绕过此限制，您可以尝试清除cookie或更改IP。\n\n\n# 修复 en0\n\n首先，获取Hackintool并前往系统 ->外设(信息 -> 杂项 在旧版本的Hackintool)\n\n在网络接口(网卡图标)下，在“BSD”下查找“en0”，并检查设备是否在“内置”下有复选标记。如果有一个复选标记，跳过到修复ROM部分，否则继续阅读。\n\n * 注意:en0可以是Wifi、ethernet甚至Thunderbolt。类型并不重要，只要它存在并标记为内置即可。\n\n\n# 如果我根本没有En0怎么办?\n\n好吧，我们要重置macOS的网络设置，这样它就可以重新构建界面;打开终端并运行以下命令:\n\nsudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist\nsudo rm /Library/Preferences/SystemConfiguration/preferences.plist\n\n\n一旦完成，重启并再次检查。\n\n如果这不起作用，添加NullEthernet.kext和ssdt-rmne.aml分别到您的EFI和config.plist下的Kernel -> add和ACPI -> add。SSDT是预编译的，因此不需要额外的工作，提醒编译后的文件具有.aml扩展名，.dsl可以视为源代码。\n\n\n# 使en0显示为内置\n\n\n\n现在，在Hackintool的PCI选项卡下，导出PCI DeviceProperties，这将在桌面上创建一个pcidevices.plist\n\n\n\n现在搜索pcidevices.plist,找到你的PciRoot以太网控制器。对我们来说，这将是PciRoot(0x0)/Pci(0x1f,0x6)\n\n\n\n现在有了PciRoot，进入你的config plist -> DeviceProperties ->添加并应用built属性，类型为Data，值为01\n\n\n\n\n# 修复ROM\n\nT这是一个很多人可能已经忘记的部分，但它可以在你的 config.plist 文件 PlatformInfo -> Generic -> ROM 下看到\n\n要找到实际的MAC地址/ROM值，你可以在以下几个地方找到:\n\n * BIOS\n\n * macOS: 系统首选项—>网络—>以太网—>高级—>硬件—> MAC地址\n\n * Windows: 设置->网络和互联网->以太网->以太网->物理MAC地址\n\n * 注意:en0可以是Wifi、以太网甚至Thunderbolt，根据你的情况调整上面的例子。\n\n有些用户甚至使用真实的MAC地址转储来配置，在本指南中我们将使用真实的MAC地址，但请注意，这是另一种选择。\n\n当将其添加到你的配置中时，c0:7e:bf:c3:af:ff应该被转换为c07ebfc3afff，因为Data类型不能接受冒号(:)。\n\n\n\n\n# 验证NVRAM\n\n许多人忘记了NVRAM对iServices的正确工作至关重要，原因是iMessage密钥等都存储在NVRAM中。如果没有NVRAM, iMessage既不能看到也不能存储密钥。\n\n因此，我们需要验证NVRAM是否可以工作，不管它是否“应该工作”，因为某些固件可能比其他固件更麻烦。\n\n请参阅OpenCore指南的模拟NVRAM部分，以进行测试(如果您有可用的NVRAM)和模拟(如果没有)。\n\n\n# 清除旧的尝试\n\n对于那些尝试设置iMessage但失败的人来说，这很重要，首先要确保你的NVRAM已被清除。您可以在config plist -> Misc -> Security -> AllowNvramReset下启用AllowNvramReset选项。\n\n打开终端，运行如下命令:\n\nbash\nsudo rm -rf ~/Library/Caches/com.apple.iCloudHelper*\nsudo rm -rf ~/Library/Caches/com.apple.Messages*\nsudo rm -rf ~/Library/Caches/com.apple.imfoundation.IMRemoteURLConnectionAgent*\nsudo rm -rf ~/Library/Preferences/com.apple.iChat*\nsudo rm -rf ~/Library/Preferences/com.apple.icloud*\nsudo rm -rf ~/Library/Preferences/com.apple.imagent*\nsudo rm -rf ~/Library/Preferences/com.apple.imessage*\nsudo rm -rf ~/Library/Preferences/com.apple.imservice*\nsudo rm -rf ~/Library/Preferences/com.apple.ids.service*\nsudo rm -rf ~/Library/Preferences/com.apple.madrid.plist*\nsudo rm -rf ~/Library/Preferences/com.apple.imessage.bag.plist*\nsudo rm -rf ~/Library/Preferences/com.apple.identityserviced*\nsudo rm -rf ~/Library/Preferences/com.apple.ids.service*\nsudo rm -rf ~/Library/Preferences/com.apple.security*\nsudo rm -rf ~/Library/Messages\n\n\n\n# 最后一次验证你的工作\n\n从最新的OpenCore版本抓取macserial并运行以下命令:\n\npath/to/macserial -s\n\n\n这将为我们提供系统的完整概要，验证所呈现的内容与您的工作相匹配。\n\n\n# 清理你的AppleID\n\n * 从你的AppleID中删除所有设备:管理你的设备\n * 启用2 Factor-Auth\n * 从Keychain中删除所有iServices，例如:\n\nids: identity-rsa-key-pair-signature-v1\nids: identity-rsa-private-key\nids: identity-rsa-public-key\nids: message-protection-key\nids: message-protection-public-data-registered\nids: personal-public-key-cache\niMessage Encryption Key\niMessage Signing Key\ncom.apple.facetime: registrationV1\n等 ...\n\n\n最后一层预防措施是创建一个新的AppleID，以确保如果你最终将自己的账户列入黑名单，它不是你的主要账户。\n\n提示\n\n给账户加一张支付卡，有足够的购买量也会有所帮助。虽然不是具体的，但你可以把AppleID看作一个信用评分，你是一个越好的苹果用户，他们就越有可能不会出现激活问题，或者更容易获得苹果支持\n\n::\n\n\n# 客户代码错误\n\n好吧，伙计，你做到了。你的AppleID列入黑名单。解决方法很简单，但并不漂亮，你必须打电话给苹果。否则，除了使用新帐户之外，没有任何其他程序。在打电话之前添加一张支付卡可以帮助使账户合法化，这样它看起来就不那么像一个机器人了。\n\n\n\n * 苹果联系方式有两种\n   * Apple打电话给你:Apple Support。你必须点击Apple ID，然后选择iCloud、Facetime和Messages。现在，你应该点击“立即与苹果通话”并输入你的电话号码\n   * 您也可以联系苹果公司寻求支持和服务，在列表中查找您的国家，然后拨打电话:苹果支持电话号码',normalizedContent:'# 使用opencore修复imessage和其他服务\n\n这个页面是为那些有imessage和其他iservices问题的人准备的，这是一个非常基本的指南，所以不会像其他一些指南那样深入讨论这些问题。本指南是对applelife修复服务指南的翻译和重新解释: как завести сервисы apple - imessage, facetime, icloud.\n\n你的apple id是使用iservices最具影响力的因素\n\n如果你的账户中有现有的苹果产品，比如iphone，那么使用生成的串行集应该不会有任何问题。但是，如果你最近创建了一个账户，没有任何现有的苹果硬件或应用商店购买，你可能需要在尝试登录后打电话给苹果。\n\n下面将创建以下项目，这是使用iservices所必需的:\n\n * mlb\n * rom*\n * systemproductname\n * systemserialnumber\n * systemuuid\n\n提示\n\n对于rom，我们使用网络接口的mac地址，小写，不含:。\n\n注意:你和你自己对你的appleid负责，仔细阅读指南，如果你搞砸了，承担全部责任。dortania和其他指南不会对你做的事情负责。\n\n\n# 使用gensmbios\n\n下载gensmbios并选择选项1下载macserial，选择下一个选项3生成一些新的series。我们要找的是一个没有注册购买日的有效序列号。\n\n提示: imacpro1,1 10 将输出10个串行，这将节省您生成的时间\n\n\n\n\n# 使用macserial\n\n这是针对linux用户的，也是使用gensmbios的另一种选择。\n\n为你的型号生成一个新的 serial 和 board serial (mlb)。\n\n要生成它，你需要macserial。\n\n您可以从这里下载opencorepkg的最新版本\n\n或者从源代码编译开发macserial\n\ngit clone --depth 1 https://github.com/acidanthera/opencorepkg.git\ncd ./opencorepkg/utilities/macserial/\nmake\nchmod +x ./macserial\n\n\n在你的config.plist文件中找到你的systemproductname。那是你的型号。\n\n用config.plist中的systemproductname替换下面的"imacpro1,1"。\n\n./macserial --num 1 --model "imacpro1,1" \n\n\n示例输出:\n\n$ ./macserial \\\n        --model "imacpro1,1" \nwarning: arc4random is not available!\nc02v7uyghx87 | c02733401j9jg36a8\n\n\n左边的值是你的serial number。 右边的值是你的board serial (mlb)。\n\n\n# 选择mac地址\n\n选择一个具有组织唯一标识符(oui)的mac地址，该标识符对应于真实的apple, inc.接口。\n\n请看下面的列表:\n\nhttps://gitlab.com/wireshark/wireshark/-/raw/master/manuf\n\n例如:\n\n00:16:cb    apple   apple, inc.\n\n\n组成最后3个八进制。\n\n例如:\n\n00:16:cb:00:11:22\n\n\n\n# 获得相应的rom值\n\nrom是从你的mac地址计算出来的。\n\nrom是从你的mac地址计算出来的。\n\n例如:\n\nmac: 00:16:cb:00:11:22\n\nrom: 0016cb001122\n\n\n# 生成uuid\n\n在终端中输入uuidgen\n\n$ uuidgen\n976aa603-75fc-456b-bc6d-9011bfb4968e\n\n\n然后简单地在config.plist中替换这些值:\n\nkey                  data\nmlb                  c02733401j9jg36a8\nmac address          00:16:cb:00:11:22\nrom                  0016cb001122\nsystemproductname    imacpro1,1\nsystemserialnumber   c02v7uyghx87\nsystemuuid           976aa603-75fc-456b-bc6d-9011bfb4968e\n\n它应该看起来像这样:\n\n    <key>mlb</key>\n    <string>c02733401j9jg36a8</string>\n    <key>rom</key>\n    <data>0016cb001122</data>\n    <key>spoofvendor</key>\n    <true/>\n    <key>systemproductname</key>\n    <string>imacpro1,1</string>\n    <key>systemserialnumber</key>\n    <string>c02v7uyghx87</string>\n    <key>systemuuid</key>\n    <string>976aa603-75fc-456b-bc6d-9011bfb4968e</string>\n\n\n注意:如果你在使用app store时有问题，你可能需要修复en0，这取决于你的硬件设置。\n\n全新的apple id几乎肯定无法使用。在你的账户中有其他真正的设备几乎总是有效的。\n\n如果您看到一个支持警告，请参见下面。\n\n\n# 序列号有效期\n\n现在将串行输入苹果检查覆盖页面，你将得到3个答复之一:\n\n很抱歉，我们无法查询这个序列号的覆盖范围。   有效的购买日期   购买日期未验证\n                                  \n\n提示\n\n复制并粘贴序列号，因为无效格式的序列号也将返回“我们很抱歉，我们无法检查这个序列号的覆盖范围。”\n\n第一个是我们想要的(你也可以使用第三个，但不建议使用，因为可能会与实际的mac发生冲突)。现在我们可以将其余的值转换为config.plist -> platforminfo -> generic:\n\n * type = systemproductname\n * serial = systemserialnumber\n * board serial = mlb\n * smuuid = systemuuid\n\n注意\n\n虽然第一个选项适用于大多数情况，但请注意，如果你在apple/iservices上有糟糕的记录，你可能需要一个“购买日期未验证”的选项。否则就会产生怀疑\n\n警告\n\n使用“购买日期未验证:”系列可能会在同一系列的另一台机器被激活时引起问题。对于初始设置，它可以帮助缓解您的帐户问题，但从长远来看，无效的串行可能是一个更安全的选择。\n\n提示\n\n检查太多的序列可能会导致速率受限。要绕过此限制，您可以尝试清除cookie或更改ip。\n\n\n# 修复 en0\n\n首先，获取hackintool并前往系统 ->外设(信息 -> 杂项 在旧版本的hackintool)\n\n在网络接口(网卡图标)下，在“bsd”下查找“en0”，并检查设备是否在“内置”下有复选标记。如果有一个复选标记，跳过到修复rom部分，否则继续阅读。\n\n * 注意:en0可以是wifi、ethernet甚至thunderbolt。类型并不重要，只要它存在并标记为内置即可。\n\n\n# 如果我根本没有en0怎么办?\n\n好吧，我们要重置macos的网络设置，这样它就可以重新构建界面;打开终端并运行以下命令:\n\nsudo rm /library/preferences/systemconfiguration/networkinterfaces.plist\nsudo rm /library/preferences/systemconfiguration/preferences.plist\n\n\n一旦完成，重启并再次检查。\n\n如果这不起作用，添加nullethernet.kext和ssdt-rmne.aml分别到您的efi和config.plist下的kernel -> add和acpi -> add。ssdt是预编译的，因此不需要额外的工作，提醒编译后的文件具有.aml扩展名，.dsl可以视为源代码。\n\n\n# 使en0显示为内置\n\n\n\n现在，在hackintool的pci选项卡下，导出pci deviceproperties，这将在桌面上创建一个pcidevices.plist\n\n\n\n现在搜索pcidevices.plist,找到你的pciroot以太网控制器。对我们来说，这将是pciroot(0x0)/pci(0x1f,0x6)\n\n\n\n现在有了pciroot，进入你的config plist -> deviceproperties ->添加并应用built属性，类型为data，值为01\n\n\n\n\n# 修复rom\n\nt这是一个很多人可能已经忘记的部分，但它可以在你的 config.plist 文件 platforminfo -> generic -> rom 下看到\n\n要找到实际的mac地址/rom值，你可以在以下几个地方找到:\n\n * bios\n\n * macos: 系统首选项—>网络—>以太网—>高级—>硬件—> mac地址\n\n * windows: 设置->网络和互联网->以太网->以太网->物理mac地址\n\n * 注意:en0可以是wifi、以太网甚至thunderbolt，根据你的情况调整上面的例子。\n\n有些用户甚至使用真实的mac地址转储来配置，在本指南中我们将使用真实的mac地址，但请注意，这是另一种选择。\n\n当将其添加到你的配置中时，c0:7e:bf:c3:af:ff应该被转换为c07ebfc3afff，因为data类型不能接受冒号(:)。\n\n\n\n\n# 验证nvram\n\n许多人忘记了nvram对iservices的正确工作至关重要，原因是imessage密钥等都存储在nvram中。如果没有nvram, imessage既不能看到也不能存储密钥。\n\n因此，我们需要验证nvram是否可以工作，不管它是否“应该工作”，因为某些固件可能比其他固件更麻烦。\n\n请参阅opencore指南的模拟nvram部分，以进行测试(如果您有可用的nvram)和模拟(如果没有)。\n\n\n# 清除旧的尝试\n\n对于那些尝试设置imessage但失败的人来说，这很重要，首先要确保你的nvram已被清除。您可以在config plist -> misc -> security -> allownvramreset下启用allownvramreset选项。\n\n打开终端，运行如下命令:\n\nbash\nsudo rm -rf ~/library/caches/com.apple.icloudhelper*\nsudo rm -rf ~/library/caches/com.apple.messages*\nsudo rm -rf ~/library/caches/com.apple.imfoundation.imremoteurlconnectionagent*\nsudo rm -rf ~/library/preferences/com.apple.ichat*\nsudo rm -rf ~/library/preferences/com.apple.icloud*\nsudo rm -rf ~/library/preferences/com.apple.imagent*\nsudo rm -rf ~/library/preferences/com.apple.imessage*\nsudo rm -rf ~/library/preferences/com.apple.imservice*\nsudo rm -rf ~/library/preferences/com.apple.ids.service*\nsudo rm -rf ~/library/preferences/com.apple.madrid.plist*\nsudo rm -rf ~/library/preferences/com.apple.imessage.bag.plist*\nsudo rm -rf ~/library/preferences/com.apple.identityserviced*\nsudo rm -rf ~/library/preferences/com.apple.ids.service*\nsudo rm -rf ~/library/preferences/com.apple.security*\nsudo rm -rf ~/library/messages\n\n\n\n# 最后一次验证你的工作\n\n从最新的opencore版本抓取macserial并运行以下命令:\n\npath/to/macserial -s\n\n\n这将为我们提供系统的完整概要，验证所呈现的内容与您的工作相匹配。\n\n\n# 清理你的appleid\n\n * 从你的appleid中删除所有设备:管理你的设备\n * 启用2 factor-auth\n * 从keychain中删除所有iservices，例如:\n\nids: identity-rsa-key-pair-signature-v1\nids: identity-rsa-private-key\nids: identity-rsa-public-key\nids: message-protection-key\nids: message-protection-public-data-registered\nids: personal-public-key-cache\nimessage encryption key\nimessage signing key\ncom.apple.facetime: registrationv1\n等 ...\n\n\n最后一层预防措施是创建一个新的appleid，以确保如果你最终将自己的账户列入黑名单，它不是你的主要账户。\n\n提示\n\n给账户加一张支付卡，有足够的购买量也会有所帮助。虽然不是具体的，但你可以把appleid看作一个信用评分，你是一个越好的苹果用户，他们就越有可能不会出现激活问题，或者更容易获得苹果支持\n\n::\n\n\n# 客户代码错误\n\n好吧，伙计，你做到了。你的appleid列入黑名单。解决方法很简单，但并不漂亮，你必须打电话给苹果。否则，除了使用新帐户之外，没有任何其他程序。在打电话之前添加一张支付卡可以帮助使账户合法化，这样它看起来就不那么像一个机器人了。\n\n\n\n * 苹果联系方式有两种\n   * apple打电话给你:apple support。你必须点击apple id，然后选择icloud、facetime和messages。现在，你应该点击“立即与苹果通话”并输入你的电话号码\n   * 您也可以联系苹果公司寻求支持和服务，在列表中查找您的国家，然后拨打电话:苹果支持电话号码',charsets:{cyrillic:!0,cjk:!0}},{title:"Fixing MacPro7,1 Memory Errors",frontmatter:{},regularPath:"/universal/memory.html",relativePath:"universal/memory.md",key:"v-ac0e9e56",path:"/universal/memory.html",headers:[{level:2,title:"Mapping our memory",slug:"mapping-our-memory",normalizedTitle:"mapping our memory",charIndex:613},{level:3,title:"DataWidth",slug:"datawidth",normalizedTitle:"datawidth",charIndex:1008},{level:3,title:"ErrorCorrection",slug:"errorcorrection",normalizedTitle:"errorcorrection",charIndex:1021},{level:3,title:"FormFactor",slug:"formfactor",normalizedTitle:"formfactor",charIndex:1040},{level:3,title:"MaxCapacity",slug:"maxcapacity",normalizedTitle:"maxcapacity",charIndex:1054},{level:3,title:"TotalWidth",slug:"totalwidth",normalizedTitle:"totalwidth",charIndex:1069},{level:3,title:"Type",slug:"type",normalizedTitle:"type",charIndex:1083},{level:3,title:"TypeDetail",slug:"typedetail",normalizedTitle:"typedetail",charIndex:1091},{level:3,title:"Devices",slug:"devices",normalizedTitle:"devices",charIndex:1105},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:1239}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Mapping our memory DataWidth ErrorCorrection FormFactor MaxCapacity TotalWidth Type TypeDetail Devices Cleaning up",content:'# Fixing MacPro7,1 Memory Errors\n\nOn macOS Catalina and newer, users of the MacPro7,1 SMBIOS will experience this error on each boot:\n\nNOTIFICATION ERROR   ABOUT THIS MAC ERROR\n                     \n\nThe exact reason for this error is a bit unknown, however ways to resolve this error have been made possible. The most common way to remove the error is to use RestrictEvents and we highly encourage all users to use this kext instead.\n\nFor those who wish to attempt the legacy mapping way, see the below guide. Note it will require you to map all your DIMMs manually so this will be a time consuming process.\n\n\n# Mapping our memory\n\nTo start, we\'ll want to grab the following files:\n\n * CustomMemory.plist\n   * Example setup for using CustomMemory in OpenCore\n * dmidecode\n   * Tool used for extracting SMBIOS info in macOS\n\nHere is a premade file which has properties already set out for you, once you open it you should see the following:\n\n\n\nFrom here we see may properties, lets try to break it down:\n\n * DataWidth\n * ErrorCorrection\n * FormFactor\n * MaxCapacity\n * TotalWidth\n * Type\n * TypeDetail\n * Devices\n   * AssetTag\n   * BankLocator\n   * DeviceLocator\n   * Manufacturer\n   * PartNumber\n   * SerialNumber\n   * Size\n   * Speed\n * Cleaning up\n\n\n# DataWidth\n\nSpecifies the data width, in bits, of the memory. A DataWidth of 0 and a TotalWidth of 8 indicates that the device is being used solely to provide 8 error-correction bits.\n\nTo determine the DataWidth, run the following:\n\npath/to/dmidecode -t memory | grep "Data Width:"\n# Example Output\n Data Width: 64 bits\n Data Width: Unknown\n Data Width: 64 bits\n Data Width: Unknown\n Data Width: 64 bits\n Data Width: Unknown\n Data Width: 64 bits\n Data Width: Unknown\n# Final Value\nDataWidth = 64\n\n\n\n# ErrorCorrection\n\nSpecifies ECC support:\n\n1 — Other\n2 — Unknown\n3 — None\n4 — Parity\n5 — Single-bit ECC\n6 — Multi-bit ECC\n7 — CRC\n\n\nTo determine ErrorCorrection, run the following:\n\npath/to/dmidecode -t memory | grep "Error Correction Type:"\n# Example Output\n Error Correction Type: None\n# Final Value\nErrorCorrection = 3\n\n\n\n# FormFactor\n\nSpecifies Memory Form Factor\n\n1  — Other\n2  — Unknown\n9  — DIMM\n13 — SODIMM\n15 — FB-DIMM\n\n\nTo determine FormFactor, run the following:\n\npath/to/dmidecode -t memory | grep "Form Factor:"\n# Example Output\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n# Final Value\nFormFactor = 9\n\n\n\n# MaxCapacity\n\nSpecifies maximum supported memory in your system\n\nType: Bytes\n\n8GB   - 8589934592\n16GB  - 17179869184\n32GB  - 34359738368\n64GB  - 68719476736\n128GB - 137438953472\n256GB - 274877906944\n\n\n\n# TotalWidth\n\nSpecifies the total width, in bits, of the memory, including any check or error-correction bits. If there are no error-correction bits, this value should be equal to DataWidth.\n\nTo determine TotalWidth, run the following:\n\npath/to/dmidecode -t memory | grep "Total Width:"\n# Example Output\n Total Width: 72 bits\n Total Width: Unknown\n Total Width: 72 bits\n Total Width: Unknown\n Total Width: 72 bits\n Total Width: Unknown\n Total Width: 72 bits\n Total Width: Unknown\n# Final Value\nTotalWidth = 72\n\n\n\n# Type\n\nSpecifies memory type\n\n1  — Other\n2  — Unknown\n15 — SDRAM\n18 — DDR\n19 — DDR2\n20 — DDR2 FB-DIMM\n24 — DDR3\n26 — DDR4\n27 — LPDDR\n28 — LPDDR2\n29 — LPDDR3\n30 — LPDDR4\n\n\nTo determine Type, run the following:\n\npath/to/dmidecode -t memory | grep "Type:"\n# Example Output\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n# Final Value\nType = 26\n\n\n\n# TypeDetail\n\nSpecifies other memory type information\n\nBit 0 — Reserved, set to 0\nBit 1 — Other\nBit 2 — Unknown\nBit 7 — Synchronous\nBit 13 — Registered (buffered)\nBit 14 — Unbuffered (unregistered)\n\n\nCombine all that are applicable, example:\n\nBit 13 — Registered (buffered)\nBit 14 — Unbuffered (unregistered)\n-----------------------------------\n27 = TypeDetail\n\n\nTo determine TypeDetail, run the following:\n\npath/to/dmidecode -t memory | grep "Type Detail:"\n# Example Output\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n# Final Value\nTypeDetail = 7\n\n\n\n# Devices\n\nArray of Memory Devices, and where we do out magic to fix the error. In the sample CustomMemory.plist I provided, we have 12 slots listed here. From this, you\'ll want to open up System Profiler in macOS and look at the Memory tab:\n\n\n\nHere we see which slots are populated by memory, and which are empty. For filled slots, simply run through the below on how to pull information. For slots that are empty however, you\'ll want to add some blank information into thinking macOS has populated device. Ensure that by the end, you have 12 total slots filled with devices.\n\nExample of filled slots vs fake:\n\n\n\nWe recommend setting the Size and Speed to both 1, to ensure applications that do pull from memory are not confused that you have more than you should.\n\nNext lets break down the properties:\n\n * AssetTag\n * BankLocator\n * DeviceLocator\n * Manufacturer\n * PartNumber\n * SerialNumber\n * Size\n * Speed\n\n# AssetTag\n\nTo determine AssetTag, run the following:\n\npath/to/dmidecode -t memory | grep "Asset Tag:"\n#Example Output\n\n# Final Value\n\n\n * If dmidecode prints Not Specified, you can simply leave this entry blank\n\n# BankLocator\n\nTo determine BankLocator, run the following:\n\npath/to/dmidecode -t memory | grep "Bank Locator:"\n#Example Output\n\n# Final Value\n\n\n * If dmidecode prints Not Specified, you can simply leave this entry blank\n\n# DeviceLocator\n\nTo determine DeviceLocator, run the following:\n\npath/to/dmidecode -t memory | grep "Locator:"\n#Example Output\n Locator: DIMM_A1\n Locator: DIMM_A2\n Locator: DIMM_B1\n Locator: DIMM_B2\n Locator: DIMM_C1\n Locator: DIMM_C2\n Locator: DIMM_D1\n Locator: DIMM_D2\n# Final Value\nEntry 1:  DIMM_A1\nEntry 2:  DIMM_A2\nEntry 3:  DIMM_B1\nEntry 4:  DIMM_B2\nEntry 5:  DIMM_C1\nEntry 6:  DIMM_C2\nEntry 7:  DIMM_D1\nEntry 8:  DIMM_D2\nEntry 9:  DIMM_EMPTY\nEntry 10: DIMM_EMPTY\nEntry 11: DIMM_EMPTY\nEntry 12: DIMM_EMPTY\n\n\n# Manufacturer\n\nTo determine Manufacturer, run the following:\n\npath/to/dmidecode -t memory | grep "Manufacturer:"\n#Example Output\n\n# Final Value\n\n\n# PartNumber\n\nTo determine PartNumber, run the following:\n\npath/to/dmidecode -t memory | grep "Part Number:"\n#Example Output\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C15D4/8G\n Part Number: NO DIMM\n# Final Value\nEntry 1:  KHX2666C16/8G\nEntry 2:  EmptyDIMM\nEntry 3:  KHX2666C16/8G\nEntry 4:  EmptyDIMM\nEntry 5:  KHX2666C16/8G\nEntry 6:  EmptyDIMM\nEntry 7:  KHX2666C15D4/8G\nEntry 8:  EmptyDIMM\nEntry 9:  EmptyDIMM\nEntry 10: EmptyDIMM\nEntry 11: EmptyDIMM\nEntry 12: EmptyDIMM\n\n\n# SerialNumber\n\nTo determine SerialNumber, run the following:\n\npath/to/dmidecode -t memory | grep "Serial Number:"\n#Example Output\n Serial Number: 0F095257\n Serial Number: NO DIMM\n Serial Number: 0C099A57\n Serial Number: NO DIMM\n Serial Number: 752EDED8\n Serial Number: NO DIMM\n Serial Number: A2032E84\n Serial Number: NO DIMM\n# Final Value\nEntry 1:  0F095257\nEntry 2:  EmptyDIMM\nEntry 3:  0C099A57\nEntry 4:  EmptyDIMM\nEntry 5:  752EDED8\nEntry 6:  EmptyDIMM\nEntry 7:  A2032E84\nEntry 8:  EmptyDIMM\nEntry 9:  EmptyDIMM\nEntry 10: EmptyDIMM\nEntry 11: EmptyDIMM\nEntry 12: EmptyDIMM\n\n\n# Size\n\nSize of single memory stick in MB\n\n1GB  - 1024\n2GB  - 2048\n4GB  - 4096\n8GB  - 8192\n16GB - 16384\n32GB - 32768\n64GB - 65536\n12GB - 131072\n\n\nTo determine Size, run the following:\n\npath/to/dmidecode -t memory | grep "Size:"\n#Example Output\n Size: 8 GB\n Size: No Module Installed\n Size: 8 GB\n Size: No Module Installed\n Size: 8 GB\n Size: No Module Installed\n Size: 8 GB\n Size: No Module Installed\n# Final Value\nEntry 1:  8192\nEntry 2:  1\nEntry 3:  8192\nEntry 4:  1\nEntry 5:  8192\nEntry 6:  1\nEntry 7:  8192\nEntry 8:  1\nEntry 9:  1\nEntry 10: 1\nEntry 11: 1\nEntry 12: 1\n\n\n# Speed\n\nSpeed of memory in Mhz\n\nex: 3000Mhz\n\nTo determine Speed, run the following:\n\npath/to/dmidecode -t memory | grep "Speed:"\n#Example Output\n Speed: 2666 MT/s\n Speed: Unknown\n Speed: 2666 MT/s\n Speed: Unknown\n Speed: 2666 MT/s\n Speed: Unknown\n Speed: 2666 MT/s\n Speed: Unknown\n# Final Value\nEntry 1:  2666\nEntry 2:  1\nEntry 3:  2666\nEntry 4:  1\nEntry 5:  2666\nEntry 6:  1\nEntry 7:  2666\nEntry 8:  1\nEntry 9:  1\nEntry 10: 1\nEntry 11: 1\nEntry 12: 1\n\n\n\n# Cleaning up\n\nNow that you\'ve built the table, we can now merge it into our config.plist.\n\nSimply copy over your work from the CustomMemory.plist and paste it into PlatformInfo:\n\n\n\nOnce this is copied over, enable PlatformInfo -> CustomMemory and reboot. The error should be no more now!\n\nReminder that you must fill all 12 slots with memory, otherwise the error will not disappear:\n\nFIXED SYSTEM PROFILER   FIXED ABOUT THIS MAC\n                        ',normalizedContent:'# fixing macpro7,1 memory errors\n\non macos catalina and newer, users of the macpro7,1 smbios will experience this error on each boot:\n\nnotification error   about this mac error\n                     \n\nthe exact reason for this error is a bit unknown, however ways to resolve this error have been made possible. the most common way to remove the error is to use restrictevents and we highly encourage all users to use this kext instead.\n\nfor those who wish to attempt the legacy mapping way, see the below guide. note it will require you to map all your dimms manually so this will be a time consuming process.\n\n\n# mapping our memory\n\nto start, we\'ll want to grab the following files:\n\n * custommemory.plist\n   * example setup for using custommemory in opencore\n * dmidecode\n   * tool used for extracting smbios info in macos\n\nhere is a premade file which has properties already set out for you, once you open it you should see the following:\n\n\n\nfrom here we see may properties, lets try to break it down:\n\n * datawidth\n * errorcorrection\n * formfactor\n * maxcapacity\n * totalwidth\n * type\n * typedetail\n * devices\n   * assettag\n   * banklocator\n   * devicelocator\n   * manufacturer\n   * partnumber\n   * serialnumber\n   * size\n   * speed\n * cleaning up\n\n\n# datawidth\n\nspecifies the data width, in bits, of the memory. a datawidth of 0 and a totalwidth of 8 indicates that the device is being used solely to provide 8 error-correction bits.\n\nto determine the datawidth, run the following:\n\npath/to/dmidecode -t memory | grep "data width:"\n# example output\n data width: 64 bits\n data width: unknown\n data width: 64 bits\n data width: unknown\n data width: 64 bits\n data width: unknown\n data width: 64 bits\n data width: unknown\n# final value\ndatawidth = 64\n\n\n\n# errorcorrection\n\nspecifies ecc support:\n\n1 — other\n2 — unknown\n3 — none\n4 — parity\n5 — single-bit ecc\n6 — multi-bit ecc\n7 — crc\n\n\nto determine errorcorrection, run the following:\n\npath/to/dmidecode -t memory | grep "error correction type:"\n# example output\n error correction type: none\n# final value\nerrorcorrection = 3\n\n\n\n# formfactor\n\nspecifies memory form factor\n\n1  — other\n2  — unknown\n9  — dimm\n13 — sodimm\n15 — fb-dimm\n\n\nto determine formfactor, run the following:\n\npath/to/dmidecode -t memory | grep "form factor:"\n# example output\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n# final value\nformfactor = 9\n\n\n\n# maxcapacity\n\nspecifies maximum supported memory in your system\n\ntype: bytes\n\n8gb   - 8589934592\n16gb  - 17179869184\n32gb  - 34359738368\n64gb  - 68719476736\n128gb - 137438953472\n256gb - 274877906944\n\n\n\n# totalwidth\n\nspecifies the total width, in bits, of the memory, including any check or error-correction bits. if there are no error-correction bits, this value should be equal to datawidth.\n\nto determine totalwidth, run the following:\n\npath/to/dmidecode -t memory | grep "total width:"\n# example output\n total width: 72 bits\n total width: unknown\n total width: 72 bits\n total width: unknown\n total width: 72 bits\n total width: unknown\n total width: 72 bits\n total width: unknown\n# final value\ntotalwidth = 72\n\n\n\n# type\n\nspecifies memory type\n\n1  — other\n2  — unknown\n15 — sdram\n18 — ddr\n19 — ddr2\n20 — ddr2 fb-dimm\n24 — ddr3\n26 — ddr4\n27 — lpddr\n28 — lpddr2\n29 — lpddr3\n30 — lpddr4\n\n\nto determine type, run the following:\n\npath/to/dmidecode -t memory | grep "type:"\n# example output\n type: ddr4\n type: unknown\n type: ddr4\n type: unknown\n type: ddr4\n type: unknown\n type: ddr4\n type: unknown\n# final value\ntype = 26\n\n\n\n# typedetail\n\nspecifies other memory type information\n\nbit 0 — reserved, set to 0\nbit 1 — other\nbit 2 — unknown\nbit 7 — synchronous\nbit 13 — registered (buffered)\nbit 14 — unbuffered (unregistered)\n\n\ncombine all that are applicable, example:\n\nbit 13 — registered (buffered)\nbit 14 — unbuffered (unregistered)\n-----------------------------------\n27 = typedetail\n\n\nto determine typedetail, run the following:\n\npath/to/dmidecode -t memory | grep "type detail:"\n# example output\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n# final value\ntypedetail = 7\n\n\n\n# devices\n\narray of memory devices, and where we do out magic to fix the error. in the sample custommemory.plist i provided, we have 12 slots listed here. from this, you\'ll want to open up system profiler in macos and look at the memory tab:\n\n\n\nhere we see which slots are populated by memory, and which are empty. for filled slots, simply run through the below on how to pull information. for slots that are empty however, you\'ll want to add some blank information into thinking macos has populated device. ensure that by the end, you have 12 total slots filled with devices.\n\nexample of filled slots vs fake:\n\n\n\nwe recommend setting the size and speed to both 1, to ensure applications that do pull from memory are not confused that you have more than you should.\n\nnext lets break down the properties:\n\n * assettag\n * banklocator\n * devicelocator\n * manufacturer\n * partnumber\n * serialnumber\n * size\n * speed\n\n# assettag\n\nto determine assettag, run the following:\n\npath/to/dmidecode -t memory | grep "asset tag:"\n#example output\n\n# final value\n\n\n * if dmidecode prints not specified, you can simply leave this entry blank\n\n# banklocator\n\nto determine banklocator, run the following:\n\npath/to/dmidecode -t memory | grep "bank locator:"\n#example output\n\n# final value\n\n\n * if dmidecode prints not specified, you can simply leave this entry blank\n\n# devicelocator\n\nto determine devicelocator, run the following:\n\npath/to/dmidecode -t memory | grep "locator:"\n#example output\n locator: dimm_a1\n locator: dimm_a2\n locator: dimm_b1\n locator: dimm_b2\n locator: dimm_c1\n locator: dimm_c2\n locator: dimm_d1\n locator: dimm_d2\n# final value\nentry 1:  dimm_a1\nentry 2:  dimm_a2\nentry 3:  dimm_b1\nentry 4:  dimm_b2\nentry 5:  dimm_c1\nentry 6:  dimm_c2\nentry 7:  dimm_d1\nentry 8:  dimm_d2\nentry 9:  dimm_empty\nentry 10: dimm_empty\nentry 11: dimm_empty\nentry 12: dimm_empty\n\n\n# manufacturer\n\nto determine manufacturer, run the following:\n\npath/to/dmidecode -t memory | grep "manufacturer:"\n#example output\n\n# final value\n\n\n# partnumber\n\nto determine partnumber, run the following:\n\npath/to/dmidecode -t memory | grep "part number:"\n#example output\n part number: khx2666c16/8g\n part number: no dimm\n part number: khx2666c16/8g\n part number: no dimm\n part number: khx2666c16/8g\n part number: no dimm\n part number: khx2666c15d4/8g\n part number: no dimm\n# final value\nentry 1:  khx2666c16/8g\nentry 2:  emptydimm\nentry 3:  khx2666c16/8g\nentry 4:  emptydimm\nentry 5:  khx2666c16/8g\nentry 6:  emptydimm\nentry 7:  khx2666c15d4/8g\nentry 8:  emptydimm\nentry 9:  emptydimm\nentry 10: emptydimm\nentry 11: emptydimm\nentry 12: emptydimm\n\n\n# serialnumber\n\nto determine serialnumber, run the following:\n\npath/to/dmidecode -t memory | grep "serial number:"\n#example output\n serial number: 0f095257\n serial number: no dimm\n serial number: 0c099a57\n serial number: no dimm\n serial number: 752eded8\n serial number: no dimm\n serial number: a2032e84\n serial number: no dimm\n# final value\nentry 1:  0f095257\nentry 2:  emptydimm\nentry 3:  0c099a57\nentry 4:  emptydimm\nentry 5:  752eded8\nentry 6:  emptydimm\nentry 7:  a2032e84\nentry 8:  emptydimm\nentry 9:  emptydimm\nentry 10: emptydimm\nentry 11: emptydimm\nentry 12: emptydimm\n\n\n# size\n\nsize of single memory stick in mb\n\n1gb  - 1024\n2gb  - 2048\n4gb  - 4096\n8gb  - 8192\n16gb - 16384\n32gb - 32768\n64gb - 65536\n12gb - 131072\n\n\nto determine size, run the following:\n\npath/to/dmidecode -t memory | grep "size:"\n#example output\n size: 8 gb\n size: no module installed\n size: 8 gb\n size: no module installed\n size: 8 gb\n size: no module installed\n size: 8 gb\n size: no module installed\n# final value\nentry 1:  8192\nentry 2:  1\nentry 3:  8192\nentry 4:  1\nentry 5:  8192\nentry 6:  1\nentry 7:  8192\nentry 8:  1\nentry 9:  1\nentry 10: 1\nentry 11: 1\nentry 12: 1\n\n\n# speed\n\nspeed of memory in mhz\n\nex: 3000mhz\n\nto determine speed, run the following:\n\npath/to/dmidecode -t memory | grep "speed:"\n#example output\n speed: 2666 mt/s\n speed: unknown\n speed: 2666 mt/s\n speed: unknown\n speed: 2666 mt/s\n speed: unknown\n speed: 2666 mt/s\n speed: unknown\n# final value\nentry 1:  2666\nentry 2:  1\nentry 3:  2666\nentry 4:  1\nentry 5:  2666\nentry 6:  1\nentry 7:  2666\nentry 8:  1\nentry 9:  1\nentry 10: 1\nentry 11: 1\nentry 12: 1\n\n\n\n# cleaning up\n\nnow that you\'ve built the table, we can now merge it into our config.plist.\n\nsimply copy over your work from the custommemory.plist and paste it into platforminfo:\n\n\n\nonce this is copied over, enable platforminfo -> custommemory and reboot. the error should be no more now!\n\nreminder that you must fill all 12 slots with memory, otherwise the error will not disappear:\n\nfixed system profiler   fixed about this mac\n                        ',charsets:{cjk:!0}},{title:"将OpenCore从USB移动到macOS驱动器",frontmatter:{},regularPath:"/universal/oc2hdd.html",relativePath:"universal/oc2hdd.md",key:"v-b82dfbfa",path:"/universal/oc2hdd.html",headers:[{level:2,title:"从USB中抓取OpenCore",slug:"从usb中抓取opencore",normalizedTitle:"从usb中抓取opencore",charIndex:31},{level:2,title:"给老用户的特别提示",slug:"给老用户的特别提示",normalizedTitle:"给老用户的特别提示",charIndex:637}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"从USB中抓取OpenCore 给老用户的特别提示",content:"# 将OpenCore从USB移动到macOS驱动器\n\n\n# 从USB中抓取OpenCore\n\n首先，我们要从安装程序中抓取OpenCore。为此，我们将使用CorpNewt提供的一个名为MountEFI的工具。\n\n在这个例子中，我们假设你的USB名为Install macOS Catalina:\n\n\n\n一旦EFI挂载完毕，我们就需要把EFI文件夹放在那里并保存在一个安全的地方。然后我们要弹出USB驱动器的EFI，因为挂载多个EFI有时会混淆macOS，最佳实践是一次只挂载一个EFI(你可以只弹出EFI，不需要删除驱动器本身)。\n\n注:在Windows上使用gibMacOS的MakeInstall bat制作的安装程序将默认到主引导记录(MBR)分区映射，这意味着没有专用的EFI分区，而是在macOS中默认挂载的Boot分区。\n\n\n\n现在完成这些，让我们挂载macOS驱动器。使用macOS Catalina, macOS实际上被划分为2个卷:系统分区和用户分区。这意味着MountEFI可以在它的选择器中报告多个驱动器，但每个分区仍然共享相同的EFI(UEFI规范只允许每个驱动器一个EFI)。你可以判断它和磁盘XsY是否是同一个驱动器(Y表示它是哪个分区)\n\n\n\n当你挂载主驱动器的EFI时，你可能会看到一个名为APPLE的文件夹，这是用于在真正的mac上更新固件，但对我们的硬件没有影响。你可以擦除EFI分区上的所有东西，用USB上找到的那个替换它\n\n\n# 给老用户的特别提示\n\n当传输EFI时，仍然有引导扇区需要写入，以便您的非uefi BIOS能够找到它。所以不要忘记在你的macOS上重新运行 BootInstallARCH.tool",normalizedContent:"# 将opencore从usb移动到macos驱动器\n\n\n# 从usb中抓取opencore\n\n首先，我们要从安装程序中抓取opencore。为此，我们将使用corpnewt提供的一个名为mountefi的工具。\n\n在这个例子中，我们假设你的usb名为install macos catalina:\n\n\n\n一旦efi挂载完毕，我们就需要把efi文件夹放在那里并保存在一个安全的地方。然后我们要弹出usb驱动器的efi，因为挂载多个efi有时会混淆macos，最佳实践是一次只挂载一个efi(你可以只弹出efi，不需要删除驱动器本身)。\n\n注:在windows上使用gibmacos的makeinstall bat制作的安装程序将默认到主引导记录(mbr)分区映射，这意味着没有专用的efi分区，而是在macos中默认挂载的boot分区。\n\n\n\n现在完成这些，让我们挂载macos驱动器。使用macos catalina, macos实际上被划分为2个卷:系统分区和用户分区。这意味着mountefi可以在它的选择器中报告多个驱动器，但每个分区仍然共享相同的efi(uefi规范只允许每个驱动器一个efi)。你可以判断它和磁盘xsy是否是同一个驱动器(y表示它是哪个分区)\n\n\n\n当你挂载主驱动器的efi时，你可能会看到一个名为apple的文件夹，这是用于在真正的mac上更新固件，但对我们的硬件没有影响。你可以擦除efi分区上的所有东西，用usb上找到的那个替换它\n\n\n# 给老用户的特别提示\n\n当传输efi时，仍然有引导扇区需要写入，以便您的非uefi bios能够找到它。所以不要忘记在你的macos上重新运行 bootinstallarch.tool",charsets:{cjk:!0}},{title:"优化电源管理",frontmatter:{},regularPath:"/universal/pm.html",relativePath:"universal/pm.md",key:"v-75168346",path:"/universal/pm.html",headers:[{level:2,title:"启用X86PlatformPlugin",slug:"启用x86platformplugin",normalizedTitle:"启用x86platformplugin",charIndex:13},{level:2,title:"手动修改电源管理数据",slug:"手动修改电源管理数据",normalizedTitle:"手动修改电源管理数据",charIndex:1175},{level:3,title:"使用CPUFriend",slug:"使用cpufriend",normalizedTitle:"使用cpufriend",charIndex:1284},{level:3,title:"LFM: 低频模式",slug:"lfm-低频模式",normalizedTitle:"lfm: 低频模式",charIndex:1543},{level:3,title:"EPP: 能源性能偏好",slug:"epp-能源性能偏好",normalizedTitle:"epp: 能源性能偏好",charIndex:2408},{level:3,title:"性能偏差",slug:"性能偏差",normalizedTitle:"性能偏差",charIndex:2689},{level:3,title:"清理",slug:"清理",normalizedTitle:"清理",charIndex:2769},{level:2,title:"Sandy 和 Ivy Bridge 电源管理",slug:"sandy-和-ivy-bridge-电源管理",normalizedTitle:"sandy 和 ivy bridge 电源管理",charIndex:146},{level:3,title:"ssdtPRgen故障诊断",slug:"ssdtprgen故障诊断",normalizedTitle:"ssdtprgen故障诊断",charIndex:5014},{level:3,title:"BIOS故障诊断",slug:"bios故障诊断",normalizedTitle:"bios故障诊断",charIndex:5893},{level:2,title:"AMD CPU电源管理",slug:"amd-cpu电源管理",normalizedTitle:"amd cpu电源管理",charIndex:5993}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"启用X86PlatformPlugin 手动修改电源管理数据 使用CPUFriend LFM: 低频模式 EPP: 能源性能偏好 性能偏差 清理 Sandy 和 Ivy Bridge 电源管理 ssdtPRgen故障诊断 BIOS故障诊断 AMD CPU电源管理",content:'# 优化电源管理\n\n\n# 启用X86PlatformPlugin\n\n因此，在我们根据自己的喜好微调电源管理之前，我们需要首先确保加载了Apple的XCPM核心。请注意，仅在Haswell和更新的上支持**，Sandy, Ivy Bridge和AMD cpu的消费者应该参考以下内容:\n\n * Sandy 和 Ivy Bridge 电源管理\n * AMD CPU 电源管理\n\nIvy Bridge 和 Ivy Bridge-E 说明\n\n苹果在macOS Sierra上放弃了对XCPM的支持，所以XCPM只在10.8.5到10.11.6之间被支持。您仍然需要ssdtPRgen。\n\n要在10.11或更早的版本中启用XCPM，只需在引导参数中添加-xcpm。\n\n首先，抓取IORegistryExplorer并查找AppleACPICPU(注意，如果你使用搜索，IORegistryExplorer不会显示任何找到的子服务。一旦你找到了条目，请确保清除搜索框):\n\nXCPM 发现   XCPM 缺失\n          \n\n从左边的图片中可以看到，我们附加了X86PlatformPlugin。这意味着苹果的CPU电源管理驱动程序正在工作(CPU的名称并不重要)。如果您看到与右侧图像类似的内容，则可能存在问题。请务必检查以下内容:\n\n * SSDT-PLUG.aml 在你的config.plist和EFI/OC/ACPI中是否同时存在和启用\n   * 如果你没有这个，请前往开始使用ACPI了解如何制作它\n * 将SSDT-PLUG设置为CPU的第一个线程。你可以通过选择列出的第一个CPU(在我们的例子中是CP00)来进行检查，并确保你在属性中看到这一点:\n\n提示\n\nmacOS 12.3及以上版本不需要SSDT-PLUG。\n\nplugin-type | Number | 0x1\n\n\nX99 说明\n\nXCPM不支持Haswell-E和Broadwell-E，这意味着我们需要将CPU ID伪造成一个支持XCPM的模型:\n\n * Haswell-E:\n   \n   * Kernel -> Emulate:\n     * Cpuid1Data: C3060300 00000000 00000000 00000000\n     * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n * Broadwell-E:\n   \n   * Kernel -> Emulate:\n     * Cpuid1Data: D4060300 00000000 00000000 00000000\n     * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n\n# 手动修改电源管理数据\n\n在大多数情况下，macOS自带的CPU电源管理数据可以直接使用。如果您遇到问题，将SMBIOS更改为更适合您的系统的内容将提供不同的数据，并且可能更适合您的用例。在需要手动调优的情况下，大家可以使用CPUFriend注入修改过的电源管理数据，但如果不知道自己在做什么，可能会严重破坏电源管理。\n\n警告\n\n在大多数情况下，您不必这样做。请更改您的SMBIOS。\n\n提示\n\n这是一个关于如何更改部分电源管理数据的示例。要了解更多信息，请查看CPUFriend的文档.\n\n\n# 使用CPUFriend\n\n首先，我们需要一些东西:\n\n * X86PlatformPlugin 加载\n   * 这意味着Sandy Bridge和AMD cpu不支持\n * CPUFriend\n * CPUFriendFriend\n\n\n# LFM: 低频模式\n\n现在让我们运行CPUFriendFriend.command:\n\n\n\n第一次打开CPUFriendFriend时，会出现一个选择LFM值的提示。这可以看作是CPU的最低值，或者是CPU空闲的最低值。这个值可以极大地帮助睡眠正常工作，因为macOS需要能够轻松地从S3(睡眠)转换到S0(唤醒)。\n\n要确定您的LFM值，您可以:\n\n * 在英特尔的ARK网站上查找TDP-down Frequency\n   * 请注意，大多数cpu没有列出一个值，所以你需要自己确定\n * 或选择推荐值:\n\nGENERATION                              LFM VALUE   COMMENT\nBroadwell+ 笔记本                          08          相当于 800Mhz\nBroadwell+ 桌面                           0A          相当于 1000Mhz\nHaswell/Broadwell HEDT/Server(例如：X99)   0D          相当于 1300Mhz\nSkylake+ HEDT/Server(例如X299)            0C          相当于 1200Mhz\n\n * 注意:LFM值仅在Broadwell和更新的SMBIOS上可用\n * 注2:这些值并不是固定不变的，每台机器都有其独特的特性，所以你需要试验哪种最适合你的硬件\n\n对于这个例子，我们将使用i9 7920x，它具有2.9 GHz的基础时钟，但没有LFM，因此我们将选择1.3 GHz(即。1300 mhz),向上/向下,直到我们找到稳定的方式。\n\n * 请注意，LFM值只是CPU的乘数，因此您需要适当地调整值\n   * 例如。除以100，然后转换为十六进制\n\necho "obase=16; 13" | bc\n\n\n * 请注意，1.3Ghz时我们使用的是13，而不是1.3\n\n\n# EPP: 能源性能偏好\n\n\n\n接下来是能源性能偏好，EPP。这告诉macOS将CPU加速到其完整时钟的速度有多快。00会告诉macOS让CPU尽可能快地运行，而FF会告诉macOS慢慢来，让CPU在更长的一段时间内逐步上升。根据你正在做的事情和机器上的散热，你可能想要设置一个介于两者之间的东西。下面的图表可能会有所帮助:\n\nEPP         速度\n0x00-0x3F   最大性能\n0x40-0x7F   均衡性能\n0x80-0xBF   均衡功率\n0xC0-0xFF   最大节能\n\n注意:只有Skylake和更新的SMBIOS官方支持EPP\n\n\n# 性能偏差\n\n\n\n最后一项是帮助macOS确定你想从你的CPU中获得什么样的整体性能。一般的建议取决于您的具体设置，而试验确实有助于确定最适合您的设置。\n\n\n# 清理\n\n\n\n一旦完成，你将得到一个cpufrienddataprovider.kext和ssdt_data.aml。你可以根据自己的喜好选择，但我建议使用kext变体，以避免在Windows和Linux中进行数据注入时遇到麻烦。\n\n * 注意:CPUFriendDataProvider的加载顺序无关紧要，因为它是一个只有plist的kext\n * 注2:CPUFriend导致的唤醒问题可能是由于不正确的电源管理数据造成的。每个系统都是唯一的，所以你需要尝试，直到你得到一个稳定的配置。内核崩溃将显示Sleep Wake failure in efi.重用旧版本macOS的电源管理数据也会导致问题，所以如果你更新macOS，请重新创建你的数据。您可以创建多个数据并使用OpenCore的MinKernel/MaxKernel功能，以便为每个macOS版本加载不同的电源管理数据。\n * 注3:如果您选择使用ssdt_data.ml，请注意SSDT-PLUG不再需要。但是这个SSDT的设置在像X99和X299这样的HEDT平台上是有问题的，所以我们强烈推荐使用CPUFriendDataProvider的SSDT-plug.kext代替。\n\n\n# Sandy 和 Ivy Bridge 电源管理\n\n在Sandy和Ivy Bridge事件中，消费者电脑与苹果XCPM的连接出现了问题。所以为了解决这个问题我们需要创建自己的电源管理表。\n\n我们需要:\n\n * 确保CpuPm和Cpu0Ist表不会被删除\n * ssdtPRGen\n\n最初，在Ivy Bridge部分的设置中，我们建议用户删除他们的CpuPm和Cpu0Ist，以避免AppleIntelCPUPowerManagement.kext的任何问题。但删除这些表会对Windows中的turbo boost产生不利影响。因此，为了解决这个问题，我们希望保留OEM的表，但我们希望添加一个新表，以补充仅针对macOS的数据。所以一旦我们完成创建CPU-PM表,我们会重新添加OEM的CPU ssdt。\n\n首先，获取您的config.plist，然后转到ACPI -> Delete，并确保这两个部分的Enabled设置为“YES”:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Drop CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\nKey              Type      Value\n:---             :---      :---\nAll              Boolean   YES\nComment          String    Drop Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n完成后，重新启动，然后获取ssdtPRGen并运行它:\n\n\n\n完成后，你将在/Users/your-name>/Library/ssdtPRGen/ssdt.dsl下得到一个SSDT.aml, 你可以用快捷键Cmd+Shift+G，然后粘贴~/Library/ssdtPRGen/找到它。\n\n\n\n记住现在将它添加到EFI/OC/ACPI和您的config.plist中，我建议将它重命名为SSDT-PM以更容易找到它。\n\n最后，我们可以禁用之前的ACPI -> Delete条目(\' Enabled \'设置为NO):\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Drop CpuPm\nEnabled          Boolean   NO\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\nKey              Type      Value\n:---             :---      :---\nAll              Boolean   YES\nComment          String    Drop Cpu0Ist\nEnabled          Boolean   NO\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# ssdtPRgen故障诊断\n\n虽然ssdtPRgen试图处理与OEM的SSDT的任何不兼容问题，但您可能会发现它在启动时仍然冲突，因为您的OEM已经在_INI或_DSM等部分声明了某些设备或方法。\n\n如果你在启动过程中发现，你会从SSDT-PM得到类似这样的错误:\n\nACPI Error: Method parse/execution failed [\\_SB._INI] , AE_ALREADY_EXIST\n\n\n这意味着存在一些冲突，为了解决这个问题，我们建议将ssdtPRgen的信息转换成如下格式:\n\nDefinitionBlock ("ssdt.aml", "SSDT", 1, "APPLE ", "CpuPm", 0x00021500)\n{\n    External (\\_PR_.CPU0, DeviceObj) // External Processor definition\n    External (\\_PR_.CPU1, DeviceObj) // External Processor definition\n\n    Scope (\\_PR_.CPU0) // Processor\'s scope\n    {\n        Name (APLF, Zero)\n        Name (APSN, 0x04)\n        Name (APSS, Package (0x20)\n        {\n            /*  … */\n        })\n\n        Method (ACST, 0, NotSerialized)\n        {\n            /*  … */\n        }\n\n        /*  … */\n    }\n\n\n请密切关注我们所做的事情:\n\n * 确保 Processor 对象被移动到 external\n * 将所有 methods 移动到 Processor\'s scope 内\n\n要编辑和重新编译SSDT-PM，请参阅这里:开始使用ACPI\n\n\n# BIOS故障诊断\n\n对于某些主板，可能需要确保为CPU电源管理设置了以下BIOS选项:\n\n * C States: True\n * P States Coordination: SW_ALL\n\n\n# AMD CPU电源管理\n\n虽然macOS可能没有正式支持AMD CPU电源管理，但社区正在努力添加它，特别是AMDRyzenCPUPowerManagement.\n\n警告:这个kext是不稳定的，如果你随机收到内核崩溃或启动问题，请记住这个kext可能是罪魁祸首。',normalizedContent:'# 优化电源管理\n\n\n# 启用x86platformplugin\n\n因此，在我们根据自己的喜好微调电源管理之前，我们需要首先确保加载了apple的xcpm核心。请注意，仅在haswell和更新的上支持**，sandy, ivy bridge和amd cpu的消费者应该参考以下内容:\n\n * sandy 和 ivy bridge 电源管理\n * amd cpu 电源管理\n\nivy bridge 和 ivy bridge-e 说明\n\n苹果在macos sierra上放弃了对xcpm的支持，所以xcpm只在10.8.5到10.11.6之间被支持。您仍然需要ssdtprgen。\n\n要在10.11或更早的版本中启用xcpm，只需在引导参数中添加-xcpm。\n\n首先，抓取ioregistryexplorer并查找appleacpicpu(注意，如果你使用搜索，ioregistryexplorer不会显示任何找到的子服务。一旦你找到了条目，请确保清除搜索框):\n\nxcpm 发现   xcpm 缺失\n          \n\n从左边的图片中可以看到，我们附加了x86platformplugin。这意味着苹果的cpu电源管理驱动程序正在工作(cpu的名称并不重要)。如果您看到与右侧图像类似的内容，则可能存在问题。请务必检查以下内容:\n\n * ssdt-plug.aml 在你的config.plist和efi/oc/acpi中是否同时存在和启用\n   * 如果你没有这个，请前往开始使用acpi了解如何制作它\n * 将ssdt-plug设置为cpu的第一个线程。你可以通过选择列出的第一个cpu(在我们的例子中是cp00)来进行检查，并确保你在属性中看到这一点:\n\n提示\n\nmacos 12.3及以上版本不需要ssdt-plug。\n\nplugin-type | number | 0x1\n\n\nx99 说明\n\nxcpm不支持haswell-e和broadwell-e，这意味着我们需要将cpu id伪造成一个支持xcpm的模型:\n\n * haswell-e:\n   \n   * kernel -> emulate:\n     * cpuid1data: c3060300 00000000 00000000 00000000\n     * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n * broadwell-e:\n   \n   * kernel -> emulate:\n     * cpuid1data: d4060300 00000000 00000000 00000000\n     * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n\n# 手动修改电源管理数据\n\n在大多数情况下，macos自带的cpu电源管理数据可以直接使用。如果您遇到问题，将smbios更改为更适合您的系统的内容将提供不同的数据，并且可能更适合您的用例。在需要手动调优的情况下，大家可以使用cpufriend注入修改过的电源管理数据，但如果不知道自己在做什么，可能会严重破坏电源管理。\n\n警告\n\n在大多数情况下，您不必这样做。请更改您的smbios。\n\n提示\n\n这是一个关于如何更改部分电源管理数据的示例。要了解更多信息，请查看cpufriend的文档.\n\n\n# 使用cpufriend\n\n首先，我们需要一些东西:\n\n * x86platformplugin 加载\n   * 这意味着sandy bridge和amd cpu不支持\n * cpufriend\n * cpufriendfriend\n\n\n# lfm: 低频模式\n\n现在让我们运行cpufriendfriend.command:\n\n\n\n第一次打开cpufriendfriend时，会出现一个选择lfm值的提示。这可以看作是cpu的最低值，或者是cpu空闲的最低值。这个值可以极大地帮助睡眠正常工作，因为macos需要能够轻松地从s3(睡眠)转换到s0(唤醒)。\n\n要确定您的lfm值，您可以:\n\n * 在英特尔的ark网站上查找tdp-down frequency\n   * 请注意，大多数cpu没有列出一个值，所以你需要自己确定\n * 或选择推荐值:\n\ngeneration                              lfm value   comment\nbroadwell+ 笔记本                          08          相当于 800mhz\nbroadwell+ 桌面                           0a          相当于 1000mhz\nhaswell/broadwell hedt/server(例如：x99)   0d          相当于 1300mhz\nskylake+ hedt/server(例如x299)            0c          相当于 1200mhz\n\n * 注意:lfm值仅在broadwell和更新的smbios上可用\n * 注2:这些值并不是固定不变的，每台机器都有其独特的特性，所以你需要试验哪种最适合你的硬件\n\n对于这个例子，我们将使用i9 7920x，它具有2.9 ghz的基础时钟，但没有lfm，因此我们将选择1.3 ghz(即。1300 mhz),向上/向下,直到我们找到稳定的方式。\n\n * 请注意，lfm值只是cpu的乘数，因此您需要适当地调整值\n   * 例如。除以100，然后转换为十六进制\n\necho "obase=16; 13" | bc\n\n\n * 请注意，1.3ghz时我们使用的是13，而不是1.3\n\n\n# epp: 能源性能偏好\n\n\n\n接下来是能源性能偏好，epp。这告诉macos将cpu加速到其完整时钟的速度有多快。00会告诉macos让cpu尽可能快地运行，而ff会告诉macos慢慢来，让cpu在更长的一段时间内逐步上升。根据你正在做的事情和机器上的散热，你可能想要设置一个介于两者之间的东西。下面的图表可能会有所帮助:\n\nepp         速度\n0x00-0x3f   最大性能\n0x40-0x7f   均衡性能\n0x80-0xbf   均衡功率\n0xc0-0xff   最大节能\n\n注意:只有skylake和更新的smbios官方支持epp\n\n\n# 性能偏差\n\n\n\n最后一项是帮助macos确定你想从你的cpu中获得什么样的整体性能。一般的建议取决于您的具体设置，而试验确实有助于确定最适合您的设置。\n\n\n# 清理\n\n\n\n一旦完成，你将得到一个cpufrienddataprovider.kext和ssdt_data.aml。你可以根据自己的喜好选择，但我建议使用kext变体，以避免在windows和linux中进行数据注入时遇到麻烦。\n\n * 注意:cpufrienddataprovider的加载顺序无关紧要，因为它是一个只有plist的kext\n * 注2:cpufriend导致的唤醒问题可能是由于不正确的电源管理数据造成的。每个系统都是唯一的，所以你需要尝试，直到你得到一个稳定的配置。内核崩溃将显示sleep wake failure in efi.重用旧版本macos的电源管理数据也会导致问题，所以如果你更新macos，请重新创建你的数据。您可以创建多个数据并使用opencore的minkernel/maxkernel功能，以便为每个macos版本加载不同的电源管理数据。\n * 注3:如果您选择使用ssdt_data.ml，请注意ssdt-plug不再需要。但是这个ssdt的设置在像x99和x299这样的hedt平台上是有问题的，所以我们强烈推荐使用cpufrienddataprovider的ssdt-plug.kext代替。\n\n\n# sandy 和 ivy bridge 电源管理\n\n在sandy和ivy bridge事件中，消费者电脑与苹果xcpm的连接出现了问题。所以为了解决这个问题我们需要创建自己的电源管理表。\n\n我们需要:\n\n * 确保cpupm和cpu0ist表不会被删除\n * ssdtprgen\n\n最初，在ivy bridge部分的设置中，我们建议用户删除他们的cpupm和cpu0ist，以避免appleintelcpupowermanagement.kext的任何问题。但删除这些表会对windows中的turbo boost产生不利影响。因此，为了解决这个问题，我们希望保留oem的表，但我们希望添加一个新表，以补充仅针对macos的数据。所以一旦我们完成创建cpu-pm表,我们会重新添加oem的cpu ssdt。\n\n首先，获取您的config.plist，然后转到acpi -> delete，并确保这两个部分的enabled设置为“yes”:\n\nkey              type      value\nall              boolean   yes\ncomment          string    drop cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\nkey              type      value\n:---             :---      :---\nall              boolean   yes\ncomment          string    drop cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n完成后，重新启动，然后获取ssdtprgen并运行它:\n\n\n\n完成后，你将在/users/your-name>/library/ssdtprgen/ssdt.dsl下得到一个ssdt.aml, 你可以用快捷键cmd+shift+g，然后粘贴~/library/ssdtprgen/找到它。\n\n\n\n记住现在将它添加到efi/oc/acpi和您的config.plist中，我建议将它重命名为ssdt-pm以更容易找到它。\n\n最后，我们可以禁用之前的acpi -> delete条目(\' enabled \'设置为no):\n\nkey              type      value\nall              boolean   yes\ncomment          string    drop cpupm\nenabled          boolean   no\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\nkey              type      value\n:---             :---      :---\nall              boolean   yes\ncomment          string    drop cpu0ist\nenabled          boolean   no\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# ssdtprgen故障诊断\n\n虽然ssdtprgen试图处理与oem的ssdt的任何不兼容问题，但您可能会发现它在启动时仍然冲突，因为您的oem已经在_ini或_dsm等部分声明了某些设备或方法。\n\n如果你在启动过程中发现，你会从ssdt-pm得到类似这样的错误:\n\nacpi error: method parse/execution failed [\\_sb._ini] , ae_already_exist\n\n\n这意味着存在一些冲突，为了解决这个问题，我们建议将ssdtprgen的信息转换成如下格式:\n\ndefinitionblock ("ssdt.aml", "ssdt", 1, "apple ", "cpupm", 0x00021500)\n{\n    external (\\_pr_.cpu0, deviceobj) // external processor definition\n    external (\\_pr_.cpu1, deviceobj) // external processor definition\n\n    scope (\\_pr_.cpu0) // processor\'s scope\n    {\n        name (aplf, zero)\n        name (apsn, 0x04)\n        name (apss, package (0x20)\n        {\n            /*  … */\n        })\n\n        method (acst, 0, notserialized)\n        {\n            /*  … */\n        }\n\n        /*  … */\n    }\n\n\n请密切关注我们所做的事情:\n\n * 确保 processor 对象被移动到 external\n * 将所有 methods 移动到 processor\'s scope 内\n\n要编辑和重新编译ssdt-pm，请参阅这里:开始使用acpi\n\n\n# bios故障诊断\n\n对于某些主板，可能需要确保为cpu电源管理设置了以下bios选项:\n\n * c states: true\n * p states coordination: sw_all\n\n\n# amd cpu电源管理\n\n虽然macos可能没有正式支持amd cpu电源管理，但社区正在努力添加它，特别是amdryzencpupowermanagement.\n\n警告:这个kext是不稳定的，如果你随机收到内核崩溃或启动问题，请记住这个kext可能是罪魁祸首。',charsets:{cjk:!0}},{title:"安全性和FileVault",frontmatter:{},regularPath:"/universal/security.html",relativePath:"universal/security.md",key:"v-39419617",path:"/universal/security.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# 安全性和FileVault\n\n所以让OpenCore真正与众不同的是它在构建时就考虑到了安全性，这在Hackintosh社区中是非常罕见的。在这里，我们将介绍并设置一些OpenCore的伟大安全功能:\n\n * FileVault\n   * 苹果内置的硬盘加密\n * Vault\n   * OpenCore的半安全引导，用于对OpenCore进行快照，以便不会发生不必要的更改\n * ScanPolicy\n   * OpenCore的驱动器策略，确定在OpenCore的启动菜单中显示什么类型的磁盘\n * OpenCore Password Setup\n   * 在OpenCore启动菜单中启用密码\n * Apple Secure Boot\n   * 苹果在macOS内核中的安全引导变种",normalizedContent:"# 安全性和filevault\n\n所以让opencore真正与众不同的是它在构建时就考虑到了安全性，这在hackintosh社区中是非常罕见的。在这里，我们将介绍并设置一些opencore的伟大安全功能:\n\n * filevault\n   * 苹果内置的硬盘加密\n * vault\n   * opencore的半安全引导，用于对opencore进行快照，以便不会发生不必要的更改\n * scanpolicy\n   * opencore的驱动器策略，确定在opencore的启动菜单中显示什么类型的磁盘\n * opencore password setup\n   * 在opencore启动菜单中启用密码\n * apple secure boot\n   * 苹果在macos内核中的安全引导变种",charsets:{cjk:!0}},{title:"Apple Secure Boot",frontmatter:{},regularPath:"/universal/security/applesecureboot.html",relativePath:"universal/security/applesecureboot.md",key:"v-575976af",path:"/universal/security/applesecureboot.html",headers:[{level:2,title:"What is Apple Secure Boot",slug:"what-is-apple-secure-boot",normalizedTitle:"what is apple secure boot",charIndex:192},{level:2,title:"DmgLoading",slug:"dmgloading",normalizedTitle:"dmgloading",charIndex:30},{level:2,title:"SecureBootModel",slug:"securebootmodel",normalizedTitle:"securebootmodel",charIndex:42},{level:3,title:"Special Notes with SecureBootModel",slug:"special-notes-with-securebootmodel",normalizedTitle:"special notes with securebootmodel",charIndex:3940},{level:2,title:"ApECID",slug:"apecid",normalizedTitle:"apecid",charIndex:62}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"What is Apple Secure Boot DmgLoading SecureBootModel Special Notes with SecureBootModel ApECID",content:"# Apple Secure Boot\n\n * Note: DmgLoading, SecureBootModel and ApECID require OpenCore 0.6.1 or newer\n * Note 2: macOS Big Sur requires OpenCore 0.6.3+ for proper Apple Secure Boot support\n\n\n# What is Apple Secure Boot\n\n * Information based off of vit9696's thread, Apple's T2 docs and Osy's Secure Boot page\n\nTo best understand Apple Secure Boot, lets take a look at how the boot process works in Macs vs OpenCore in regards to security:\n\n\n\nAs we can see, there's several layers of trust incorporated into Apple Secure Boot:\n\n * OpenCore will verify the boot.efi manifest (e.g. boot.efi.j137ap.im4m) to ensure that boot.efi was signed by Apple and can be used by this Secure Boot model.\n   \n   * For non-zero ApECID, OpenCore will additionally verify the ECID value, written in the boot.efi manifest (e.g. boot.efi.j137ap.XXXXXXXX.im4m), to ensure that a compromised hard drive from a different machine with the same Secure Boot model cannot be used in your computer.\n\n * boot.efi will verify the kernelcache to ensure it has not been tampered with\n\n * apfs.kext and AppleImage4 ensure your System Volume's snapshot has not been tampered with(Only applicable with Big Sur+)\n\nNot all of these verifications are required to boot, but they're all possible for those who want maximum security. Currently information regarding firmware-based Secure Boot is not covered however all Apple Secure Boot options are detailed below.\n\n\n# DmgLoading\n\nQuite a simple setting however important in regards to Apple Secure Boot. This setting allows you to set load policy with DMGs in OpenCore. By default we recommend using Signed however for best security Disabled may be preferred.\n\nPossible options for Misc -> Security -> DmgLoading:\n\nVALUE      COMMENT\nAny        Allows all DMGs to load in OpenCore, however this option\n           will cause a boot failure if Apple Secure Boot is enabled\nSigned     Allows only Apple-signed DMGs like macOS installers to load\nDisabled   Disables all external DMG loading, however internal recovery\n           is still allowed with this option\n\n\n# SecureBootModel\n\nSecureBootModel is used set the Apple Secure Boot hardware model and policy, allowing us to enable Apple's Secure Boot with any SMBIOS even if the original SMBIOS did not support it(ie. no T2 present on pre-2017 SMBIOS). Enabling SecureBootModel is the equivalent of \"Medium Security\", for Full Security please see ApECID\n\nCurrently the following options for Misc -> Security -> SecureBootModel are supported:\n\nVALUE       SMBIOS                                     MINIMUM MACOS VERSION\nDisabled    No model, Secure Boot will be disabled.    N/A\nDefault     Currently set to x86legacy                 11.0.1 (20B29)\nj137        iMacPro1,1 (December 2017)                 10.13.2 (17C2111)\nj680        MacBookPro15,1 (July 2018)                 10.13.6 (17G2112)\nj132        MacBookPro15,2 (July 2018)                 10.13.6 (17G2112)\nj174        Macmini8,1 (October 2018)                  10.14 (18A2063)\nj140k       MacBookAir8,1 (October 2018)               10.14.1 (18B2084)\nj780        MacBookPro15,3 (May 2019)                  10.14.5 (18F132)\nj213        MacBookPro15,4 (July 2019)                 10.14.5 (18F2058)\nj140a       MacBookAir8,2 (July 2019)                  10.14.5 (18F2058)\nj152f       MacBookPro16,1 (November 2019)             10.15.1 (19B2093)\nj160        MacPro7,1 (December 2019)                  10.15.1 (19B88)\nj230k       MacBookAir9,1 (March 2020)                 10.15.3 (19D2064)\nj214k       MacBookPro16,2 (May 2020)                  10.15.4 (19E2269)\nj223        MacBookPro16,3 (May 2020)                  10.15.4 (19E2265)\nj215        MacBookPro16,4 (June 2020)                 10.15.5 (19F96)\nj185        iMac20,1 (August 2020)                     10.15.6 (19G2005)\nj185f       iMac20,2 (August 2020)                     10.15.6 (19G2005)\nx86legacy   Non-T2 Macs in 11.0(Recommended for VMs)   11.0.1 (20B29)\n\n\n# Special Notes with SecureBootModel\n\n * The Default value is not recommended as if you plan to use this with ApECID for full security, we recommend setting a proper value (i.e. closest to your SMBIOS or versions of macOS you plan to boot) since the Default value is likely to be updated in the future.\n   * In addition, Default is set to x86legacy which will breaking booting High Sierra through Catalina.\n   * x86legacy is not required for normal Mac models without T2's, any of the above values are supported.\n * The list of cached drivers may be different, resulting in the need to change the list of Added or Forced kernel drivers.\n   * ie. IO80211Family cannot be injected in this case, as it is already present in the kernelcache\n * Unsigned and several signed kernel drivers cannot be used\n   * This includes Nvidia's Web Drivers in 10.13\n * System volume alterations on operating systems with sealing, like macOS 11, may result in the operating system being unbootable.\n   * If you plan to disable macOS's APFS snapshots, please remember to disable SecureBootModel as well\n * Certain boot errors are more likely to be triggered with Secure Boot enabled that were previously not required\n   * Commonly seen with certain APTIO IV systems where they may not require IgnoreInvalidFlexRatio and HashServices initially however Secure Boot does.\n * On older CPUs (ie. before Sandy Bridge) enabling Apple Secure Boot might cause slightly slower loading by up to 1 second\n * Operating systems released before Apple Secure Boot landed (ie. macOS 10.12 or earlier) will still boot until UEFI Secure Boot is enabled. This is so,\n   * This is due to Apple Secure Boot assuming they are incompatible and will be handled by the firmware just like Microsoft Windows is\n * Virtual Machines will want to use x86legacy for Secure Boot support\n   * Note using any other model will require ForceSecureBootScheme enabled\n\nTroubleshooting\n\nDue to an annoying bug on Apple's end, certain systems may be missing the secure boot files themselves on the drive. Because of this, you may get issues such as:\n\nOCB: LoadImage failed - Security Violation\n\n\nTo resolve, run the following in macOS:\n\n# First, find your Preboot volume\ndiskutil list\n\n# From the below list, we can see our Preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n# Now mount the Preboot volume\ndiskutil mount disk5s2\n\n# CD into your Preboot volume\n# Note the actual volume is under /System/Volumes/Preboot in macOS\n# however in Recovery it's simply under /Volumes/Preboot\ncd /System/Volumes/Preboot\n\n# Grab your UUID\nls\n 46923F6E-968E-46E9-AC6D-9E6141DF52FD\n CD844C38-1A25-48D5-9388-5D62AA46CFB8\n\n# If multiple show up(ie. you dual boot multiple versions of macOS), you will\n# need to determine which UUID is correct.\n# Easiest way to determine is printing the value of .disk_label.contentDetails\n# of each volume.\ncat ./46923F6E-968E-46E9-AC6D-9E6141DF52FD/System/Library/CoreServices/.disk_label.contentDetails\n Big Sur HD%\n\ncat ./CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices/.disk_label.contentDetails\n Catalina HD%\n\n# Next lets copy over the secure boot files, recovery will need different commands\n\n# Example commands for inside macOS\n# Replace CD844C38-1A25-48D5-9388-5D62AA46CFB8 with your UUID value\ncd ~\nsudo cp -a /usr/standalone/i386/. /System/Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n# Example commands for Recovery\n# Replace Macintosh\\ HD and CD844C38-1A25-48D5-9388-5D62AA46CFB8 with\n# your System Volume's name and Preboot's UUID\ncp -a /Volumes/Macintosh\\ HD/usr/standalone/i386/. /Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n\nNow you can enable SecureBootModel and reboot without issue! And since we're not editing the system volume itself we don't need to worry about disabling SIP or breaking macOS snapshots.\n\n\n# ApECID\n\nApECID is used as an Apple Enclave Identifier, what this means is it allows us to use personalized Apple Secure Boot identifiers and achieve \"Full Security\" as per Apple's secure boot page(when paired with SecureBootModel).\n\nTo generate your own ApECID value, you'll want some form of cryptographically secure random number generator that will output a 64-bit integer. Below we provide an example that can be run if Python 3 is installed on your machine:\n\npython3 -c 'import secrets; print(secrets.randbits(64))'\n\n\nWith this unique 64-bit int, you can now enter it under Misc -> ApECID in your config.plist\n\nHowever before setting ApECID, there's a few things we need to note:\n\n * Fresh installs with ApECID set to a non-zero value will require a network connection at install time for verification\n * SecureBootModel should have a defined value instead of Default to avoid issues if the value were to change in later OpenCore versions.\n * Pre-existing installs will need to personalize the volume, for this you'll need to first reboot into recovery and run the following command(Replace Macintosh HD with your system's volume name):\n\n# Run this command after setting your ApECID value\n# You'll also need an active network connection in recovery to run this command\nbless --folder \"/Volumes/Macintosh HD/System/Library/CoreServices\" --bootefi --personalize\n\n\nAnd something to note when reinstalling macOS 10.15 or older is that you may receive \"Unable to verify macOS\" error message. To work around this issue, you'll want to allocate a dedicated RAM disk of 2 MBs for macOS personalization by entering the following commands in the macOS recovery terminal before starting the installation:\n\ndisk=$(hdiutil attach -nomount ram://4096)\ndiskutil erasevolume HFS+ SecureBoot $disk\ndiskutil unmount $disk\nmkdir /var/tmp/OSPersonalizationTemp\ndiskutil mount -mountpoint /var/tmp/OSPersonalizationTemp $disk\n",normalizedContent:"# apple secure boot\n\n * note: dmgloading, securebootmodel and apecid require opencore 0.6.1 or newer\n * note 2: macos big sur requires opencore 0.6.3+ for proper apple secure boot support\n\n\n# what is apple secure boot\n\n * information based off of vit9696's thread, apple's t2 docs and osy's secure boot page\n\nto best understand apple secure boot, lets take a look at how the boot process works in macs vs opencore in regards to security:\n\n\n\nas we can see, there's several layers of trust incorporated into apple secure boot:\n\n * opencore will verify the boot.efi manifest (e.g. boot.efi.j137ap.im4m) to ensure that boot.efi was signed by apple and can be used by this secure boot model.\n   \n   * for non-zero apecid, opencore will additionally verify the ecid value, written in the boot.efi manifest (e.g. boot.efi.j137ap.xxxxxxxx.im4m), to ensure that a compromised hard drive from a different machine with the same secure boot model cannot be used in your computer.\n\n * boot.efi will verify the kernelcache to ensure it has not been tampered with\n\n * apfs.kext and appleimage4 ensure your system volume's snapshot has not been tampered with(only applicable with big sur+)\n\nnot all of these verifications are required to boot, but they're all possible for those who want maximum security. currently information regarding firmware-based secure boot is not covered however all apple secure boot options are detailed below.\n\n\n# dmgloading\n\nquite a simple setting however important in regards to apple secure boot. this setting allows you to set load policy with dmgs in opencore. by default we recommend using signed however for best security disabled may be preferred.\n\npossible options for misc -> security -> dmgloading:\n\nvalue      comment\nany        allows all dmgs to load in opencore, however this option\n           will cause a boot failure if apple secure boot is enabled\nsigned     allows only apple-signed dmgs like macos installers to load\ndisabled   disables all external dmg loading, however internal recovery\n           is still allowed with this option\n\n\n# securebootmodel\n\nsecurebootmodel is used set the apple secure boot hardware model and policy, allowing us to enable apple's secure boot with any smbios even if the original smbios did not support it(ie. no t2 present on pre-2017 smbios). enabling securebootmodel is the equivalent of \"medium security\", for full security please see apecid\n\ncurrently the following options for misc -> security -> securebootmodel are supported:\n\nvalue       smbios                                     minimum macos version\ndisabled    no model, secure boot will be disabled.    n/a\ndefault     currently set to x86legacy                 11.0.1 (20b29)\nj137        imacpro1,1 (december 2017)                 10.13.2 (17c2111)\nj680        macbookpro15,1 (july 2018)                 10.13.6 (17g2112)\nj132        macbookpro15,2 (july 2018)                 10.13.6 (17g2112)\nj174        macmini8,1 (october 2018)                  10.14 (18a2063)\nj140k       macbookair8,1 (october 2018)               10.14.1 (18b2084)\nj780        macbookpro15,3 (may 2019)                  10.14.5 (18f132)\nj213        macbookpro15,4 (july 2019)                 10.14.5 (18f2058)\nj140a       macbookair8,2 (july 2019)                  10.14.5 (18f2058)\nj152f       macbookpro16,1 (november 2019)             10.15.1 (19b2093)\nj160        macpro7,1 (december 2019)                  10.15.1 (19b88)\nj230k       macbookair9,1 (march 2020)                 10.15.3 (19d2064)\nj214k       macbookpro16,2 (may 2020)                  10.15.4 (19e2269)\nj223        macbookpro16,3 (may 2020)                  10.15.4 (19e2265)\nj215        macbookpro16,4 (june 2020)                 10.15.5 (19f96)\nj185        imac20,1 (august 2020)                     10.15.6 (19g2005)\nj185f       imac20,2 (august 2020)                     10.15.6 (19g2005)\nx86legacy   non-t2 macs in 11.0(recommended for vms)   11.0.1 (20b29)\n\n\n# special notes with securebootmodel\n\n * the default value is not recommended as if you plan to use this with apecid for full security, we recommend setting a proper value (i.e. closest to your smbios or versions of macos you plan to boot) since the default value is likely to be updated in the future.\n   * in addition, default is set to x86legacy which will breaking booting high sierra through catalina.\n   * x86legacy is not required for normal mac models without t2's, any of the above values are supported.\n * the list of cached drivers may be different, resulting in the need to change the list of added or forced kernel drivers.\n   * ie. io80211family cannot be injected in this case, as it is already present in the kernelcache\n * unsigned and several signed kernel drivers cannot be used\n   * this includes nvidia's web drivers in 10.13\n * system volume alterations on operating systems with sealing, like macos 11, may result in the operating system being unbootable.\n   * if you plan to disable macos's apfs snapshots, please remember to disable securebootmodel as well\n * certain boot errors are more likely to be triggered with secure boot enabled that were previously not required\n   * commonly seen with certain aptio iv systems where they may not require ignoreinvalidflexratio and hashservices initially however secure boot does.\n * on older cpus (ie. before sandy bridge) enabling apple secure boot might cause slightly slower loading by up to 1 second\n * operating systems released before apple secure boot landed (ie. macos 10.12 or earlier) will still boot until uefi secure boot is enabled. this is so,\n   * this is due to apple secure boot assuming they are incompatible and will be handled by the firmware just like microsoft windows is\n * virtual machines will want to use x86legacy for secure boot support\n   * note using any other model will require forcesecurebootscheme enabled\n\ntroubleshooting\n\ndue to an annoying bug on apple's end, certain systems may be missing the secure boot files themselves on the drive. because of this, you may get issues such as:\n\nocb: loadimage failed - security violation\n\n\nto resolve, run the following in macos:\n\n# first, find your preboot volume\ndiskutil list\n\n# from the below list, we can see our preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n# now mount the preboot volume\ndiskutil mount disk5s2\n\n# cd into your preboot volume\n# note the actual volume is under /system/volumes/preboot in macos\n# however in recovery it's simply under /volumes/preboot\ncd /system/volumes/preboot\n\n# grab your uuid\nls\n 46923f6e-968e-46e9-ac6d-9e6141df52fd\n cd844c38-1a25-48d5-9388-5d62aa46cfb8\n\n# if multiple show up(ie. you dual boot multiple versions of macos), you will\n# need to determine which uuid is correct.\n# easiest way to determine is printing the value of .disk_label.contentdetails\n# of each volume.\ncat ./46923f6e-968e-46e9-ac6d-9e6141df52fd/system/library/coreservices/.disk_label.contentdetails\n big sur hd%\n\ncat ./cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices/.disk_label.contentdetails\n catalina hd%\n\n# next lets copy over the secure boot files, recovery will need different commands\n\n# example commands for inside macos\n# replace cd844c38-1a25-48d5-9388-5d62aa46cfb8 with your uuid value\ncd ~\nsudo cp -a /usr/standalone/i386/. /system/volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n# example commands for recovery\n# replace macintosh\\ hd and cd844c38-1a25-48d5-9388-5d62aa46cfb8 with\n# your system volume's name and preboot's uuid\ncp -a /volumes/macintosh\\ hd/usr/standalone/i386/. /volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n\nnow you can enable securebootmodel and reboot without issue! and since we're not editing the system volume itself we don't need to worry about disabling sip or breaking macos snapshots.\n\n\n# apecid\n\napecid is used as an apple enclave identifier, what this means is it allows us to use personalized apple secure boot identifiers and achieve \"full security\" as per apple's secure boot page(when paired with securebootmodel).\n\nto generate your own apecid value, you'll want some form of cryptographically secure random number generator that will output a 64-bit integer. below we provide an example that can be run if python 3 is installed on your machine:\n\npython3 -c 'import secrets; print(secrets.randbits(64))'\n\n\nwith this unique 64-bit int, you can now enter it under misc -> apecid in your config.plist\n\nhowever before setting apecid, there's a few things we need to note:\n\n * fresh installs with apecid set to a non-zero value will require a network connection at install time for verification\n * securebootmodel should have a defined value instead of default to avoid issues if the value were to change in later opencore versions.\n * pre-existing installs will need to personalize the volume, for this you'll need to first reboot into recovery and run the following command(replace macintosh hd with your system's volume name):\n\n# run this command after setting your apecid value\n# you'll also need an active network connection in recovery to run this command\nbless --folder \"/volumes/macintosh hd/system/library/coreservices\" --bootefi --personalize\n\n\nand something to note when reinstalling macos 10.15 or older is that you may receive \"unable to verify macos\" error message. to work around this issue, you'll want to allocate a dedicated ram disk of 2 mbs for macos personalization by entering the following commands in the macos recovery terminal before starting the installation:\n\ndisk=$(hdiutil attach -nomount ram://4096)\ndiskutil erasevolume hfs+ secureboot $disk\ndiskutil unmount $disk\nmkdir /var/tmp/ospersonalizationtemp\ndiskutil mount -mountpoint /var/tmp/ospersonalizationtemp $disk\n",charsets:{}},{title:"FileVault",frontmatter:{},regularPath:"/universal/security/filevault.html",relativePath:"universal/security/filevault.md",key:"v-22f73089",path:"/universal/security/filevault.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# FileVault\n\nFileVault is macOS's builtin drive encryption, and with OpenCore support for it has been drastically improved compared to the legacy Clover drivers.\n\nTo start, you'll need the following .efi drivers:\n\n * OpenRuntime.efi\n   * OpenUsbKbDxe.efi for DuetPkg users(systems without UEFI support)\n\nDo not use VirtualSMC.efi with OpenCore, its already baked inside. You do however require VirtualSMC.kext still\n\nSetting in your config.plist:\n\n * Misc -> Boot\n   * PollAppleHotKeys set to YES(While not needed can be helpful)\n * Misc -> Security\n   * AuthRestart set to YES(Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional)\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n   * UIScale set to 02 for high resolution small displays\n * UEFI -> Input\n   * KeySupport set to YES(Only when using OpenCore's builtin input, users of OpenUsbKbDxe should avoid)\n * UEFI -> Output\n   * ProvideConsoleGop to YES\n * UEFI -> ProtocolOverrides\n   * FirmwareVolume set to YES\n   * HashServices set to YES for Broadwell and older(this includes X99), this is needed for systems with broken SHA-1 hashing\n * UEFI -> Quirks\n   * RequestBootVarRouting set to YES\n   * ExitBootServicesDelay set to 3000-5000 if you receive Still waiting for root device on Aptio IV firmwares(Broadwell and older)\n\nWith all this, you can proceed to enable FileVault like on a normal mac under System Preferences -> Security & Privacy -> FileVault\n\nFor UI issues, see Fixing Resolution and Verbose",normalizedContent:"# filevault\n\nfilevault is macos's builtin drive encryption, and with opencore support for it has been drastically improved compared to the legacy clover drivers.\n\nto start, you'll need the following .efi drivers:\n\n * openruntime.efi\n   * openusbkbdxe.efi for duetpkg users(systems without uefi support)\n\ndo not use virtualsmc.efi with opencore, its already baked inside. you do however require virtualsmc.kext still\n\nsetting in your config.plist:\n\n * misc -> boot\n   * pollapplehotkeys set to yes(while not needed can be helpful)\n * misc -> security\n   * authrestart set to yes(enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional)\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n   * uiscale set to 02 for high resolution small displays\n * uefi -> input\n   * keysupport set to yes(only when using opencore's builtin input, users of openusbkbdxe should avoid)\n * uefi -> output\n   * provideconsolegop to yes\n * uefi -> protocoloverrides\n   * firmwarevolume set to yes\n   * hashservices set to yes for broadwell and older(this includes x99), this is needed for systems with broken sha-1 hashing\n * uefi -> quirks\n   * requestbootvarrouting set to yes\n   * exitbootservicesdelay set to 3000-5000 if you receive still waiting for root device on aptio iv firmwares(broadwell and older)\n\nwith all this, you can proceed to enable filevault like on a normal mac under system preferences -> security & privacy -> filevault\n\nfor ui issues, see fixing resolution and verbose",charsets:{}},{title:"OpenCore Menu Password",frontmatter:{},regularPath:"/universal/security/password.html",relativePath:"universal/security/password.md",key:"v-7a9d2033",path:"/universal/security/password.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# OpenCore Menu Password\n\nWith OpenCore 0.6.1 and newer, users are able to set a SHA-512 password to ensure best security with their setups. This will enable a password prompt whenever elevated tasks are required. This includes:\n\n * Showing boot menu\n * Booting non-default OSes and tools(ie. not blessed by Startup Disk or Bootcamp Utility)\n * Resetting NVRAM\n * Booting non-default modes(ie. Verbose or Safe Mode via hotkeys)\n\nWith OpenCore 0.6.7, a new tool called ocpasswordgen was added to aid users in generating passwords.\n\nTo start, lets grab OpenCore 0.6.7 or newer and run the ocpasswordgen binary under Utilities/ocpasswordgen/. It'll prompt you to create a password:\n\n\n\nFor this example, we chose Dortania as the password. ocpasswordgen then popped out 2 important values we need for our config.plist:\n\n * PasswordHash: Hash of the password\n * PasswordSalt: Ensures 2 users with the exact same password do not do not have the same hash\n\nNext let's open our config.plist and add these values to Misc -> Security:\n\n * Note: Don't forget to also enable EnablePassword\n\n\n\nOnce these changes have been made, you can save and reboot the machine. Now when you enter OpenCore's menu, you should receive a prompt:\n\n\n\nEnter your password and you should get your regular boot options:\n\n * Note: Between typing the password and entering the menu, some older machines and VMs can take 30 seconds+ to finish verification. Please be patient\n\n",normalizedContent:"# opencore menu password\n\nwith opencore 0.6.1 and newer, users are able to set a sha-512 password to ensure best security with their setups. this will enable a password prompt whenever elevated tasks are required. this includes:\n\n * showing boot menu\n * booting non-default oses and tools(ie. not blessed by startup disk or bootcamp utility)\n * resetting nvram\n * booting non-default modes(ie. verbose or safe mode via hotkeys)\n\nwith opencore 0.6.7, a new tool called ocpasswordgen was added to aid users in generating passwords.\n\nto start, lets grab opencore 0.6.7 or newer and run the ocpasswordgen binary under utilities/ocpasswordgen/. it'll prompt you to create a password:\n\n\n\nfor this example, we chose dortania as the password. ocpasswordgen then popped out 2 important values we need for our config.plist:\n\n * passwordhash: hash of the password\n * passwordsalt: ensures 2 users with the exact same password do not do not have the same hash\n\nnext let's open our config.plist and add these values to misc -> security:\n\n * note: don't forget to also enable enablepassword\n\n\n\nonce these changes have been made, you can save and reboot the machine. now when you enter opencore's menu, you should receive a prompt:\n\n\n\nenter your password and you should get your regular boot options:\n\n * note: between typing the password and entering the menu, some older machines and vms can take 30 seconds+ to finish verification. please be patient\n\n",charsets:{}},{title:"ScanPolicy",frontmatter:{},regularPath:"/universal/security/scanpolicy.html",relativePath:"universal/security/scanpolicy.md",key:"v-f70e9c9a",path:"/universal/security/scanpolicy.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# ScanPolicy\n\nWhat this quirk allows to prevent scanning and booting from untrusted sources. Setting to 0 will allow all sources present to be bootable but calculating a specific ScanPolicy value will allow you a greater range of flexibility and security.\n\nTo calculate the ScanPolicy value, you simply add up all the hexadecimal values(with a hexadecimal calculator, you can access this from the built-in macOS calculator app with ⌘+3). Once it's all added up, you would add this hexadecimal value to ScanPolicy(you will need to convert it to a decimal value first, Xcode will automatically convert it when you paste it)\n\n0x00000001 (bit 0) — OC_SCAN_FILE_SYSTEM_LOCK\n\n * restricts scanning to only known file systems defined as a part of this policy. File system drivers may not be aware of this policy, and to avoid mounting of undesired file systems it is best not to load its driver. This bit does not affect dmg mounting, which may have any file system. Known file systems are prefixed with OC_SCAN_ALLOW_FS_.\n\n0x00000002 (bit 1) — OC_SCAN_DEVICE_LOCK\n\n * restricts scanning to only known device types defined as a part of this policy. This is not always possible to detect protocol tunneling, so be aware that on some systems it may be possible for e.g. USB HDDs to be recognized as SATA. Cases like this must be reported. Known device types are prefixed with OC_SCAN_ALLOW_DEVICE_.\n\n0x00000100 (bit 8) — OC_SCAN_ALLOW_FS_APFS\n\n * allows scanning of APFS file system.\n\n0x00000200 (bit 9) — OC_SCAN_ALLOW_FS_HFS\n\n * allows scanning of HFS file system.\n\n0x00000400 (bit 10) — OC_SCAN_ALLOW_FS_ESP\n\n * allows scanning of EFI System Partition file system.\n\n0x00010000 (bit 16) — OC_SCAN_ALLOW_DEVICE_SATA\n\n * allow scanning SATA devices.\n\n0x00020000 (bit 17) — OC_SCAN_ALLOW_DEVICE_SASEX\n\n * allow scanning SAS and Mac NVMe devices.\n\n0x00040000 (bit 18) — OC_SCAN_ALLOW_DEVICE_SCSI\n\n * allow scanning SCSI devices.\n\n0x00080000 (bit 19) — OC_SCAN_ALLOW_DEVICE_NVME\n\n * allow scanning NVMe devices.\n\n0x00100000 (bit 20) — OC_SCAN_ALLOW_DEVICE_ATAPI\n\n * allow scanning CD/DVD devices.\n\n0x00200000 (bit 21) — OC_SCAN_ALLOW_DEVICE_USB\n\n * allow scanning USB devices.\n\n0x00400000 (bit 22) - OC_SCAN_ALLOW_DEVICE_FIREWIRE\n\n * allow scanning FireWire devices.\n\n0x00800000 (bit 23) — OC_SCAN_ALLOW_DEVICE_SDCARD\n\n * allow scanning card reader devices.\n\n0x01000000 (bit 24) — OC_SCAN_ALLOW_DEVICE_PCI\n\n * allow scanning devices directly connected to PCI bus (e.g. VIRTIO).\n\nBy default, ScanPolicy is given a value of 0x10F0103(17,760,515) which is the combination of the following:\n\n * OC_SCAN_FILE_SYSTEM_LOCK\n * OC_SCAN_DEVICE_LOCK\n * OC_SCAN_ALLOW_FS_APFS\n * OC_SCAN_ALLOW_DEVICE_SATA\n * OC_SCAN_ALLOW_DEVICE_SASEX\n * OC_SCAN_ALLOW_DEVICE_SCSI\n * OC_SCAN_ALLOW_DEVICE_NVME\n * OC_SCAN_ALLOW_DEVICE_PCI\n\nAnd lets just say for this example that you want to add OC_SCAN_ALLOW_DEVICE_USB:\n\n0x00200000 + 0x10F0103 = 0x12F0103\n\nAnd converting this to decimal gives us 19,857,667",normalizedContent:"# scanpolicy\n\nwhat this quirk allows to prevent scanning and booting from untrusted sources. setting to 0 will allow all sources present to be bootable but calculating a specific scanpolicy value will allow you a greater range of flexibility and security.\n\nto calculate the scanpolicy value, you simply add up all the hexadecimal values(with a hexadecimal calculator, you can access this from the built-in macos calculator app with ⌘+3). once it's all added up, you would add this hexadecimal value to scanpolicy(you will need to convert it to a decimal value first, xcode will automatically convert it when you paste it)\n\n0x00000001 (bit 0) — oc_scan_file_system_lock\n\n * restricts scanning to only known file systems defined as a part of this policy. file system drivers may not be aware of this policy, and to avoid mounting of undesired file systems it is best not to load its driver. this bit does not affect dmg mounting, which may have any file system. known file systems are prefixed with oc_scan_allow_fs_.\n\n0x00000002 (bit 1) — oc_scan_device_lock\n\n * restricts scanning to only known device types defined as a part of this policy. this is not always possible to detect protocol tunneling, so be aware that on some systems it may be possible for e.g. usb hdds to be recognized as sata. cases like this must be reported. known device types are prefixed with oc_scan_allow_device_.\n\n0x00000100 (bit 8) — oc_scan_allow_fs_apfs\n\n * allows scanning of apfs file system.\n\n0x00000200 (bit 9) — oc_scan_allow_fs_hfs\n\n * allows scanning of hfs file system.\n\n0x00000400 (bit 10) — oc_scan_allow_fs_esp\n\n * allows scanning of efi system partition file system.\n\n0x00010000 (bit 16) — oc_scan_allow_device_sata\n\n * allow scanning sata devices.\n\n0x00020000 (bit 17) — oc_scan_allow_device_sasex\n\n * allow scanning sas and mac nvme devices.\n\n0x00040000 (bit 18) — oc_scan_allow_device_scsi\n\n * allow scanning scsi devices.\n\n0x00080000 (bit 19) — oc_scan_allow_device_nvme\n\n * allow scanning nvme devices.\n\n0x00100000 (bit 20) — oc_scan_allow_device_atapi\n\n * allow scanning cd/dvd devices.\n\n0x00200000 (bit 21) — oc_scan_allow_device_usb\n\n * allow scanning usb devices.\n\n0x00400000 (bit 22) - oc_scan_allow_device_firewire\n\n * allow scanning firewire devices.\n\n0x00800000 (bit 23) — oc_scan_allow_device_sdcard\n\n * allow scanning card reader devices.\n\n0x01000000 (bit 24) — oc_scan_allow_device_pci\n\n * allow scanning devices directly connected to pci bus (e.g. virtio).\n\nby default, scanpolicy is given a value of 0x10f0103(17,760,515) which is the combination of the following:\n\n * oc_scan_file_system_lock\n * oc_scan_device_lock\n * oc_scan_allow_fs_apfs\n * oc_scan_allow_device_sata\n * oc_scan_allow_device_sasex\n * oc_scan_allow_device_scsi\n * oc_scan_allow_device_nvme\n * oc_scan_allow_device_pci\n\nand lets just say for this example that you want to add oc_scan_allow_device_usb:\n\n0x00200000 + 0x10f0103 = 0x12f0103\n\nand converting this to decimal gives us 19,857,667",charsets:{}},{title:"Vault",frontmatter:{},regularPath:"/universal/security/vault.html",relativePath:"universal/security/vault.md",key:"v-111b33de",path:"/universal/security/vault.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# Vault\n\nWhat is vaulting?\n\nWell vaulting is based around 2 things, vault.plist and vault.sig:\n\n * vault.plist: a \"snapshot\" of your EFI\n * vault.sig: validation of vault.plist\n\nThis can be seen as secure boot for OpenCore, so no one can modify it and get in without your permission.\n\nThe specifics of vaulting is that a 256 byte RSA-2048 signature of vault.plist will be shoved into our OpenCore.efi. This key can either be shoved into OpenCoreVault.c before compiling or with sign.command if you already have OpenCore.efi compiled.\n\nDo note that nvram.plist won't be vaulted so users with emulated NVRAM still have risk of someone adding/removing certain NVRAM variables\n\nSettings in your config.plist:\n\n * Misc -> Security -> Vault:\n   * Basic: Requires just vault.plist to be present, mainly used for filesystem integrity verification\n   * Secure: Requires both vault.plist and vault.sig, used for best security as vault.plist changes require a new signature\n * Booter -> ProtectSecureBoot: YES\n   * Needed with Insyde firmwares for fixing secure boot keys and reporting violations\n\nSetting up vault:\n\nGrab OpenCorePkg and open the CreateVault folder, inside we'll find the following:\n\n * create_vault.sh\n * RsaTool\n * sign.command\n\nThe last one is what we care about: sign.command\n\nSo when we run this command, it'll look for the EFI folder located beside our Utilities folder, so we want to bring either our personal EFI into the OpenCorePkg folder or bring Utilities into our EFI folder:\n\n\n\nNow we're ready to run sign.command:\n\n\n\nDisabling Vault after setup:\n\nIf you're doing heavy troubleshooting or have the need to disable Vault, the main things to change:\n\n * Grab a new copy of OpenCore.efi\n * Misc -> Security -> Vault set to Optional\n * Remove vault.plist and vault.sig",normalizedContent:"# vault\n\nwhat is vaulting?\n\nwell vaulting is based around 2 things, vault.plist and vault.sig:\n\n * vault.plist: a \"snapshot\" of your efi\n * vault.sig: validation of vault.plist\n\nthis can be seen as secure boot for opencore, so no one can modify it and get in without your permission.\n\nthe specifics of vaulting is that a 256 byte rsa-2048 signature of vault.plist will be shoved into our opencore.efi. this key can either be shoved into opencorevault.c before compiling or with sign.command if you already have opencore.efi compiled.\n\ndo note that nvram.plist won't be vaulted so users with emulated nvram still have risk of someone adding/removing certain nvram variables\n\nsettings in your config.plist:\n\n * misc -> security -> vault:\n   * basic: requires just vault.plist to be present, mainly used for filesystem integrity verification\n   * secure: requires both vault.plist and vault.sig, used for best security as vault.plist changes require a new signature\n * booter -> protectsecureboot: yes\n   * needed with insyde firmwares for fixing secure boot keys and reporting violations\n\nsetting up vault:\n\ngrab opencorepkg and open the createvault folder, inside we'll find the following:\n\n * create_vault.sh\n * rsatool\n * sign.command\n\nthe last one is what we care about: sign.command\n\nso when we run this command, it'll look for the efi folder located beside our utilities folder, so we want to bring either our personal efi into the opencorepkg folder or bring utilities into our efi folder:\n\n\n\nnow we're ready to run sign.command:\n\n\n\ndisabling vault after setup:\n\nif you're doing heavy troubleshooting or have the need to disable vault, the main things to change:\n\n * grab a new copy of opencore.efi\n * misc -> security -> vault set to optional\n * remove vault.plist and vault.sig",charsets:{}},{title:"修复睡眠",frontmatter:{},regularPath:"/universal/sleep.html",relativePath:"universal/sleep.md",key:"v-093f9953",path:"/universal/sleep.html",headers:[{level:2,title:"准备工作",slug:"准备工作",normalizedTitle:"准备工作",charIndex:527},{level:2,title:"主要罪魁祸首",slug:"主要罪魁祸首",normalizedTitle:"主要罪魁祸首",charIndex:1400},{level:3,title:"修复USB",slug:"修复usb",normalizedTitle:"修复usb",charIndex:1467},{level:3,title:"修复GPUs",slug:"修复gpus",normalizedTitle:"修复gpus",charIndex:1897},{level:3,title:"修复Thunderbolt",slug:"修复thunderbolt",normalizedTitle:"修复thunderbolt",charIndex:2900},{level:3,title:"修复网卡",slug:"修复网卡",normalizedTitle:"修复网卡",charIndex:3159},{level:3,title:"修复NVMe",slug:"修复nvme",normalizedTitle:"修复nvme",charIndex:3325},{level:3,title:"修复CPU电源管理",slug:"修复cpu电源管理",normalizedTitle:"修复cpu电源管理",charIndex:3603},{level:2,title:"其他罪魁祸首",slug:"其他罪魁祸首",normalizedTitle:"其他罪魁祸首",charIndex:3821},{level:3,title:"显示",slug:"显示",normalizedTitle:"显示",charIndex:296},{level:3,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:302},{level:3,title:"RTC",slug:"rtc",normalizedTitle:"rtc",charIndex:311},{level:3,title:"IRQ Conflicts",slug:"irq-conflicts",normalizedTitle:"irq conflicts",charIndex:5375},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:5792},{level:3,title:"SMBus",slug:"smbus",normalizedTitle:"smbus",charIndex:338},{level:3,title:"TSC",slug:"tsc",normalizedTitle:"tsc",charIndex:347}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"准备工作 主要罪魁祸首 修复USB 修复GPUs 修复Thunderbolt 修复网卡 修复NVMe 修复CPU电源管理 其他罪魁祸首 显示 NVRAM RTC IRQ Conflicts Audio SMBus TSC",content:"# 修复睡眠\n\n因此，为了理解如何解决macOS中的睡眠问题，我们需要首先看看大多数情况下是什么导致了睡眠问题:\n\n * 设备管理错误(最常见的是基于PCIe的设备)\n\n原因是当设备获得S3调用(或S0用于唤醒)时，驱动程序需要关闭设备并进入低状态模式(唤醒时则相反)。当这些设备不与驱动程序合作时，问题就会出现，这些问题的主要违反者是:\n\n * USB控制器和设备\n * GPUs\n * Thunderbolt 控制器和设备\n * 网卡(包括以太网和Wifi)\n * NVMe 驱动器\n\n还有一些其他可能导致睡眠问题的因素与PCI/e没有直接(或明显)关系:\n\n * CPU电源管理\n * 显示\n * NVRAM\n * RTC/系统时钟\n * IRQ冲突\n * 音频\n * SMBus\n * TSC\n\n很多人都忘记了一件事:\n\n * CPUs\n   * AVX经常会破坏iGPUs并损害整体稳定性\n * 坏内存(超频和不匹配的内存)\n   * 即使是糟糕/不匹配的时间也会导致严重的问题\n * 工厂GPU超频\n   * oem厂商通常在自定义VBIOS上对显卡做得有点过头\n   * 通常这些显卡会有一个物理开关，允许你选择低功耗的VBIOS\n\n\n# 准备工作\n\n在 macOS:\n\n在我们深入研究之前，我们首先要准备好我们的系统:\n\nsudo pmset autopoweroff 0\nsudo pmset powernap 0\nsudo pmset standby 0\nsudo pmset proximitywake 0\nsudo pmset tcpkeepalive 0\n\n\n这将为我们做5件事:\n\n 1. 禁用自动休眠:这是休眠的一种形式\n 2. 禁用powernap:用于定期唤醒机器以进行网络和更新(但不包括显示)\n 3. 禁用待机:用于睡眠和进入休眠之间的一段时间\n 4. 禁用iPhone/手表唤醒功能:特别是当你的iPhone或苹果手表靠近时，机器将唤醒\n 5. 关闭TCP保持激活机制，防止每2小时唤醒一次\n\n在你的 config.plist:\n\n虽然只需要最小的更改，但以下是我们关心的更改:\n\n * Misc -> Boot -> HibernateMode -> None\n   * 我们将避免使用S4的黑魔法\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args\n   * keepsyms=1 - 确保如果内核在睡眠期间发生崩溃，我们可以从中获取所有重要的信息\n   * swd_panic=1 - 避免了睡眠导致重启的问题，这应该给我们一个内核崩溃日志\n\n在你的 BIOS:\n\n * 禁用：\n   * Wake on LAN\n   * Trusted Platform Module\n     * 请注意，如果你在Windows上使用BitLocker，禁用它将导致你所有的加密密钥丢失。如果你正在使用BitLocker，要么禁用，要么注意它可能是唤醒问题的原因。\n   * Wake on USB(某些主板实际上可能需要这个来唤醒，但大多数将获得随机唤醒调用)\n * 启用:\n   * Wake on Bluetooth(如果使用蓝牙设备像键盘一样唤醒，否则可以禁用)\n\n\n# 主要罪魁祸首\n\n * USB\n * GPUs\n * Thunderbolt\n * 网卡\n * NVMe\n * CPU电源管理\n\n\n# 修复USB\n\n这是导致黑苹果睡眠问题的首要原因，主要是因为苹果的驱动程序非常不擅长猜测端口，并且端口限制补丁会产生不稳定的不良影响。\n\n * USB 映射\n\n本指南还包括一些其他的修复，而不仅仅是映射:\n\n * 修复USB电源\n * 修复关机/重启\n * GPRW/UPRW/LANC即时唤醒补丁\n * 键盘唤醒问题\n\n使用macOS Catalina(10.15)及更新版本的USB映射:你可能会发现，即使使用USB映射，你的睡眠时间也会延长。一个可能的解决方案是将IOClass的值从AppleUSBMergeNub重命名为AppleUSBHostMergeProperties。查看这里了解更多信息:卡特琳娜USB IOClass的变化\n\n * 注意:某些USB设备在macOS中没有正确的驱动程序，可能会不幸导致睡眠问题。例如，带有USB寻址控制的海盗船水冷可以防止机器正常睡眠。对于这些情况，我们建议用户在调试睡眠问题时断开这些麻烦的设备。\n\n\n# 修复GPUs\n\n有了gpu，我们很容易就能知道是什么导致了问题。这是macOS中不支持的gpu。默认情况下，任何没有在操作系统中提供驱动程序的GPU都将运行非常基本的驱动程序，即VESA驱动程序。它们提供了最小的显示输出，但也导致了一个大问题，即macOS实际上不知道如何正确地与这些设备交互。要解决这个问题，我们需要欺骗macOS认为它是一个通用的PCIe设备(它可以更好地处理，非常适合台式机)，或者完全关闭卡(在笔记本电脑上，台式机dgpu有关机问题)\n\n * 查看更多信息:\n   * 禁用桌面显卡\n   * 禁用笔记本显卡\n\n10.15.4及更新版本iGPU用户的特别说明:\n\n * iGPU唤醒部分是由于苹果公司在真正的mac上使用applegraphicpowermanagement.kext的大量黑客行为造成的，为了解决这个问题，你可能需要igfxonln=1来强制所有显示在线。显然，首先要进行测试，以确保您有这个问题。\n * A对于桌面 Coffee Lake (UHD 630) 的用户来说，AAPL,ig-platform-id 07009B3E可能会失败，你可以试试00009B3E。0300923E有时也是有效的。\n\n其他iGPU注意事项:\n\n * 一些使用igpu的系统(例如Kaby Lake和Coffee Lake)可能会在低功耗状态下导致系统不稳定，有时会表现为NVMe内核崩溃。要解决这个问题，你可以在你的引导参数中添加forceRenderStandby=0来禁用RC6备用渲染。查看这里了解更多信息:IGP导致NVMe内核恐慌CSTS=0xffffffff#1193\n * 由于转换状态的问题，某些Ice Lake笔记本电脑也可能在“不允许DC6而不允许DC9”时出现内核崩溃。一种解决方法是在你的启动参数中使用-noDC9或-nodisplaysleepDC6\n\nAMD dgpu 4k显示器的特别注意事项:\n\n * 某些显示器可能无法随机唤醒，主要是由AGDC首选项引起的。要修复这个问题，请在DeviceProperties中将其应用到dGPU上:\n   * CFG,CFG_USE_AGDC | Data | 00\n   * 你可以通过gfxutil找到GPU的PciRoot\n     * /path/to/gfxutil -f GFX0\n\n\n\n\n# 修复Thunderbolt\n\nThunderbolt在社区中是一个非常棘手的话题，主要是由于情况的复杂性。如果你想让Thunderbolt和sleep同时工作，你真的只有两条路可走:\n\n * 在BIOS中禁用Thunderbolt 3\n * 尝试修补Thunderbolt 3:\n   * Thunderbolt 3 修复\n   * ThunderboltReset\n   * ThunderboltPkg\n\n注意:Thunderbolt可以在不需要额外工作的情况下启用，如果你不需要睡眠也没问题，反之亦然。\n\n\n# 修复网卡\n\n网卡(网络接口控制器)与睡眠很容易修复,主要是以下几点:\n\n * 在BIOS中禁用WakeOnLAN\n   * 大多数系统将进入睡眠/唤醒循环启用\n * 在macOS中禁用Wake for network access (SystemPreferences -> Power)\n   * 似乎能破解很多hack\n\n\n# 修复NVMe\n\n所以macOS对NVMe驱动非常挑剔，而且苹果的电源管理驱动仅限于苹果品牌的驱动。所以要做的主要事情是:\n\n * 确保NVMe在最新固件上(对于970 Evo Plus驱动器尤其重要)\n * 使用NVMeFix.kext来进行适当的NVMe电源管理\n\n并避免问题驱动，主要罪魁祸首:\n\n * 三星的PM981和PM991固态硬盘\n * Micron的2200S\n\n如果你的系统中有这些驱动器，最好通过SSDT禁用它们:禁用桌面dgpu。 本指南主要针对dGPU，但对NVMe驱动器的工作原理完全相同(因为它们都只是PCIe设备)。\n\n\n# 修复CPU电源管理\n\n来自 Intel:\n\n要验证您是否有工作的CPU电源管理，请参阅固定电源管理 page.\n\n还要注意，不正确的电源管理数据可能导致唤醒问题，因此请验证您正在使用正确的SMBIOS。\n\n一个常见的内核唤醒错误是:\n\nSleep Wake failure in EFI\n\n\n来自 AMD:\n\n不要着急，因为他们对你还有希望可以添加基于Ryzen cpu电源管理。仓库的README.md中解释了安装和使用方法\n\n\n# 其他罪魁祸首\n\n * 显示\n * NVRAM\n * RTC\n * IRQ 冲突\n * 音频\n * SMBus\n * TSC\n\n\n# 显示\n\n所以显示问题主要是针对笔记本电脑的盖子检测，具体来说:\n\n * 错误制作SSDT-PNLF\n * 操作系统与固件的盖子唤醒\n * 键盘垃圾从盖子唤醒它(基于PS2的键盘)\n\n前者很容易修复，参见这里:背光PNLF\n\n对于中间部分，macOS的盖子唤醒检测可能有点坏，你可能需要完全禁用它:\n\nsudo pmset lidwake 0\n\n\n并设置lidwake 1来重新启用它。\n\n后者需要更多的工作。我们要做的是试图消除在Skylake和更新的基于HPs上发生的半随机密钥垃圾邮件，尽管在其他oem中也会出现。这也将假设你的键盘是基于PS2并且正在运行VoodooPS2.\n\n要解决这个问题，请获取SSDT-HP-FixLidSleep.dsl并将ACPI路径调整到您的键盘(_CID值为PNP0303)。一旦完成，编译并放入EFI/OC/ACPI和config plist -> ACPI -> Add。\n\n对于99%的HP用户来说，这将解决随机密钥的垃圾问题。如果没有，请参阅下面的帖子:\n\n * RehabMan的亮度键指南\n\n\n# NVRAM\n\n要验证您有工作的NVRAM，请参阅[模拟NVRAM](../misc/ NVRAM. md)页面来验证您有工作的NVRAM。如果没有，则相应地打补丁。\n\n\n# RTC\n\n这主要与Intel 300系列主板(Z3xx)有关，具体来说有两个问题:\n\n * 默认RTC是禁用的(而不是使用AWAC)\n * RTC通常与macOS不兼容\n\nTo get around the first issue, see here: Fixing AWAC\n\nFor the second one, it's quite easy to tell you have RTC issues when you either shutdown or restart. Specifically you'll be greeted with a \"BIOS Restarted in Safemode\" error. To fix this, we'll need to prevent macOS from writing to the RTC regions causing these issues. There are a couple fixes:\n\n * DisableRtcChecksum: Prevent writing to primary checksum (0x58-0x59), works with most boards\n * UEFI -> ProtoclOverride -> AppleRtcRam + NVRAM -> Add -> rtc-blacklist\n   * Blacklists certain regions at the firmware level, see Configuration.pdf for more info on how to set this up\n * RTCMemoryFixup + rtcfx_exclude=\n   * Blacklists certain regions at the kernel level, see README for more info on how to setup\n\nWith some legacy boards, you may actually need to patch your RTC: Z68 RTC\n\n\n# IRQ Conflicts\n\nIRQ issues usually occur during bootups but some may notice that IRQ calls can break with sleep, this fix is fairly easy:\n\n * SSDTTime\n   * First dump your DSDT in Linux/Windows\n   * then select FixHPET option\n\nThis will provide you with both SSDT-HPET.aml and patches_OC.plist, You will want to add the SSDT to EFI/OC/ACPI and add the ACPI patches into your config.plist from the patches_OC.plist\n\n\n# Audio\n\nUnmanaged or incorrectly managed audio devices can also cause issues, either disable unused audio devices in your BIOS or verify they're working correctly here:\n\n * Fixing Audio\n\n\n# SMBus\n\nMain reason you'd care about SMBus is AppleSMBus can help properly manage both SMBus and PCI devices like with power states. Problem is the kext usually won't load by itself, so you'll need to actually create the SSDT-SMBS-MCHC.\n\nSee here on more info on how to make it: Fixing SMBus support\n\n\n# TSC\n\nThe TSC(Time Stamp Counter) is responsible for making sure you're hardware is running at the correct speed, problem is some firmware(mainly HEDT/Server and Asus Laptops) will not write the TSC to all cores causing issues. To get around this, we have 3 options:\n\n * CpuTscSync\n   * For troublesome laptops\n * VoodooTSCSync\n   * For most HEDT hardware\n * TSCAdjustReset\n   * For Skylake X/W/SP and Cascade Lake X/W/SP hardware\n\nThe former 2 are plug n play, while the latter will need some customizations:\n\n * Open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n * Compiled version can be found here: TSCAdjustReset.kext\n\n\n\nThe most common way to see the TSC issue:\n\nCASE 1   CASE 2\n         ",normalizedContent:"# 修复睡眠\n\n因此，为了理解如何解决macos中的睡眠问题，我们需要首先看看大多数情况下是什么导致了睡眠问题:\n\n * 设备管理错误(最常见的是基于pcie的设备)\n\n原因是当设备获得s3调用(或s0用于唤醒)时，驱动程序需要关闭设备并进入低状态模式(唤醒时则相反)。当这些设备不与驱动程序合作时，问题就会出现，这些问题的主要违反者是:\n\n * usb控制器和设备\n * gpus\n * thunderbolt 控制器和设备\n * 网卡(包括以太网和wifi)\n * nvme 驱动器\n\n还有一些其他可能导致睡眠问题的因素与pci/e没有直接(或明显)关系:\n\n * cpu电源管理\n * 显示\n * nvram\n * rtc/系统时钟\n * irq冲突\n * 音频\n * smbus\n * tsc\n\n很多人都忘记了一件事:\n\n * cpus\n   * avx经常会破坏igpus并损害整体稳定性\n * 坏内存(超频和不匹配的内存)\n   * 即使是糟糕/不匹配的时间也会导致严重的问题\n * 工厂gpu超频\n   * oem厂商通常在自定义vbios上对显卡做得有点过头\n   * 通常这些显卡会有一个物理开关，允许你选择低功耗的vbios\n\n\n# 准备工作\n\n在 macos:\n\n在我们深入研究之前，我们首先要准备好我们的系统:\n\nsudo pmset autopoweroff 0\nsudo pmset powernap 0\nsudo pmset standby 0\nsudo pmset proximitywake 0\nsudo pmset tcpkeepalive 0\n\n\n这将为我们做5件事:\n\n 1. 禁用自动休眠:这是休眠的一种形式\n 2. 禁用powernap:用于定期唤醒机器以进行网络和更新(但不包括显示)\n 3. 禁用待机:用于睡眠和进入休眠之间的一段时间\n 4. 禁用iphone/手表唤醒功能:特别是当你的iphone或苹果手表靠近时，机器将唤醒\n 5. 关闭tcp保持激活机制，防止每2小时唤醒一次\n\n在你的 config.plist:\n\n虽然只需要最小的更改，但以下是我们关心的更改:\n\n * misc -> boot -> hibernatemode -> none\n   * 我们将避免使用s4的黑魔法\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> boot-args\n   * keepsyms=1 - 确保如果内核在睡眠期间发生崩溃，我们可以从中获取所有重要的信息\n   * swd_panic=1 - 避免了睡眠导致重启的问题，这应该给我们一个内核崩溃日志\n\n在你的 bios:\n\n * 禁用：\n   * wake on lan\n   * trusted platform module\n     * 请注意，如果你在windows上使用bitlocker，禁用它将导致你所有的加密密钥丢失。如果你正在使用bitlocker，要么禁用，要么注意它可能是唤醒问题的原因。\n   * wake on usb(某些主板实际上可能需要这个来唤醒，但大多数将获得随机唤醒调用)\n * 启用:\n   * wake on bluetooth(如果使用蓝牙设备像键盘一样唤醒，否则可以禁用)\n\n\n# 主要罪魁祸首\n\n * usb\n * gpus\n * thunderbolt\n * 网卡\n * nvme\n * cpu电源管理\n\n\n# 修复usb\n\n这是导致黑苹果睡眠问题的首要原因，主要是因为苹果的驱动程序非常不擅长猜测端口，并且端口限制补丁会产生不稳定的不良影响。\n\n * usb 映射\n\n本指南还包括一些其他的修复，而不仅仅是映射:\n\n * 修复usb电源\n * 修复关机/重启\n * gprw/uprw/lanc即时唤醒补丁\n * 键盘唤醒问题\n\n使用macos catalina(10.15)及更新版本的usb映射:你可能会发现，即使使用usb映射，你的睡眠时间也会延长。一个可能的解决方案是将ioclass的值从appleusbmergenub重命名为appleusbhostmergeproperties。查看这里了解更多信息:卡特琳娜usb ioclass的变化\n\n * 注意:某些usb设备在macos中没有正确的驱动程序，可能会不幸导致睡眠问题。例如，带有usb寻址控制的海盗船水冷可以防止机器正常睡眠。对于这些情况，我们建议用户在调试睡眠问题时断开这些麻烦的设备。\n\n\n# 修复gpus\n\n有了gpu，我们很容易就能知道是什么导致了问题。这是macos中不支持的gpu。默认情况下，任何没有在操作系统中提供驱动程序的gpu都将运行非常基本的驱动程序，即vesa驱动程序。它们提供了最小的显示输出，但也导致了一个大问题，即macos实际上不知道如何正确地与这些设备交互。要解决这个问题，我们需要欺骗macos认为它是一个通用的pcie设备(它可以更好地处理，非常适合台式机)，或者完全关闭卡(在笔记本电脑上，台式机dgpu有关机问题)\n\n * 查看更多信息:\n   * 禁用桌面显卡\n   * 禁用笔记本显卡\n\n10.15.4及更新版本igpu用户的特别说明:\n\n * igpu唤醒部分是由于苹果公司在真正的mac上使用applegraphicpowermanagement.kext的大量黑客行为造成的，为了解决这个问题，你可能需要igfxonln=1来强制所有显示在线。显然，首先要进行测试，以确保您有这个问题。\n * a对于桌面 coffee lake (uhd 630) 的用户来说，aapl,ig-platform-id 07009b3e可能会失败，你可以试试00009b3e。0300923e有时也是有效的。\n\n其他igpu注意事项:\n\n * 一些使用igpu的系统(例如kaby lake和coffee lake)可能会在低功耗状态下导致系统不稳定，有时会表现为nvme内核崩溃。要解决这个问题，你可以在你的引导参数中添加forcerenderstandby=0来禁用rc6备用渲染。查看这里了解更多信息:igp导致nvme内核恐慌csts=0xffffffff#1193\n * 由于转换状态的问题，某些ice lake笔记本电脑也可能在“不允许dc6而不允许dc9”时出现内核崩溃。一种解决方法是在你的启动参数中使用-nodc9或-nodisplaysleepdc6\n\namd dgpu 4k显示器的特别注意事项:\n\n * 某些显示器可能无法随机唤醒，主要是由agdc首选项引起的。要修复这个问题，请在deviceproperties中将其应用到dgpu上:\n   * cfg,cfg_use_agdc | data | 00\n   * 你可以通过gfxutil找到gpu的pciroot\n     * /path/to/gfxutil -f gfx0\n\n\n\n\n# 修复thunderbolt\n\nthunderbolt在社区中是一个非常棘手的话题，主要是由于情况的复杂性。如果你想让thunderbolt和sleep同时工作，你真的只有两条路可走:\n\n * 在bios中禁用thunderbolt 3\n * 尝试修补thunderbolt 3:\n   * thunderbolt 3 修复\n   * thunderboltreset\n   * thunderboltpkg\n\n注意:thunderbolt可以在不需要额外工作的情况下启用，如果你不需要睡眠也没问题，反之亦然。\n\n\n# 修复网卡\n\n网卡(网络接口控制器)与睡眠很容易修复,主要是以下几点:\n\n * 在bios中禁用wakeonlan\n   * 大多数系统将进入睡眠/唤醒循环启用\n * 在macos中禁用wake for network access (systempreferences -> power)\n   * 似乎能破解很多hack\n\n\n# 修复nvme\n\n所以macos对nvme驱动非常挑剔，而且苹果的电源管理驱动仅限于苹果品牌的驱动。所以要做的主要事情是:\n\n * 确保nvme在最新固件上(对于970 evo plus驱动器尤其重要)\n * 使用nvmefix.kext来进行适当的nvme电源管理\n\n并避免问题驱动，主要罪魁祸首:\n\n * 三星的pm981和pm991固态硬盘\n * micron的2200s\n\n如果你的系统中有这些驱动器，最好通过ssdt禁用它们:禁用桌面dgpu。 本指南主要针对dgpu，但对nvme驱动器的工作原理完全相同(因为它们都只是pcie设备)。\n\n\n# 修复cpu电源管理\n\n来自 intel:\n\n要验证您是否有工作的cpu电源管理，请参阅固定电源管理 page.\n\n还要注意，不正确的电源管理数据可能导致唤醒问题，因此请验证您正在使用正确的smbios。\n\n一个常见的内核唤醒错误是:\n\nsleep wake failure in efi\n\n\n来自 amd:\n\n不要着急，因为他们对你还有希望可以添加基于ryzen cpu电源管理。仓库的readme.md中解释了安装和使用方法\n\n\n# 其他罪魁祸首\n\n * 显示\n * nvram\n * rtc\n * irq 冲突\n * 音频\n * smbus\n * tsc\n\n\n# 显示\n\n所以显示问题主要是针对笔记本电脑的盖子检测，具体来说:\n\n * 错误制作ssdt-pnlf\n * 操作系统与固件的盖子唤醒\n * 键盘垃圾从盖子唤醒它(基于ps2的键盘)\n\n前者很容易修复，参见这里:背光pnlf\n\n对于中间部分，macos的盖子唤醒检测可能有点坏，你可能需要完全禁用它:\n\nsudo pmset lidwake 0\n\n\n并设置lidwake 1来重新启用它。\n\n后者需要更多的工作。我们要做的是试图消除在skylake和更新的基于hps上发生的半随机密钥垃圾邮件，尽管在其他oem中也会出现。这也将假设你的键盘是基于ps2并且正在运行voodoops2.\n\n要解决这个问题，请获取ssdt-hp-fixlidsleep.dsl并将acpi路径调整到您的键盘(_cid值为pnp0303)。一旦完成，编译并放入efi/oc/acpi和config plist -> acpi -> add。\n\n对于99%的hp用户来说，这将解决随机密钥的垃圾问题。如果没有，请参阅下面的帖子:\n\n * rehabman的亮度键指南\n\n\n# nvram\n\n要验证您有工作的nvram，请参阅[模拟nvram](../misc/ nvram. md)页面来验证您有工作的nvram。如果没有，则相应地打补丁。\n\n\n# rtc\n\n这主要与intel 300系列主板(z3xx)有关，具体来说有两个问题:\n\n * 默认rtc是禁用的(而不是使用awac)\n * rtc通常与macos不兼容\n\nto get around the first issue, see here: fixing awac\n\nfor the second one, it's quite easy to tell you have rtc issues when you either shutdown or restart. specifically you'll be greeted with a \"bios restarted in safemode\" error. to fix this, we'll need to prevent macos from writing to the rtc regions causing these issues. there are a couple fixes:\n\n * disablertcchecksum: prevent writing to primary checksum (0x58-0x59), works with most boards\n * uefi -> protocloverride -> applertcram + nvram -> add -> rtc-blacklist\n   * blacklists certain regions at the firmware level, see configuration.pdf for more info on how to set this up\n * rtcmemoryfixup + rtcfx_exclude=\n   * blacklists certain regions at the kernel level, see readme for more info on how to setup\n\nwith some legacy boards, you may actually need to patch your rtc: z68 rtc\n\n\n# irq conflicts\n\nirq issues usually occur during bootups but some may notice that irq calls can break with sleep, this fix is fairly easy:\n\n * ssdttime\n   * first dump your dsdt in linux/windows\n   * then select fixhpet option\n\nthis will provide you with both ssdt-hpet.aml and patches_oc.plist, you will want to add the ssdt to efi/oc/acpi and add the acpi patches into your config.plist from the patches_oc.plist\n\n\n# audio\n\nunmanaged or incorrectly managed audio devices can also cause issues, either disable unused audio devices in your bios or verify they're working correctly here:\n\n * fixing audio\n\n\n# smbus\n\nmain reason you'd care about smbus is applesmbus can help properly manage both smbus and pci devices like with power states. problem is the kext usually won't load by itself, so you'll need to actually create the ssdt-smbs-mchc.\n\nsee here on more info on how to make it: fixing smbus support\n\n\n# tsc\n\nthe tsc(time stamp counter) is responsible for making sure you're hardware is running at the correct speed, problem is some firmware(mainly hedt/server and asus laptops) will not write the tsc to all cores causing issues. to get around this, we have 3 options:\n\n * cputscsync\n   * for troublesome laptops\n * voodootscsync\n   * for most hedt hardware\n * tscadjustreset\n   * for skylake x/w/sp and cascade lake x/w/sp hardware\n\nthe former 2 are plug n play, while the latter will need some customizations:\n\n * open up the kext(showpackagecontents in finder, contents -> info.plist) and change the info.plist -> iokitpersonalities -> iopropertymatch -> iocpunumber to the number of cpu threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n * compiled version can be found here: tscadjustreset.kext\n\n\n\nthe most common way to see the tsc issue:\n\ncase 1   case 2\n         ",charsets:{cjk:!0}},{title:"更新OpenCore和macOS",frontmatter:{},regularPath:"/universal/update.html",relativePath:"universal/update.md",key:"v-df55b176",path:"/universal/update.html",headers:[{level:2,title:"更新OpenCore",slug:"更新opencore",normalizedTitle:"更新opencore",charIndex:2},{level:3,title:"1. 下载最新版OpenCore",slug:"_1-下载最新版opencore",normalizedTitle:"1. 下载最新版opencore",charIndex:200},{level:3,title:"2. 挂载你的EFI",slug:"_2-挂载你的efi",normalizedTitle:"2. 挂载你的efi",charIndex:237},{level:3,title:"3. 用刚才下载的文件替换OpenCore文件",slug:"_3-用刚才下载的文件替换opencore文件",normalizedTitle:"3. 用刚才下载的文件替换opencore文件",charIndex:479},{level:3,title:"4. 比较你的 config.plist 和新的 Sample.plist",slug:"_4-比较你的-config-plist-和新的-sample-plist",normalizedTitle:"4. 比较你的 config.plist 和新的 sample.plist",charIndex:685},{level:3,title:"5. 引导!",slug:"_5-引导",normalizedTitle:"5. 引导!",charIndex:1354},{level:2,title:"更新kext",slug:"更新kext",normalizedTitle:"更新kext",charIndex:1443},{level:2,title:"更新macOS",slug:"更新macos",normalizedTitle:"更新macos",charIndex:1595}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"更新OpenCore 1. 下载最新版OpenCore 2. 挂载你的EFI 3. 用刚才下载的文件替换OpenCore文件 4. 比较你的 config.plist 和新的 Sample.plist 5. 引导! 更新kext 更新macOS",content:"# 更新OpenCore和macOS\n\n\n# 更新OpenCore\n\n所以更新OpenCore的主要注意事项:\n\n * Releases 在每个月的第一个星期一发布\n * Differences.pdf 会告诉你与之前的版本相比，这个OpenCore版本中添加和删除的所有内容\n * OpenCore安装指南将在标题 中有关于它支持的发布版本的说明\n\n> 那我怎么更新呢?\n\n具体过程如下:\n\n\n# 1. 下载最新版OpenCore\n\n * OpenCorePkg\n\n\n# 2. 挂载你的EFI\n\n * 因此，首先，让我们挂载硬盘的EFI，并在某个安全的地方用MountEFI做一个拷贝。我们不会一开始就更新硬盘的EFI，相反，我们会拿一个备用USB作为我们的虚拟机。这允许我们保留一个OpenCore的工作副本，以防我们的更新失败\n\n * 对于USB，必须格式化为GUID。原因是GUID会自动创建一个EFI分区，尽管默认情况下这是隐藏的，所以你需要用MountEFI挂载它。\n\n\n\n * 现在您可以将您的OpenCore EFI放在USB上\n\n\n\n\n# 3. 用刚才下载的文件替换OpenCore文件\n\n * 需要更新的重要内容:\n   \n   * EFI/BOOT/BOOTx64.efi\n   * EFI/OC/OpenCore.efi\n   * EFI/OC/Drivers/OpenRuntime.efi(不要忘记这个，OpenCore不会启动不匹配的版本)\n\n * 如果有的话，你也可以更新其他驱动程序，这些只是为了正确引导必须更新的驱动程序\n\n\n\n\n# 4. 比较你的 config.plist 和新的 Sample.plist\n\n * 有几种方法可以做到这一点:\n   \n   * OCConfigCompare 用于比较sample.plist 和你的 config.plist\n   * 在终端中输入diff (file input 1) (file input 2)\n   * Meld Merge, WinMerge，或其他您最喜欢的比较软件\n   * 根据阅读更新的OpenCore安装指南制作一个新配置\n\n\n\n * 一旦您进行了调整，以确保您的配置与OpenCore的最新版本兼容，您可以使用OpenCore实用工具ocvalidate:此工具将帮助确保您的 config.plist 与匹配构建的OpenCore规范匹配。\n   * 请注意，ocvalidate必须与使用的OpenCore版本匹配，并且可能无法检测到文件中存在的所有配置缺陷。我们建议您使用OpenCore指南再次检查您的设置，以了解设置的内容，否则请阅读Differences.pdf 以获取有关更改的更深入的文档。\n   * 要运行ocvalidate， cd进入OpenCore的utilities/ocvalidate/再运行./ocvalidate。注意，你可能需要运行chmod +x ocvalidate才能执行。\n   * 此外，更新ProperTree并执行OC快照(Ctrl/Cmd+R)，以确保您的SSDTs、驱动程序、kext等的配置条目符合OpenCore预期的格式。\n\n\n\n\n# 5. 引导!\n\n * 一旦虚拟USB正常工作，你就可以挂载EFI并将其移动到硬盘的EFI分区。记得保留一份你的旧EFI的副本，以防万一OpenCore在路上表现得很滑稽\n\n\n# 更新kext\n\n * 更新kext与更新OpenCore的过程类似，复制所有内容并在虚拟USB上更新，以防出现问题\n\n * 更新kext最简单的方法是使用以下两个工具:\n   \n   * Lilu 和 Friends 下载并编译kext\n   * Kext Extractor 合并到您的EFI\n\n\n# 更新macOS\n\n * 所以这可能是最具挑战性的部分之一，通过操作系统更新来维护您的系统。需要注意的主要事项:\n   \n   * 更新操作系统时，请确保所有内容都已更新，并且有某种形式的恢复，如TimeMachine或已知EFI良好的旧macOS安装程序\n   * 在谷歌上搜索一下，看看其他人对最新的更新是否有问题\n\n * 我还提供了更多关于macOS版本中变化的详细示意图，参见下面:\n\nmacOS Catalina:\n\n * 10.15.0\n   * 需要适当的EC\n   * 双插座和大多数AMD cpu需要 AppleMCEReporterDisabler.kext\n   * MacPro5,1的支持已经取消\n * 10.15.1\n   * 需要WhateverGreen 1.3.4+\n   * 破坏了许多gpu的DRM(参见DRM图表)\n   * 需要所有以前的修复\n * 10.15.2\n   * 修复了安装程序中的Navi支持\n   * 需要所有以前的修复\n * 10.15.3\n   * 不变\n   * 需要所有以前的修复\n * 10.15.4\n   * AMD CPU用户需要更新cpuid_set_cpufamily补丁\n   * 修正了许多基于Ellesmere的北极星gpu上的DRM\n   * 需要之前所有的修复(不包括Polaris DRM的shikigva=80)\n * 10.15.5\n   * UHD 630的framebuffer坏了，如果你收到黑屏，你可能需要从07009B3E切换到00009B3E\n   * Comet Lake不再需要欺骗CPU ID\n * 10.15.6\n   * 不变\n   * 需要10.15.5之前的所有修复\n * 10.15.7\n   * 不变\n   * 需要10.15.5之前的所有修复\n\nmacOS Big Sur:\n\n * 11.0.1\n   * 查看这里: OpenCore 和 macOS 11: Big Sur\n\nmacOS Monterey:\n\n * 12.0.1\n   * 查看这里: OpenCore 和 macOS 12: Monterey",normalizedContent:"# 更新opencore和macos\n\n\n# 更新opencore\n\n所以更新opencore的主要注意事项:\n\n * releases 在每个月的第一个星期一发布\n * differences.pdf 会告诉你与之前的版本相比，这个opencore版本中添加和删除的所有内容\n * opencore安装指南将在标题 中有关于它支持的发布版本的说明\n\n> 那我怎么更新呢?\n\n具体过程如下:\n\n\n# 1. 下载最新版opencore\n\n * opencorepkg\n\n\n# 2. 挂载你的efi\n\n * 因此，首先，让我们挂载硬盘的efi，并在某个安全的地方用mountefi做一个拷贝。我们不会一开始就更新硬盘的efi，相反，我们会拿一个备用usb作为我们的虚拟机。这允许我们保留一个opencore的工作副本，以防我们的更新失败\n\n * 对于usb，必须格式化为guid。原因是guid会自动创建一个efi分区，尽管默认情况下这是隐藏的，所以你需要用mountefi挂载它。\n\n\n\n * 现在您可以将您的opencore efi放在usb上\n\n\n\n\n# 3. 用刚才下载的文件替换opencore文件\n\n * 需要更新的重要内容:\n   \n   * efi/boot/bootx64.efi\n   * efi/oc/opencore.efi\n   * efi/oc/drivers/openruntime.efi(不要忘记这个，opencore不会启动不匹配的版本)\n\n * 如果有的话，你也可以更新其他驱动程序，这些只是为了正确引导必须更新的驱动程序\n\n\n\n\n# 4. 比较你的 config.plist 和新的 sample.plist\n\n * 有几种方法可以做到这一点:\n   \n   * occonfigcompare 用于比较sample.plist 和你的 config.plist\n   * 在终端中输入diff (file input 1) (file input 2)\n   * meld merge, winmerge，或其他您最喜欢的比较软件\n   * 根据阅读更新的opencore安装指南制作一个新配置\n\n\n\n * 一旦您进行了调整，以确保您的配置与opencore的最新版本兼容，您可以使用opencore实用工具ocvalidate:此工具将帮助确保您的 config.plist 与匹配构建的opencore规范匹配。\n   * 请注意，ocvalidate必须与使用的opencore版本匹配，并且可能无法检测到文件中存在的所有配置缺陷。我们建议您使用opencore指南再次检查您的设置，以了解设置的内容，否则请阅读differences.pdf 以获取有关更改的更深入的文档。\n   * 要运行ocvalidate， cd进入opencore的utilities/ocvalidate/再运行./ocvalidate。注意，你可能需要运行chmod +x ocvalidate才能执行。\n   * 此外，更新propertree并执行oc快照(ctrl/cmd+r)，以确保您的ssdts、驱动程序、kext等的配置条目符合opencore预期的格式。\n\n\n\n\n# 5. 引导!\n\n * 一旦虚拟usb正常工作，你就可以挂载efi并将其移动到硬盘的efi分区。记得保留一份你的旧efi的副本，以防万一opencore在路上表现得很滑稽\n\n\n# 更新kext\n\n * 更新kext与更新opencore的过程类似，复制所有内容并在虚拟usb上更新，以防出现问题\n\n * 更新kext最简单的方法是使用以下两个工具:\n   \n   * lilu 和 friends 下载并编译kext\n   * kext extractor 合并到您的efi\n\n\n# 更新macos\n\n * 所以这可能是最具挑战性的部分之一，通过操作系统更新来维护您的系统。需要注意的主要事项:\n   \n   * 更新操作系统时，请确保所有内容都已更新，并且有某种形式的恢复，如timemachine或已知efi良好的旧macos安装程序\n   * 在谷歌上搜索一下，看看其他人对最新的更新是否有问题\n\n * 我还提供了更多关于macos版本中变化的详细示意图，参见下面:\n\nmacos catalina:\n\n * 10.15.0\n   * 需要适当的ec\n   * 双插座和大多数amd cpu需要 applemcereporterdisabler.kext\n   * macpro5,1的支持已经取消\n * 10.15.1\n   * 需要whatevergreen 1.3.4+\n   * 破坏了许多gpu的drm(参见drm图表)\n   * 需要所有以前的修复\n * 10.15.2\n   * 修复了安装程序中的navi支持\n   * 需要所有以前的修复\n * 10.15.3\n   * 不变\n   * 需要所有以前的修复\n * 10.15.4\n   * amd cpu用户需要更新cpuid_set_cpufamily补丁\n   * 修正了许多基于ellesmere的北极星gpu上的drm\n   * 需要之前所有的修复(不包括polaris drm的shikigva=80)\n * 10.15.5\n   * uhd 630的framebuffer坏了，如果你收到黑屏，你可能需要从07009b3e切换到00009b3e\n   * comet lake不再需要欺骗cpu id\n * 10.15.6\n   * 不变\n   * 需要10.15.5之前的所有修复\n * 10.15.7\n   * 不变\n   * 需要10.15.5之前的所有修复\n\nmacos big sur:\n\n * 11.0.1\n   * 查看这里: opencore 和 macos 11: big sur\n\nmacos monterey:\n\n * 12.0.1\n   * 查看这里: opencore 和 macos 12: monterey",charsets:{cjk:!0}},{title:"为什么你要USB映射",frontmatter:{},regularPath:"/usb/",relativePath:"usb/README.md",key:"v-478f963e",path:"/usb/",headers:[{level:2,title:"macOS和15端口限制",slug:"macos和15端口限制",normalizedTitle:"macos和15端口限制",charIndex:543},{level:2,title:"现在背景故事已经完成，让我们前往系统准备",slug:"现在背景故事已经完成-让我们前往系统准备",normalizedTitle:"现在背景故事已经完成，让我们前往系统准备",charIndex:1255}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"macOS和15端口限制 现在背景故事已经完成，让我们前往系统准备",content:"# 为什么你要USB映射\n\nUSB映射的过程是定义你到macOS的端口，并告诉它它们是什么类型，我们想这样做的原因是:\n\n * macOS很不擅长猜测你有什么样的端口\n * 一些端口可能会低于其额定速度(3.1端口运行在2.0)\n * 有些端口可能完全不能工作\n * 蓝牙无法使用\n * 某些服务，如切换可能无法正常工作\n * 睡眠可能会中断\n * 热插拔损坏\n * 甚至是来自XhciPortLimit的数据损坏\n\n所以现在你知道为什么你应该USB映射，我们现在可以谈谈USB映射的技术信息。这是一个你不能跳过的部分，否则下面的所有信息将看起来像是一个醉酒的斯拉夫人写的一个非常蹩脚的俄语翻译。\n\n因此，对于USB，我们需要了解并非所有端口都是相同的，有些端口实际上隐藏了其他端口!我的意思如下:\n\n * 一个USB 3.0端口实际上可以看作到macOS的两个端口:一个USB 2.0 和一个USB 3.0\n * 这也是USB保持向后兼容性的方式，因为所有USB 3.0设备必须支持USB 2.0\n\n现在让我们看一下USB端口的图，以便更好地理解这一点:\n\n\n\n现在让我们看一下USB端口的图，以便更好地理解这一点:\n\n现在有了基本的理解，我们现在要讨论可怕的15端口限制。\n\n\n# macOS和15端口限制\n\n现在让我带你回到2015年末OS X 10.11 El Capitan发布的时候。这是一个更新，在社区中建立了许多既让我们高兴又让我们痛苦的东西，如系统完整性保护和15端口限制。\n\n在macOS(当时称为OS X)中，15个端口的限制是严格限制每个控制器只有15个可能的端口，当我们查看主板上包含的芯片组端口时，这就成为一个问题:\n\n * Z170和更新的芯片组:总共26端口\n\n你甚至可能没有26个实际的端口，但它们仍然在你的ACPI表中声明，这导致了问题，因为macOS无法区分真正的端口和固件作者忘记删除的端口。\n\n> 但是为什么苹果选择15个端口作为限制呢?\n\n这就进入了计算机的一个有趣的子集，十六进制计数系统!它与十进制系统的不同之处在于，一共有15个值，最后一个值是0xF。这意味着，比起将端口限制扩展到255(0xFF)，停止在15要好得多。在苹果看来，端口超过15是没有意义的，因为他们支持的mac都没有超过这个限制。如果Mac Pro用户增加一个USB扩展卡，它就会有自己的15端口限制。\n\n现在当我们考虑怪异的XhciPortLimit时，你可以看到为什么会发生数据损坏。当我们超过0xF极限，进入其他人的空间时。所以，尽可能避免这种怪癖。\n\n * 注意:虽然XhciPortLimit这个名称看起来似乎是在限制XHCI端口的数量，但实际上它是在为XHCI端口限制打补丁，使其达到更高的值。\n\n> 那么USB集线器呢?\n\n连接到USB控制器端口的USB集线器有一种不同的端口限制。总的来说，一个USB端口可以拆分为127个端口。这包括USB集线器连接到USB集线器\n\n\n# 现在背景故事已经完成，让我们前往系统准备",normalizedContent:"# 为什么你要usb映射\n\nusb映射的过程是定义你到macos的端口，并告诉它它们是什么类型，我们想这样做的原因是:\n\n * macos很不擅长猜测你有什么样的端口\n * 一些端口可能会低于其额定速度(3.1端口运行在2.0)\n * 有些端口可能完全不能工作\n * 蓝牙无法使用\n * 某些服务，如切换可能无法正常工作\n * 睡眠可能会中断\n * 热插拔损坏\n * 甚至是来自xhciportlimit的数据损坏\n\n所以现在你知道为什么你应该usb映射，我们现在可以谈谈usb映射的技术信息。这是一个你不能跳过的部分，否则下面的所有信息将看起来像是一个醉酒的斯拉夫人写的一个非常蹩脚的俄语翻译。\n\n因此，对于usb，我们需要了解并非所有端口都是相同的，有些端口实际上隐藏了其他端口!我的意思如下:\n\n * 一个usb 3.0端口实际上可以看作到macos的两个端口:一个usb 2.0 和一个usb 3.0\n * 这也是usb保持向后兼容性的方式，因为所有usb 3.0设备必须支持usb 2.0\n\n现在让我们看一下usb端口的图，以便更好地理解这一点:\n\n\n\n现在让我们看一下usb端口的图，以便更好地理解这一点:\n\n现在有了基本的理解，我们现在要讨论可怕的15端口限制。\n\n\n# macos和15端口限制\n\n现在让我带你回到2015年末os x 10.11 el capitan发布的时候。这是一个更新，在社区中建立了许多既让我们高兴又让我们痛苦的东西，如系统完整性保护和15端口限制。\n\n在macos(当时称为os x)中，15个端口的限制是严格限制每个控制器只有15个可能的端口，当我们查看主板上包含的芯片组端口时，这就成为一个问题:\n\n * z170和更新的芯片组:总共26端口\n\n你甚至可能没有26个实际的端口，但它们仍然在你的acpi表中声明，这导致了问题，因为macos无法区分真正的端口和固件作者忘记删除的端口。\n\n> 但是为什么苹果选择15个端口作为限制呢?\n\n这就进入了计算机的一个有趣的子集，十六进制计数系统!它与十进制系统的不同之处在于，一共有15个值，最后一个值是0xf。这意味着，比起将端口限制扩展到255(0xff)，停止在15要好得多。在苹果看来，端口超过15是没有意义的，因为他们支持的mac都没有超过这个限制。如果mac pro用户增加一个usb扩展卡，它就会有自己的15端口限制。\n\n现在当我们考虑怪异的xhciportlimit时，你可以看到为什么会发生数据损坏。当我们超过0xf极限，进入其他人的空间时。所以，尽可能避免这种怪癖。\n\n * 注意:虽然xhciportlimit这个名称看起来似乎是在限制xhci端口的数量，但实际上它是在为xhci端口限制打补丁，使其达到更高的值。\n\n> 那么usb集线器呢?\n\n连接到usb控制器端口的usb集线器有一种不同的端口限制。总的来说，一个usb端口可以拆分为127个端口。这包括usb集线器连接到usb集线器\n\n\n# 现在背景故事已经完成，让我们前往系统准备",charsets:{cjk:!0}},{title:"USB Mapping",frontmatter:{},regularPath:"/usb/amd-mapping/amd.html",relativePath:"usb/amd-mapping/amd.md",key:"v-71251f53",path:"/usb/amd-mapping/amd.html",headers:[{level:2,title:"AMD and 3rd Party USB Mapping",slug:"amd-and-3rd-party-usb-mapping",normalizedTitle:"amd and 3rd party usb mapping",charIndex:38},{level:2,title:"Creating the map",slug:"creating-the-map",normalizedTitle:"creating the map",charIndex:71},{level:2,title:"Port mapping on screwed up DSDTs",slug:"port-mapping-on-screwed-up-dsdts",normalizedTitle:"port mapping on screwed up dsdts",charIndex:91},{level:2,title:"Port mapping with generic AppleUSB20XHCIPort/'AppleUSB30XHCIPort",slug:"port-mapping-with-generic-appleusb20xhciport-appleusb30xhciport",normalizedTitle:"port mapping with generic appleusb20xhciport/'appleusb30xhciport",charIndex:6273},{level:2,title:"Port mapping when you have multiple of the same controller",slug:"port-mapping-when-you-have-multiple-of-the-same-controller",normalizedTitle:"port mapping when you have multiple of the same controller",charIndex:127},{level:3,title:"IOPathMatch property",slug:"iopathmatch-property",normalizedTitle:"iopathmatch property",charIndex:7238},{level:3,title:"SSDT Recreation",slug:"ssdt-recreation",normalizedTitle:"ssdt recreation",charIndex:7360}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"AMD and 3rd Party USB Mapping Creating the map Port mapping on screwed up DSDTs Port mapping with generic AppleUSB20XHCIPort/'AppleUSB30XHCIPort Port mapping when you have multiple of the same controller IOPathMatch property SSDT Recreation",content:"# USB Mapping\n\nTable of Contents:\n\n * AMD and 3rd Party USB Mapping\n * Creating the map\n * Port mapping on screwed up DSDTs\n * Port mapping when you have multiple of the same controller\n\nSo with the prerequisites out of the way, we can finally get to the meat of this guide. And now we get to finally read one of my favorite books before I go to bed each night: The Advanced Configuration and Power Interface (ACPI) Specification!\n\nNow if you haven't read through this before(which I highly recommend you do, it's a thrilling tale), I'll point you to the meat of the USB situation:\n\n * Section 9.14: _UPC (USB Port Capabilities)\n\nHere we're greeted with all the possible USB ports in ACPI:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\n\n# AMD and 3rd Party USB Mapping\n\nThe steps are quite simple:\n\n * Read this guide\n * Cry a bit\n * Cry some more\n * Buy some Intel hardware\n * Return said hardware\n * Gather courage to USB map on AMD\n * Read the rest of the guide again and actually USB map\n\n\n# Creating the map\n\nSo to start off, open IORegistryExplorer and find the USB controller you'd wish to map. For controllers, they come in some variations:\n\n * XHC\n * XHC0\n * XHC1\n * XHC2\n * XHCI\n * XHCX\n * AS43\n * PTXH (Commonly associated with AMD Chipset controllers)\n * PTCP (Found on AsRock X399, in ACPI these ports are actually called PXTX but macOS will enumerate them differently)\n * PXSX(This is a generic PCIe device, double check it's a USB device)\n\nThe best way to find controllers is by searching for XHC and then looking at the results that come up, the parent of all the ports is the USB controller. Do note that many boards have multiple controllers but the port limit is per controller.\n\nFor today's example, we'll be both adding missing ports and getting under the 15 port limit for this X399 chipset which has the identifier PTXH\n\n\n\nAs you can see from the photo above, we're missing a shit ton of ports! Specifically ports POT3, POT4, POT7, POT8, PO12, PO13, PO15, PO16, PO17, PO18, PO19, PO20, PO21, PO22!\n\nSo how do we fix this? Well if you look in the corner you'll see the port value. This is going to be important to us when mapping\n\nNext, let's take a peek at our DSDT and check for our PTXH device with maciASL:\n\nTOP OF PTXH   BOTTOM OF PTXH\n              \n\nAll of our ports are here! So why in the world is macOS hiding them? Well there's a couple of reasons but this being the main: Conflicting SMBIOS USB map\n\nInside the AppleUSBHostPlatformProperties.kext you'll find the USB map for most SMBIOS, this means that that machine's USB map is forced onto your system.\n\nWell to kick out these bad maps, we gotta make a plugin kext. For us, that's the AMD-USB-Map.kext\n\nNow right-click and press Show Package Contents, then navigate to Contents/Info.plist\n\nIf the port values don't show in Xcode, right click and select Show Raw Keys/Values\n\nSo what kind of data do we shove into this plist? Well, there are a couple of sections to note:\n\n * Model: SMBIOS the kext will match against, set this up to what SMBIOS you are currently using\n * IONameMatch: The name of the controller it'll match against, in this example we'll use PTXH\n   * IOPathMatch is another entry you can use instead, if you have multiple controllers with the same name(ie. 2 XHC0)\n * port-count: The last/largest port value that you want to be injected\n * port: The address of the USB controller\n * UsbConnector: The type of USB connector, which can be found on the ACPI 6.3 spec, section 9.14\n\n> How do I know which ports are 2.0 and which are 3.0?\n\nWell, the easiest way is grabbing a USB 2.0 and USB 3.0 device, then write down which ports are what type from observing IOReg.\n\n * Remember: USB 3.0 ports have dual personalities, so you must test both a 2.0 drive and 3.0 to know which ports are associated with it in IOReg.\n\nNow, let's take this section:\n\nDevice (PO18)\n   {\n   Name (_ADR, 0x12) // _ADR: Address\n   Name (_UPC, Package (0x04) // _UPC: USB Port Capabilities\n      {\n         Zero,\n         0xFF,\n         Zero,\n         Zero\n      })\n   }\n\n\nFor us, what matters is the Name (_ADR, 0x12) // _ADR: Address as this tells us the location of the USB port. This value will be turned into our port value on the plist. Some DSDTs don't declare their USB address, for these situations we can see their IOReg properties.\n\n\n\nReminder: Don't drag and drop the kext, read the guide carefully. Rename IONameMatch value to the correct controller you're wanting to map and verify that the ports are named correctly to your DSDT. If you could drag and drop it and have it work for everyone there wouldn't be a guide ;p\n\nNow save and add this to both your kext folder and config.plist then reboot!\n\nNow we can finally start to slowly remove unwanted ports from the Info.plist and remove the XhciPortLimit quirk once you have 15 ports total or less per controller.\n\n\n# Port mapping on screwed up DSDTs\n\nSomething you may have noticed is that your DSDT is even missing some ports, like for example:\n\n\n\nIn this DSDT, we're missing HS02, HS03, HS04, HS05, etc. When this happens, we actually need to outright remove all our ports from that controller in our DSDT. What this will let us do is allow macOS to build the ports itself instead of basing it off of the ACPI. Save this modified DSDT.aml and place it in your EFI/OC/ACPI folder and specify it in your config.plist -> ACPI -> Add(note that DSDT.aml must be forced to work correctly)\n\n\n# Port mapping with generic AppleUSB20XHCIPort/'AppleUSB30XHCIPort\n\nAn odd issue with some OEM's ACPI is that they never actually define or properly name the USB ports. And so when macOS's IOService starts scanning and building the ports, they're given a generic name. This makes it difficult to really know where your ports are.\n\nTo resolve this, we can simply add names with our USBmap.kext, this is thanks to us matching the USB map based off of the USB port's location instead of by name.\n\nSo before you USB map, you'll get something like this:\n\n\n\nWith our map, your kext should look something like this:\n\n\n\nAnd the end result once the map is applied:\n\n\n\n\n# Port mapping when you have multiple of the same controller\n\nThis becomes a problem when we run systems with many USB controllers which all want to have the same identifier, commonly being multiple XHC0 devices or AsMedia controllers showing up as generic PXSX devices. To fix this, we have 3 options:\n\n * IOPathMatch property\n * ACPI Rename (won't be covered in this guide, see ACPI section of OpenCore's configuration.pdf)\n * SSDT Recreation\n\n\n# IOPathMatch property\n\nActually quite simple, grab the sample USBmap.kext we provided earlier and look for the IONameMatch Property. Now rename this to IOPathMatch.\n\nFinally, grab IOreg and look for your USB controller:\n\n\n\nFrom here, pay very close attention to which actual device I selected. Specifically the child of XHC0@0,3 being XHC0@61000000, reason for this is that's our Root-hub(or what macOS uses to enumerate ports) The child with the same name is actually a root hub but does not concern us\n\nNow copy the XHC0@61000000 entry and paste it back into the IOPathMatch entry in our USBmap.kext's info.plist, this should result in quite a long path name:\n\nIOService:/AppleACPIPlatformExpert/S0D1@0/AppleACPIPCI/D1C0@7,1/IOPP/XHC0@0,3/XHC0@61000000\n\n\nAnd once done your USBmap's IOPathMatch should look like this:\n\n\n\n\n# SSDT Recreation\n\nWith the SSDT Recreation method, what we'll be doing is \"renaming\" the device but in reality creating a brand new device just for macOS that is in the exact same spot as your old USB controller.\n\nTo do this, grab the following SSDT:\n\n * SSDT-SHC0.dsl\n\nWhat you'll want to do is find a controller you want to rename, find its full ACPI path and replace the one in the sample SSDT. In our sample, we're be renaming PCI0.GP13.XHC0 to SHC0 so change accordingly.\n\n\n\nNote: In rare cases, macOS isn't able to properly rebuild the USB ports with the new \"fake\" USB controller. In these situations we need to manually add ports to it that are present in the original controller(ie. HS01, HS02, POT1, etc)\n\n> But how do I map a non-standard controller that shows up as PXSX?\n\nSimilar idea to regular SSDT renaming except you need to actually find the controller. This becomes difficult as SSDs, network controllers, and other generic PCIe devices can also show up as PXSX. Check the ACPI-path in IOreg to find its path:\n\n\n\nAs we can see, IOACPIPlane:/_SB/PC00@0/RP05@1c0004/PXSX@0 would be interpreted as SB.PC00.RP05.PXSX\n\nAnd so from the above SSDT, we change the following:\n\n * External (_SB_.PCI0.GP13, DeviceObj) -> External (_SB_.PC00.RP05, DeviceObj)\n * External (_SB_.PCI0.GP13.XHC0, DeviceObj) -> External (_SB_.PC00.RP05.PXSX, DeviceObj)\n * Scope (\\_SB.PCI0.GP13) -> Scope (\\_SB.PC00.RP05)\n * Scope (XHC0) -> Scope (PXSX)",normalizedContent:"# usb mapping\n\ntable of contents:\n\n * amd and 3rd party usb mapping\n * creating the map\n * port mapping on screwed up dsdts\n * port mapping when you have multiple of the same controller\n\nso with the prerequisites out of the way, we can finally get to the meat of this guide. and now we get to finally read one of my favorite books before i go to bed each night: the advanced configuration and power interface (acpi) specification!\n\nnow if you haven't read through this before(which i highly recommend you do, it's a thrilling tale), i'll point you to the meat of the usb situation:\n\n * section 9.14: _upc (usb port capabilities)\n\nhere we're greeted with all the possible usb ports in acpi:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\n\n# amd and 3rd party usb mapping\n\nthe steps are quite simple:\n\n * read this guide\n * cry a bit\n * cry some more\n * buy some intel hardware\n * return said hardware\n * gather courage to usb map on amd\n * read the rest of the guide again and actually usb map\n\n\n# creating the map\n\nso to start off, open ioregistryexplorer and find the usb controller you'd wish to map. for controllers, they come in some variations:\n\n * xhc\n * xhc0\n * xhc1\n * xhc2\n * xhci\n * xhcx\n * as43\n * ptxh (commonly associated with amd chipset controllers)\n * ptcp (found on asrock x399, in acpi these ports are actually called pxtx but macos will enumerate them differently)\n * pxsx(this is a generic pcie device, double check it's a usb device)\n\nthe best way to find controllers is by searching for xhc and then looking at the results that come up, the parent of all the ports is the usb controller. do note that many boards have multiple controllers but the port limit is per controller.\n\nfor today's example, we'll be both adding missing ports and getting under the 15 port limit for this x399 chipset which has the identifier ptxh\n\n\n\nas you can see from the photo above, we're missing a shit ton of ports! specifically ports pot3, pot4, pot7, pot8, po12, po13, po15, po16, po17, po18, po19, po20, po21, po22!\n\nso how do we fix this? well if you look in the corner you'll see the port value. this is going to be important to us when mapping\n\nnext, let's take a peek at our dsdt and check for our ptxh device with maciasl:\n\ntop of ptxh   bottom of ptxh\n              \n\nall of our ports are here! so why in the world is macos hiding them? well there's a couple of reasons but this being the main: conflicting smbios usb map\n\ninside the appleusbhostplatformproperties.kext you'll find the usb map for most smbios, this means that that machine's usb map is forced onto your system.\n\nwell to kick out these bad maps, we gotta make a plugin kext. for us, that's the amd-usb-map.kext\n\nnow right-click and press show package contents, then navigate to contents/info.plist\n\nif the port values don't show in xcode, right click and select show raw keys/values\n\nso what kind of data do we shove into this plist? well, there are a couple of sections to note:\n\n * model: smbios the kext will match against, set this up to what smbios you are currently using\n * ionamematch: the name of the controller it'll match against, in this example we'll use ptxh\n   * iopathmatch is another entry you can use instead, if you have multiple controllers with the same name(ie. 2 xhc0)\n * port-count: the last/largest port value that you want to be injected\n * port: the address of the usb controller\n * usbconnector: the type of usb connector, which can be found on the acpi 6.3 spec, section 9.14\n\n> how do i know which ports are 2.0 and which are 3.0?\n\nwell, the easiest way is grabbing a usb 2.0 and usb 3.0 device, then write down which ports are what type from observing ioreg.\n\n * remember: usb 3.0 ports have dual personalities, so you must test both a 2.0 drive and 3.0 to know which ports are associated with it in ioreg.\n\nnow, let's take this section:\n\ndevice (po18)\n   {\n   name (_adr, 0x12) // _adr: address\n   name (_upc, package (0x04) // _upc: usb port capabilities\n      {\n         zero,\n         0xff,\n         zero,\n         zero\n      })\n   }\n\n\nfor us, what matters is the name (_adr, 0x12) // _adr: address as this tells us the location of the usb port. this value will be turned into our port value on the plist. some dsdts don't declare their usb address, for these situations we can see their ioreg properties.\n\n\n\nreminder: don't drag and drop the kext, read the guide carefully. rename ionamematch value to the correct controller you're wanting to map and verify that the ports are named correctly to your dsdt. if you could drag and drop it and have it work for everyone there wouldn't be a guide ;p\n\nnow save and add this to both your kext folder and config.plist then reboot!\n\nnow we can finally start to slowly remove unwanted ports from the info.plist and remove the xhciportlimit quirk once you have 15 ports total or less per controller.\n\n\n# port mapping on screwed up dsdts\n\nsomething you may have noticed is that your dsdt is even missing some ports, like for example:\n\n\n\nin this dsdt, we're missing hs02, hs03, hs04, hs05, etc. when this happens, we actually need to outright remove all our ports from that controller in our dsdt. what this will let us do is allow macos to build the ports itself instead of basing it off of the acpi. save this modified dsdt.aml and place it in your efi/oc/acpi folder and specify it in your config.plist -> acpi -> add(note that dsdt.aml must be forced to work correctly)\n\n\n# port mapping with generic appleusb20xhciport/'appleusb30xhciport\n\nan odd issue with some oem's acpi is that they never actually define or properly name the usb ports. and so when macos's ioservice starts scanning and building the ports, they're given a generic name. this makes it difficult to really know where your ports are.\n\nto resolve this, we can simply add names with our usbmap.kext, this is thanks to us matching the usb map based off of the usb port's location instead of by name.\n\nso before you usb map, you'll get something like this:\n\n\n\nwith our map, your kext should look something like this:\n\n\n\nand the end result once the map is applied:\n\n\n\n\n# port mapping when you have multiple of the same controller\n\nthis becomes a problem when we run systems with many usb controllers which all want to have the same identifier, commonly being multiple xhc0 devices or asmedia controllers showing up as generic pxsx devices. to fix this, we have 3 options:\n\n * iopathmatch property\n * acpi rename (won't be covered in this guide, see acpi section of opencore's configuration.pdf)\n * ssdt recreation\n\n\n# iopathmatch property\n\nactually quite simple, grab the sample usbmap.kext we provided earlier and look for the ionamematch property. now rename this to iopathmatch.\n\nfinally, grab ioreg and look for your usb controller:\n\n\n\nfrom here, pay very close attention to which actual device i selected. specifically the child of xhc0@0,3 being xhc0@61000000, reason for this is that's our root-hub(or what macos uses to enumerate ports) the child with the same name is actually a root hub but does not concern us\n\nnow copy the xhc0@61000000 entry and paste it back into the iopathmatch entry in our usbmap.kext's info.plist, this should result in quite a long path name:\n\nioservice:/appleacpiplatformexpert/s0d1@0/appleacpipci/d1c0@7,1/iopp/xhc0@0,3/xhc0@61000000\n\n\nand once done your usbmap's iopathmatch should look like this:\n\n\n\n\n# ssdt recreation\n\nwith the ssdt recreation method, what we'll be doing is \"renaming\" the device but in reality creating a brand new device just for macos that is in the exact same spot as your old usb controller.\n\nto do this, grab the following ssdt:\n\n * ssdt-shc0.dsl\n\nwhat you'll want to do is find a controller you want to rename, find its full acpi path and replace the one in the sample ssdt. in our sample, we're be renaming pci0.gp13.xhc0 to shc0 so change accordingly.\n\n\n\nnote: in rare cases, macos isn't able to properly rebuild the usb ports with the new \"fake\" usb controller. in these situations we need to manually add ports to it that are present in the original controller(ie. hs01, hs02, pot1, etc)\n\n> but how do i map a non-standard controller that shows up as pxsx?\n\nsimilar idea to regular ssdt renaming except you need to actually find the controller. this becomes difficult as ssds, network controllers, and other generic pcie devices can also show up as pxsx. check the acpi-path in ioreg to find its path:\n\n\n\nas we can see, ioacpiplane:/_sb/pc00@0/rp05@1c0004/pxsx@0 would be interpreted as sb.pc00.rp05.pxsx\n\nand so from the above ssdt, we change the following:\n\n * external (_sb_.pci0.gp13, deviceobj) -> external (_sb_.pc00.rp05, deviceobj)\n * external (_sb_.pci0.gp13.xhc0, deviceobj) -> external (_sb_.pc00.rp05.pxsx, deviceobj)\n * scope (\\_sb.pci0.gp13) -> scope (\\_sb.pc00.rp05)\n * scope (xhc0) -> scope (pxsx)",charsets:{}},{title:"USB Mapping",frontmatter:{},regularPath:"/usb/intel-mapping/intel.html",relativePath:"usb/intel-mapping/intel.md",key:"v-1474475a",path:"/usb/intel-mapping/intel.html",headers:[{level:3,title:"This guide is  outdated, see USBMap's README for updated information until this guide is rewritten",slug:"this-guide-is-outdated-see-usbmap-s-readme-for-updated-information-until-this-guide-is-rewritten",normalizedTitle:"this guide is  outdated, see usbmap's readme for updated information until this guide is rewritten",charIndex:null},{level:3,title:"Intel USB Mapping",slug:"intel-usb-mapping",normalizedTitle:"intel usb mapping",charIndex:140}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"This guide is  outdated, see USBMap's README for updated information until this guide is rewritten Intel USB Mapping",content:"# USB Mapping\n\n\n# This guide is outdated, see USBMap's README for updated information until this guide is rewritten\n\nTable of Contents:\n\n * Intel USB Mapping\n\nSo with the prerequisites out of the way, we can finally get to the meat of this guide. And now we get to finally read one of my favorite books before I go to bed each night: The Advanced Configuration and Power Interface (ACPI) Specification!\n\nNow if you haven't read through this before(which I highly recommend you do, it's a thrilling tale), I'll point you to the meat of the USB situation:\n\n * Section 9.14: _UPC (USB Port Capabilities)\n\nHere we're greeted with all the possible USB ports in ACPI:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\n\n# Intel USB Mapping\n\nUSB mapping on Intel is super easy mainly because both the ACPI is sane and more tools available for the platform. For this guide we'll be using the USBmap tool from CorpNewt.\n\nNow open up USBmap.command and select D. Discover Ports:\n\n\n\nThe interface for USBmap is quite simple and easy to grasp so won't go into detail here, the README.md should do you well enough. The basic idea is insert a device, give it a name to remember the port by, remove and then try another port until you have a whole list of ports you want to keep.\n\n * Note: USRx(ie. USR1, USR2) ports are not real USB ports, they're specifically USBR ports which macOS has no support for(and why real Macs don't have this). These can be excluded from your USB map.\n\nOnce you're done discovering your ports, select Press Q then [enter] to stop then head to P. Edit Plist & Create SSDT/Kext from the main menu.\n\nFor this example, I'll choose all the ports that were discovered, remember that there is a 15 port limit so you cannot go over it. USB hubs will count as one USB port so you can expand from there if you are limited on ports.\n\n\n\nT:1,3,4,5,6,7,16,17,19,21,22:3\n\n\nThe above will set all ports listed to type 3 which is USB 3.0.\n\nT:9:255\n\n\nThis will set my Bluetooth to internal, this is super important as macOS expects Bluetooth to always be internal.\n\n\n\nNow we can select K. Build USBMap.kext and let it build our kext for us.\n\nNote: Do not use either the SSDT-UIAC.aml or USBInjectAll with the USBmap.kext. This kext we just made should be used by itself with no other USB kexts besides XhciUnsupported if your system needs it. Reason for this is USBInjectAll is no longer being maintained and the USBmap.kext version is how real Macs USB map as well so as close to \"Apple Like\" as possible to fit the OpenCore mood.\n\nNow reboot and run USBmap again, you should see a lot less ports in your map:\n\n",normalizedContent:"# usb mapping\n\n\n# this guide is outdated, see usbmap's readme for updated information until this guide is rewritten\n\ntable of contents:\n\n * intel usb mapping\n\nso with the prerequisites out of the way, we can finally get to the meat of this guide. and now we get to finally read one of my favorite books before i go to bed each night: the advanced configuration and power interface (acpi) specification!\n\nnow if you haven't read through this before(which i highly recommend you do, it's a thrilling tale), i'll point you to the meat of the usb situation:\n\n * section 9.14: _upc (usb port capabilities)\n\nhere we're greeted with all the possible usb ports in acpi:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\n\n# intel usb mapping\n\nusb mapping on intel is super easy mainly because both the acpi is sane and more tools available for the platform. for this guide we'll be using the usbmap tool from corpnewt.\n\nnow open up usbmap.command and select d. discover ports:\n\n\n\nthe interface for usbmap is quite simple and easy to grasp so won't go into detail here, the readme.md should do you well enough. the basic idea is insert a device, give it a name to remember the port by, remove and then try another port until you have a whole list of ports you want to keep.\n\n * note: usrx(ie. usr1, usr2) ports are not real usb ports, they're specifically usbr ports which macos has no support for(and why real macs don't have this). these can be excluded from your usb map.\n\nonce you're done discovering your ports, select press q then [enter] to stop then head to p. edit plist & create ssdt/kext from the main menu.\n\nfor this example, i'll choose all the ports that were discovered, remember that there is a 15 port limit so you cannot go over it. usb hubs will count as one usb port so you can expand from there if you are limited on ports.\n\n\n\nt:1,3,4,5,6,7,16,17,19,21,22:3\n\n\nthe above will set all ports listed to type 3 which is usb 3.0.\n\nt:9:255\n\n\nthis will set my bluetooth to internal, this is super important as macos expects bluetooth to always be internal.\n\n\n\nnow we can select k. build usbmap.kext and let it build our kext for us.\n\nnote: do not use either the ssdt-uiac.aml or usbinjectall with the usbmap.kext. this kext we just made should be used by itself with no other usb kexts besides xhciunsupported if your system needs it. reason for this is usbinjectall is no longer being maintained and the usbmap.kext version is how real macs usb map as well so as close to \"apple like\" as possible to fit the opencore mood.\n\nnow reboot and run usbmap again, you should see a lot less ports in your map:\n\n",charsets:{}},{title:"USB Mapping",frontmatter:{},regularPath:"/usb/manual/manual.html",relativePath:"usb/manual/manual.md",key:"v-1fe02573",path:"/usb/manual/manual.html",headers:[{level:2,title:"USB Mapping: The manual way",slug:"usb-mapping-the-manual-way",normalizedTitle:"usb mapping: the manual way",charIndex:1411},{level:2,title:"Finding your USB ports",slug:"finding-your-usb-ports",normalizedTitle:"finding your usb ports",charIndex:2625},{level:3,title:"Finding which ports match with which controller",slug:"finding-which-ports-match-with-which-controller",normalizedTitle:"finding which ports match with which controller",charIndex:4441},{level:3,title:"USB-A mapping",slug:"usb-a-mapping",normalizedTitle:"usb-a mapping",charIndex:4922},{level:3,title:"Creating a personal map",slug:"creating-a-personal-map",normalizedTitle:"creating a personal map",charIndex:5910},{level:3,title:"USB-C mapping",slug:"usb-c-mapping",normalizedTitle:"usb-c mapping",charIndex:6443},{level:3,title:"Continuing mapping",slug:"continuing-mapping",normalizedTitle:"continuing mapping",charIndex:7409},{level:3,title:"Special Notes",slug:"special-notes",normalizedTitle:"special notes",charIndex:7634},{level:2,title:"Creating our kext",slug:"creating-our-kext",normalizedTitle:"creating our kext",charIndex:10368},{level:3,title:"Determining the properties",slug:"determining-the-properties",normalizedTitle:"determining the properties",charIndex:11483},{level:3,title:"IOProviderMergeProperties",slug:"ioprovidermergeproperties",normalizedTitle:"ioprovidermergeproperties",charIndex:11408},{level:3,title:"Continuing on",slug:"continuing-on",normalizedTitle:"continuing on",charIndex:15572},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:15892}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"USB Mapping: The manual way Finding your USB ports Finding which ports match with which controller USB-A mapping Creating a personal map USB-C mapping Continuing mapping Special Notes Creating our kext Determining the properties IOProviderMergeProperties Continuing on Cleaning up",content:"# USB Mapping\n\nSo with the prerequisites out of the way, we can finally get to the meat of this guide. And now we get to finally read one of my favorite books before I go to bed each night: The Advanced Configuration and Power Interface (ACPI) Specification!\n\nNow if you haven't read through this before(which I highly recommend you do, it's a thrilling tale), I'll point you to the meat of the USB situation:\n\n * Section 9.14: _UPC (USB Port Capabilities)\n\nHere we're greeted with all the possible USB ports in ACPI:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\n\n# USB Mapping: The manual way\n\nThis section is for those who want to get down into the meats of their hackintosh, to really understand what it's doing and help if there's any issues with USBmap.py and other mapping tools. To start, we'll need a few things:\n\n * Installed version of macOS\n   * This is due to how macOS enumerates ports, trying to map from other OSes makes this difficult\n   * Note: This guide will be focusing on OS X 10.11, El Capitan and newer. Older OSes shouldn't require any USB mapping\n * Non-conflicting USB names\n   * See previous section: Checking what renames you need\n * A USB 2.0 and USB 3.0 device to test with\n   * You must have 2 separate devices as to ensure no mix ups with personalities\n * IORegistryExplorer.app\n   * To view the inner workings of macOS more easily\n   * If you plan to use Discord for troubleshooting, v2.1.0 is a bit easier on file size.\n * USBInjectAll\n   * This is only required for older USB controllers like Broadwell and older, however some Coffee Lake systems may still require it\n   * Reminder this kext does not work on AMD\n * Sample-USB-Map.kext\n * ProperTree\n   * Or any other plist editor\n\nNow with all this out of the way, lets get to USB mapping!\n\n\n# Finding your USB ports\n\nLets open our previously downloaded IORegistryExplorer.app and search for our USB controller(s).\n\nThe 2 main search terms are XHC and EHC, but if you have a legacy board with UHCI or OHCI controllers you'll need to adjust. A blanket USB search may show too many entries and confuse you.\n\nFor this example, lets try and map an Asus X299-E Strix board:\n\n\n\nFrom the above image we can see 3 USB controllers:\n\n * PXSX(1, Top)\n * PXSX(2, Middle)\n * XHCI(3, Bottom)\n\nPay attention that they're individual controllers, as this means each USB controller has it's own port limit. So you're not as starved for USB ports as you may think.\n\nNow I personally know which USB controllers match up with which physical ports, problem is it's not always as obvious which ports match with which controllers. So lets try to figure out which is what.\n\nNote: The AppleUSBLegacyRoot entry is an entry that lists all active USB controllers and ports, these are not USB controllers themselves so you can outright ignore them.\n\nNote 2: Keep in mind every motherboard model will have a unique set of port combos, controller types and names. So while our example uses PXSX, yours might have the XHC0 or PTCP name. And quite common on older motherboards is that you may only have 1 controller, this is alright so don't stress about having the exact same setup as the example.\n\nCommon names you can check:\n\n * USB 3.x controllers:\n   * XHC\n   * XHC0\n   * XHC1\n   * XHC2\n   * XHCI\n   * XHCX\n   * AS43\n   * PTXH\n     * Commonly associated with AMD Chipset controllers\n   * PTCP\n     * Found on AsRock X399\n   * PXSX\n     * This is a generic PCIe device, double check it's a USB device as NVMe controllers and other devices can use the same name.\n * USB 2.x controllers:\n   * EHCI\n   * EHC1\n   * EHC2\n   * EUSB\n   * USBE\n\n\n# Finding which ports match with which controller\n\nTo start, I'm going to plug a USB device into my front USB 3.1(Type-A) and 3.2(Type-C):\n\n\n\nNext lets look at IOReg, and we can see where our USB devices fell:\n\nUSB-C   USB-A\n        \n\nHere we see a few things:\n\n * Front 3.2 Type-C is on the PXSX(2, middle) Controller\n * Front 3.1 Type-A is on the XHCI(3, Bottom) Controller\n\nNow that we have an idea of which ports go to which controller, can can now look into how we USB map.\n\n\n# USB-A mapping\n\nAs mentioned before, USB 3.x ports are split into 2 personalities: USB 2.0 and USB 3.0. This is to ensure backwards compatibility but macOS itself has difficulties determining which personalities match up to which ports. That's where we come in to help.\n\nSo lets take our USB-A port, when we plug in a USB 3.0 device into it we see XHCI -> SS03 light up. This is the USB 3.0 personality of the port. Now we'll want to plug a USB 2.0 device into that port:\n\n3.0 PERSONALITY   2.0 PERSONALITY\n                  \n\nWe see that the USB 2.0 personality of our 3.0 port is XHCI -> HS03, now you should be able to get an idea of what we're trying to do:\n\n * Front Type-A:\n   * HS03: 2.0 Personality\n   * SS03: 3.0 Personality\n\nNote: If your USB ports show up as either AppleUSB20XHCIPort or AppleUSB30XHCIPort, you can still map however it will be a bit more difficult. Instead of writing down the names, pay very close attention to the port property on the right hand side:\n\n\n\n\n# Creating a personal map\n\nThis is where we pull out pen and paper, and start to write down which ports physically match up with which digital ports. An example of what your map can look like:\n\nNAME MAPPING   PROPERTY MAPPING\n               \n\nYour own map doesn't need to look exactly like this, however you'll want something that you can easily understand and refer to down the line.\n\nNote:\n\n * Name Mapping: When a proper name shows up in IOReg(ie. HS01)\n * Property Mapping: When no proper name is given(ie. AppleUSB30XHCIPort)\n\n\n# USB-C mapping\n\nNext lets map our USB-C port, this is where it gets quite tricky as you may have noticed earlier:\n\nTYPE   INFO                                                    COMMENTS\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n\nSo when we map our USB-C header, we notice it occupies the SS01 port. But when we flip it, we actually populate it on the SS02 port. When this happens, you'll want to write this down for when we apply the port type.\n\n * Note: All personalities from this port will be put under the Type 10\n * Note 2: Not all USB-C headers will be Type 10, double check yours\n\n\n\n\n# Continuing mapping\n\nNow that you have the basic idea, you'll want to go around with every USB port and map it out. This will take time, and don't forget to write it down. Your final diagram should look similar to this:\n\n\n\n\n# Special Notes\n\n * Bluetooth\n * USRx Ports\n * Missing USB Ports\n\n# Bluetooth\n\nSo while not obvious to many, Bluetooth actually runs over the USB interface internally. This means that when mapping, you'll need to pay close attention to devices that already show up in IOReg:\n\n\n\nKeep this in mind, as this plays into the Type 255 and getting certain services like handoff working correctly.\n\n# USRx Ports\n\nWhen mapping, you may notice some extra ports left over, specifically USR1 and USR2. These ports are known as \"USBR\" ports, or more specifically USB Redirection Ports. Use of these is for remote management but real Macs don't ship with USBR devices and so has no support for them OS-wise. You can actually ignore these entries in your USB map:\n\n\n\n# Missing USB ports\n\nIn some rare situations, certain USB ports may not show up in macOS at all. This is likely due to a missing definition in your ACPI tables, and so we have a few options:\n\n * Coffee Lake and older should use USBInjectAll\n   * Don't forget to add this to both EFI/OC/Kexts and you config.plist's kernel -> Add\n * Comet Lake and newer should use SSDT-RHUB\n * AMD systems should also use SSDT-RHUB\n\nSSDT-RHUB's purpose is to reset your USB controller, and force macOS to reenumerate them. This avoids the hassle of trying to patch your existing ACPI tables.\n\nTo create your own SSDT-RHUB-MAP:\n\n * Grab a copy of the SSDT: SSDT-RHUB.dsl\n * Grab maciASL\n\nNext, open our newly downloaded SSDT with maciASL, you should be presented with the following:\n\n\n\nNow, open IOReg and find the USB controller you want to reset(pay very close attention its the USB controller and not the child RHUB with the same name):\n\nIf you look to the right side, you should see the acpi-apth property. Here we're going to need to translate it to something our SSDT can use:\n\n# before modifying\nIOService:/AppleACPIPlatformExpert/PC00@0/AppleACPIPCI/RP05@1C,4/IOPP/PXSX@0\n\n\nNow we'll want to strip out any unnecessary data:\n\n * IOService:/AppleACPIPlatformExpert/\n * @##\n * IOPP\n\nOnce cleaned up, yours should look similar:\n\n# After modifying\nPC00.RP05.PXSX\n\n\nFollowing the example from above, we'll be renaming PCI0.XHC1.RHUB to PC00.RP05.PXSX.RHUB:\n\nBefore:\n\nExternal (_SB_.PCI0.XHC1.RHUB, DeviceObj) <- Rename this\n\nScope (_SB.PCI0.XHC1.RHUB) <- Rename this\n\n\n\n\nFollowing the example pathing we found, the SSDT should look something like this:\n\nAfter:\n\nExternal (_SB.PC00.RP05.PXSX.RHUB, DeviceObj) <- Renamed\n\nScope (_SB.PC00.RP05.PXSX.RHUB) <- Renamed\n\n\n\n\nOnce you've edited the SSDT to your USB controller's path, you can export it with File -> SaveAs -> ACPI Machine Language Binary:\n\n\n\nFinally, remember to add this SSDT to both EFI/OC/ACPI and your config.plist under ACPI -> Add.\n\n\n# Creating our kext\n\nIts the time you've all been waiting for, we finally get to create our USB map!\n\nFirst off, we'll want to grab a sample USB map kext:\n\n * Sample-USB-Map.kext\n\nNext right click the .kext, and select Show Package Contents. then drill down to the info.plist:\n\nSHOW CONTENTS   INFO.PLIST\n                \n\nNow lets open ProperTree and look at this info.plist:\n\n\n\nHere we see a few sections, under IOKitPersonalities:\n\n * RP05 - PXSX(1)\n * RP07 - PXSX(2)\n * XHCI - XHCI\n\nEach entry here represents a USB controller, specifically the map for each controller. The names of the entry don't matter much however, it's more for book keeping so you know which entry to has which USB map.\n\nNext lets head into the RP05 - PXSX(1) entry:\n\n\n\nHere we see a few more important properties:\n\nPROPERTY                    COMMENT\nIOPathMatch                 The device macOS will choose to attach the map to\nIOProviderClass             The USB driver macOS will choose to attach\nmodel                       The SMBIOS the USB map attaches too\nIOProviderMergeProperties   The dictionary holding the actual port map\n\n\n# Determining the properties\n\nDetermining the value for each property is actually quite straight forward:\n\n * IOPathMatch\n * IOProviderClass\n * model\n * IOProviderMergeProperties\n\n# IOPathMatch\n\nFinding IOPathMatch is super easy, first find the USB controller you want to map and then select the Root HUB(so the PXSX child with the same name as the parent, don't worry it's less confusing when you look at the image):\n\n\n\nNow with the PXSX entry selected, simply copy(Cmd+C) and paste it into our info.plist. Your property should look similar to the below:\n\nIOService:/AppleACPIPlatformExpert/PC00@0/AppleACPIPCI/RP05@1C,4/IOPP/PXSX@0/PXSX@01000000\n\n\nNote: Each USB Controller will have a unique IOPathMatch value, keep this in mind if you have multiple controllers of the same name. This Asus X299 board has 2 PXSX USB controllers, so each new USB map dictionary will have a unique entry for IOPathMatch.\n\n# IOProviderClass\n\nFinding IOProviderClass is also easy, select the Root-hub once again and look for the CFBundleIdentifier value:\n\nIOREG   INFO.PLIST\n        \n\nNow we can't take that value 1-1, instead we need to trim it to the Kext's short name being AppleUSBXHCIPCI(So we removed com.apple.driver.usb.)\n\n# model\n\nIf you've forgotten what SMBIOS you're using, you can simply check the top level device in IOReg:\n\nIOREG   INFO.PLIST\n        \n\n\n# IOProviderMergeProperties\n\nNow lets open the IOProviderMergeProperties dictionary:\n\n\n\nHere we have a lot of data to work through:\n\nPROPERTY       COMMENT\nname           The name of the USB port's dictionary\nport-count     This is the largest port value you're injecting\nUsbConnector   This is the type of USB port as mentioned in the ACPI 9.14\n               section\nport           The physical location of your USB port in ACPI\nComment        An optional entry to help you keep track of all your ports\n\nAnd a reminder of all possible port types:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\nIt should be coming full circle now, as you can see how our previous work with mapping out our ports works.\n\n# Name\n\nThe name property is actually the name of the USB port's dictionary, and is used solely for house keeping. Keep in mind every USB port you want to use needs to have its own unique USB port dictionary.\n\nThe name itself holds no value besides showing up in IOReg and so this can be whatever you like. To keep this sane, we use the name already given by our ACPI tables(in this case HS01) but the name can be any 4 character entry. However do not go over this 4 char limit, as unintended side effects can happen.\n\n * Note: Those with AppleUSB20XHCIPort or AppleUSB30XHCIPort names for USB ports, you should choose a name easy to identify. On Intel, this is HSxx for 2.0 personalities and SSxx for 3.0 personalities\n\n\n\n# port\n\nTo find the port value, simply select your USB port in IOReg and look for the port entry:\n\nIOREG   INFO.PLIST\n        \n\nFrom here we get <03 00 00 00>, you can simply remove any spaces and add it to your USB map\n\n# port-count\n\nThe final value remaining, look back at your USB map and see which port entry is the largest:\n\n\n\nHere we see the largest in PXSX(1) is <04000000>, do keep in mind that port uses hexadecimal if you get any letters in your USB map.\n\n\n# Continuing on\n\nNow that we've gone over how to map your USB ports for a specific controller, you should have enough understanding to map more controllers. The sample USB-Map.kext I provided has 3 USB controllers listed in it(PXSX-1, PXSX-2 and XHCI). Remember to edit accordingly and to remove any unnecessary maps.\n\n\n# Cleaning up\n\nOnce your saved your USB map's info.plist, remember to add the kext to both your EFI/OC/Kexts and under you config.plist's Kernel -> Add(ProperTree's snapshot can do this for you)\n\nNext, remove/disable:\n\n * USBInjectAll.kext(if you're using it)\n   * Reason for this is USBInjectAll actually breaks how Apple builds port maps. So while it's great for initial port mapping, it can break you final USB map\n * Kernel -> Quirks -> XhciPortLimit -> False\n   * Now that we're finally under the 15 port limit, we no longer need this hacky fix\n\nThen reboot, and check IOReg one last time:\n\n\n\nVoila! As you can see, our USB map applied successfully!\n\nThe main properties to verify are:\n\n * Correct UsbConnector property on your USB ports\n * Comment applied(if injected)\n * Unused ports were removed",normalizedContent:"# usb mapping\n\nso with the prerequisites out of the way, we can finally get to the meat of this guide. and now we get to finally read one of my favorite books before i go to bed each night: the advanced configuration and power interface (acpi) specification!\n\nnow if you haven't read through this before(which i highly recommend you do, it's a thrilling tale), i'll point you to the meat of the usb situation:\n\n * section 9.14: _upc (usb port capabilities)\n\nhere we're greeted with all the possible usb ports in acpi:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\n\n# usb mapping: the manual way\n\nthis section is for those who want to get down into the meats of their hackintosh, to really understand what it's doing and help if there's any issues with usbmap.py and other mapping tools. to start, we'll need a few things:\n\n * installed version of macos\n   * this is due to how macos enumerates ports, trying to map from other oses makes this difficult\n   * note: this guide will be focusing on os x 10.11, el capitan and newer. older oses shouldn't require any usb mapping\n * non-conflicting usb names\n   * see previous section: checking what renames you need\n * a usb 2.0 and usb 3.0 device to test with\n   * you must have 2 separate devices as to ensure no mix ups with personalities\n * ioregistryexplorer.app\n   * to view the inner workings of macos more easily\n   * if you plan to use discord for troubleshooting, v2.1.0 is a bit easier on file size.\n * usbinjectall\n   * this is only required for older usb controllers like broadwell and older, however some coffee lake systems may still require it\n   * reminder this kext does not work on amd\n * sample-usb-map.kext\n * propertree\n   * or any other plist editor\n\nnow with all this out of the way, lets get to usb mapping!\n\n\n# finding your usb ports\n\nlets open our previously downloaded ioregistryexplorer.app and search for our usb controller(s).\n\nthe 2 main search terms are xhc and ehc, but if you have a legacy board with uhci or ohci controllers you'll need to adjust. a blanket usb search may show too many entries and confuse you.\n\nfor this example, lets try and map an asus x299-e strix board:\n\n\n\nfrom the above image we can see 3 usb controllers:\n\n * pxsx(1, top)\n * pxsx(2, middle)\n * xhci(3, bottom)\n\npay attention that they're individual controllers, as this means each usb controller has it's own port limit. so you're not as starved for usb ports as you may think.\n\nnow i personally know which usb controllers match up with which physical ports, problem is it's not always as obvious which ports match with which controllers. so lets try to figure out which is what.\n\nnote: the appleusblegacyroot entry is an entry that lists all active usb controllers and ports, these are not usb controllers themselves so you can outright ignore them.\n\nnote 2: keep in mind every motherboard model will have a unique set of port combos, controller types and names. so while our example uses pxsx, yours might have the xhc0 or ptcp name. and quite common on older motherboards is that you may only have 1 controller, this is alright so don't stress about having the exact same setup as the example.\n\ncommon names you can check:\n\n * usb 3.x controllers:\n   * xhc\n   * xhc0\n   * xhc1\n   * xhc2\n   * xhci\n   * xhcx\n   * as43\n   * ptxh\n     * commonly associated with amd chipset controllers\n   * ptcp\n     * found on asrock x399\n   * pxsx\n     * this is a generic pcie device, double check it's a usb device as nvme controllers and other devices can use the same name.\n * usb 2.x controllers:\n   * ehci\n   * ehc1\n   * ehc2\n   * eusb\n   * usbe\n\n\n# finding which ports match with which controller\n\nto start, i'm going to plug a usb device into my front usb 3.1(type-a) and 3.2(type-c):\n\n\n\nnext lets look at ioreg, and we can see where our usb devices fell:\n\nusb-c   usb-a\n        \n\nhere we see a few things:\n\n * front 3.2 type-c is on the pxsx(2, middle) controller\n * front 3.1 type-a is on the xhci(3, bottom) controller\n\nnow that we have an idea of which ports go to which controller, can can now look into how we usb map.\n\n\n# usb-a mapping\n\nas mentioned before, usb 3.x ports are split into 2 personalities: usb 2.0 and usb 3.0. this is to ensure backwards compatibility but macos itself has difficulties determining which personalities match up to which ports. that's where we come in to help.\n\nso lets take our usb-a port, when we plug in a usb 3.0 device into it we see xhci -> ss03 light up. this is the usb 3.0 personality of the port. now we'll want to plug a usb 2.0 device into that port:\n\n3.0 personality   2.0 personality\n                  \n\nwe see that the usb 2.0 personality of our 3.0 port is xhci -> hs03, now you should be able to get an idea of what we're trying to do:\n\n * front type-a:\n   * hs03: 2.0 personality\n   * ss03: 3.0 personality\n\nnote: if your usb ports show up as either appleusb20xhciport or appleusb30xhciport, you can still map however it will be a bit more difficult. instead of writing down the names, pay very close attention to the port property on the right hand side:\n\n\n\n\n# creating a personal map\n\nthis is where we pull out pen and paper, and start to write down which ports physically match up with which digital ports. an example of what your map can look like:\n\nname mapping   property mapping\n               \n\nyour own map doesn't need to look exactly like this, however you'll want something that you can easily understand and refer to down the line.\n\nnote:\n\n * name mapping: when a proper name shows up in ioreg(ie. hs01)\n * property mapping: when no proper name is given(ie. appleusb30xhciport)\n\n\n# usb-c mapping\n\nnext lets map our usb-c port, this is where it gets quite tricky as you may have noticed earlier:\n\ntype   info                                                    comments\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n\nso when we map our usb-c header, we notice it occupies the ss01 port. but when we flip it, we actually populate it on the ss02 port. when this happens, you'll want to write this down for when we apply the port type.\n\n * note: all personalities from this port will be put under the type 10\n * note 2: not all usb-c headers will be type 10, double check yours\n\n\n\n\n# continuing mapping\n\nnow that you have the basic idea, you'll want to go around with every usb port and map it out. this will take time, and don't forget to write it down. your final diagram should look similar to this:\n\n\n\n\n# special notes\n\n * bluetooth\n * usrx ports\n * missing usb ports\n\n# bluetooth\n\nso while not obvious to many, bluetooth actually runs over the usb interface internally. this means that when mapping, you'll need to pay close attention to devices that already show up in ioreg:\n\n\n\nkeep this in mind, as this plays into the type 255 and getting certain services like handoff working correctly.\n\n# usrx ports\n\nwhen mapping, you may notice some extra ports left over, specifically usr1 and usr2. these ports are known as \"usbr\" ports, or more specifically usb redirection ports. use of these is for remote management but real macs don't ship with usbr devices and so has no support for them os-wise. you can actually ignore these entries in your usb map:\n\n\n\n# missing usb ports\n\nin some rare situations, certain usb ports may not show up in macos at all. this is likely due to a missing definition in your acpi tables, and so we have a few options:\n\n * coffee lake and older should use usbinjectall\n   * don't forget to add this to both efi/oc/kexts and you config.plist's kernel -> add\n * comet lake and newer should use ssdt-rhub\n * amd systems should also use ssdt-rhub\n\nssdt-rhub's purpose is to reset your usb controller, and force macos to reenumerate them. this avoids the hassle of trying to patch your existing acpi tables.\n\nto create your own ssdt-rhub-map:\n\n * grab a copy of the ssdt: ssdt-rhub.dsl\n * grab maciasl\n\nnext, open our newly downloaded ssdt with maciasl, you should be presented with the following:\n\n\n\nnow, open ioreg and find the usb controller you want to reset(pay very close attention its the usb controller and not the child rhub with the same name):\n\nif you look to the right side, you should see the acpi-apth property. here we're going to need to translate it to something our ssdt can use:\n\n# before modifying\nioservice:/appleacpiplatformexpert/pc00@0/appleacpipci/rp05@1c,4/iopp/pxsx@0\n\n\nnow we'll want to strip out any unnecessary data:\n\n * ioservice:/appleacpiplatformexpert/\n * @##\n * iopp\n\nonce cleaned up, yours should look similar:\n\n# after modifying\npc00.rp05.pxsx\n\n\nfollowing the example from above, we'll be renaming pci0.xhc1.rhub to pc00.rp05.pxsx.rhub:\n\nbefore:\n\nexternal (_sb_.pci0.xhc1.rhub, deviceobj) <- rename this\n\nscope (_sb.pci0.xhc1.rhub) <- rename this\n\n\n\n\nfollowing the example pathing we found, the ssdt should look something like this:\n\nafter:\n\nexternal (_sb.pc00.rp05.pxsx.rhub, deviceobj) <- renamed\n\nscope (_sb.pc00.rp05.pxsx.rhub) <- renamed\n\n\n\n\nonce you've edited the ssdt to your usb controller's path, you can export it with file -> saveas -> acpi machine language binary:\n\n\n\nfinally, remember to add this ssdt to both efi/oc/acpi and your config.plist under acpi -> add.\n\n\n# creating our kext\n\nits the time you've all been waiting for, we finally get to create our usb map!\n\nfirst off, we'll want to grab a sample usb map kext:\n\n * sample-usb-map.kext\n\nnext right click the .kext, and select show package contents. then drill down to the info.plist:\n\nshow contents   info.plist\n                \n\nnow lets open propertree and look at this info.plist:\n\n\n\nhere we see a few sections, under iokitpersonalities:\n\n * rp05 - pxsx(1)\n * rp07 - pxsx(2)\n * xhci - xhci\n\neach entry here represents a usb controller, specifically the map for each controller. the names of the entry don't matter much however, it's more for book keeping so you know which entry to has which usb map.\n\nnext lets head into the rp05 - pxsx(1) entry:\n\n\n\nhere we see a few more important properties:\n\nproperty                    comment\niopathmatch                 the device macos will choose to attach the map to\nioproviderclass             the usb driver macos will choose to attach\nmodel                       the smbios the usb map attaches too\nioprovidermergeproperties   the dictionary holding the actual port map\n\n\n# determining the properties\n\ndetermining the value for each property is actually quite straight forward:\n\n * iopathmatch\n * ioproviderclass\n * model\n * ioprovidermergeproperties\n\n# iopathmatch\n\nfinding iopathmatch is super easy, first find the usb controller you want to map and then select the root hub(so the pxsx child with the same name as the parent, don't worry it's less confusing when you look at the image):\n\n\n\nnow with the pxsx entry selected, simply copy(cmd+c) and paste it into our info.plist. your property should look similar to the below:\n\nioservice:/appleacpiplatformexpert/pc00@0/appleacpipci/rp05@1c,4/iopp/pxsx@0/pxsx@01000000\n\n\nnote: each usb controller will have a unique iopathmatch value, keep this in mind if you have multiple controllers of the same name. this asus x299 board has 2 pxsx usb controllers, so each new usb map dictionary will have a unique entry for iopathmatch.\n\n# ioproviderclass\n\nfinding ioproviderclass is also easy, select the root-hub once again and look for the cfbundleidentifier value:\n\nioreg   info.plist\n        \n\nnow we can't take that value 1-1, instead we need to trim it to the kext's short name being appleusbxhcipci(so we removed com.apple.driver.usb.)\n\n# model\n\nif you've forgotten what smbios you're using, you can simply check the top level device in ioreg:\n\nioreg   info.plist\n        \n\n\n# ioprovidermergeproperties\n\nnow lets open the ioprovidermergeproperties dictionary:\n\n\n\nhere we have a lot of data to work through:\n\nproperty       comment\nname           the name of the usb port's dictionary\nport-count     this is the largest port value you're injecting\nusbconnector   this is the type of usb port as mentioned in the acpi 9.14\n               section\nport           the physical location of your usb port in acpi\ncomment        an optional entry to help you keep track of all your ports\n\nand a reminder of all possible port types:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\nit should be coming full circle now, as you can see how our previous work with mapping out our ports works.\n\n# name\n\nthe name property is actually the name of the usb port's dictionary, and is used solely for house keeping. keep in mind every usb port you want to use needs to have its own unique usb port dictionary.\n\nthe name itself holds no value besides showing up in ioreg and so this can be whatever you like. to keep this sane, we use the name already given by our acpi tables(in this case hs01) but the name can be any 4 character entry. however do not go over this 4 char limit, as unintended side effects can happen.\n\n * note: those with appleusb20xhciport or appleusb30xhciport names for usb ports, you should choose a name easy to identify. on intel, this is hsxx for 2.0 personalities and ssxx for 3.0 personalities\n\n\n\n# port\n\nto find the port value, simply select your usb port in ioreg and look for the port entry:\n\nioreg   info.plist\n        \n\nfrom here we get <03 00 00 00>, you can simply remove any spaces and add it to your usb map\n\n# port-count\n\nthe final value remaining, look back at your usb map and see which port entry is the largest:\n\n\n\nhere we see the largest in pxsx(1) is <04000000>, do keep in mind that port uses hexadecimal if you get any letters in your usb map.\n\n\n# continuing on\n\nnow that we've gone over how to map your usb ports for a specific controller, you should have enough understanding to map more controllers. the sample usb-map.kext i provided has 3 usb controllers listed in it(pxsx-1, pxsx-2 and xhci). remember to edit accordingly and to remove any unnecessary maps.\n\n\n# cleaning up\n\nonce your saved your usb map's info.plist, remember to add the kext to both your efi/oc/kexts and under you config.plist's kernel -> add(propertree's snapshot can do this for you)\n\nnext, remove/disable:\n\n * usbinjectall.kext(if you're using it)\n   * reason for this is usbinjectall actually breaks how apple builds port maps. so while it's great for initial port mapping, it can break you final usb map\n * kernel -> quirks -> xhciportlimit -> false\n   * now that we're finally under the 15 port limit, we no longer need this hacky fix\n\nthen reboot, and check ioreg one last time:\n\n\n\nvoila! as you can see, our usb map applied successfully!\n\nthe main properties to verify are:\n\n * correct usbconnector property on your usb ports\n * comment applied(if injected)\n * unused ports were removed",charsets:{}},{title:"杂项修复",frontmatter:{},regularPath:"/usb/misc/",relativePath:"usb/misc/README.md",key:"v-115108b8",path:"/usb/misc/",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# 杂项修复\n\n * 修复USB电源\n * 修复关机/重启\n * GPRW/UPRW/LANC即时唤醒补丁\n * 键盘唤醒问题",normalizedContent:"# 杂项修复\n\n * 修复usb电源\n * 修复关机/重启\n * gprw/uprw/lanc即时唤醒补丁\n * 键盘唤醒问题",charsets:{cjk:!0}},{title:"GPRW/UPRW/LANC即时唤醒补丁",frontmatter:{},regularPath:"/usb/misc/instant-wake.html",relativePath:"usb/misc/instant-wake.md",key:"v-15555df3",path:"/usb/misc/instant-wake.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:'# GPRW/UPRW/LANC即时唤醒补丁\n\n与“修复关机/重启”部分类似，如果睡眠期间USB或电源状态发生变化，macOS将立即唤醒。为了解决这个问题，我们需要将GPRW/UPRW/LANC调用重新路由到一个新的SSDT，在尝试以下操作之前，请验证您是否存在即时唤醒问题。\n\n最好的检查方法:\n\npmset -g log | grep -e "Sleep.*due to" -e "Wake.*due to"\n\n\n通常你会得到这样的结果:\n\n * Wake [CDNVA] due to GLAN: Using AC\n   * 通常是由启用WakeOnLAN引起的，请首先在BIOS中禁用此选项\n   * 如果不是WOL的问题，你可以尝试下面的补丁\n * Wake [CDNVA] due to HDEF: Using AC\n   * 类似于GLAN问题\n * Wake [CDNVA] due to XHC: Using AC\n   * 通常是由于启用了WakeOnUSB引起的，请首先在BIOS中禁用此选项\n   * 可能需要GPRW补丁\n * DarkWake from Normal Sleep [CDNPB] : due to RTC/Maintenance Using AC\n   * 一般由小睡引起\n * Wake reason: RTC (Alarm)\n   * 通常是由应用程序唤醒系统引起的，在睡觉前退出该应用程序应该可以解决这个问题\n\n不要一次使用所有这些补丁，查看你的DSDT，看看你有哪些补丁:\n\nSSDT        ACPI PATCH           COMMENTS\nSSDT-GPRW   GPRW to XPRW Patch   如果你的ACPI中有Method (GPRW, 2，请使用它\nSSDT-UPRW   UPRW to XPRW Patch   如果你的ACPI中有Method (UPRW, 2，请使用此方法\nSSDT-LANC   LANC to XPRW Patch   如果你的ACPI中有Device (LANC)，请使用它\n\nACPI补丁和SSDTs由 Rehabman, 1Revenger1 和 Fewtarius 提供',normalizedContent:'# gprw/uprw/lanc即时唤醒补丁\n\n与“修复关机/重启”部分类似，如果睡眠期间usb或电源状态发生变化，macos将立即唤醒。为了解决这个问题，我们需要将gprw/uprw/lanc调用重新路由到一个新的ssdt，在尝试以下操作之前，请验证您是否存在即时唤醒问题。\n\n最好的检查方法:\n\npmset -g log | grep -e "sleep.*due to" -e "wake.*due to"\n\n\n通常你会得到这样的结果:\n\n * wake [cdnva] due to glan: using ac\n   * 通常是由启用wakeonlan引起的，请首先在bios中禁用此选项\n   * 如果不是wol的问题，你可以尝试下面的补丁\n * wake [cdnva] due to hdef: using ac\n   * 类似于glan问题\n * wake [cdnva] due to xhc: using ac\n   * 通常是由于启用了wakeonusb引起的，请首先在bios中禁用此选项\n   * 可能需要gprw补丁\n * darkwake from normal sleep [cdnpb] : due to rtc/maintenance using ac\n   * 一般由小睡引起\n * wake reason: rtc (alarm)\n   * 通常是由应用程序唤醒系统引起的，在睡觉前退出该应用程序应该可以解决这个问题\n\n不要一次使用所有这些补丁，查看你的dsdt，看看你有哪些补丁:\n\nssdt        acpi patch           comments\nssdt-gprw   gprw to xprw patch   如果你的acpi中有method (gprw, 2，请使用它\nssdt-uprw   uprw to xprw patch   如果你的acpi中有method (uprw, 2，请使用此方法\nssdt-lanc   lanc to xprw patch   如果你的acpi中有device (lanc)，请使用它\n\nacpi补丁和ssdts由 rehabman, 1revenger1 和 fewtarius 提供',charsets:{cjk:!0}},{title:"Keyboard Wake Issues",frontmatter:{},regularPath:"/usb/misc/keyboard.html",relativePath:"usb/misc/keyboard.md",key:"v-13fb6693",path:"/usb/misc/keyboard.html",headers:[{level:2,title:"Method 1 - Add Wake Type Property (Recommended)",slug:"method-1-add-wake-type-property-recommended",normalizedTitle:"method 1 - add wake type property (recommended)",charIndex:706},{level:2,title:"Method 2 - Create a fake ACPI Device",slug:"method-2-create-a-fake-acpi-device",normalizedTitle:"method 2 - create a fake acpi device",charIndex:1275},{level:2,title:"Method 3 - Configuring darkwake",slug:"method-3-configuring-darkwake",normalizedTitle:"method 3 - configuring darkwake",charIndex:2023}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"Method 1 - Add Wake Type Property (Recommended) Method 2 - Create a fake ACPI Device Method 3 - Configuring darkwake",content:"# Keyboard Wake Issues\n\nSo an odd bug with Intel's 100 series chipsets and newer is that sometimes macOS requires a second keyboard press or some other wake event to power up the monitor as well, with some requiring a keypress+power button to wake. Well to fix this, we need to either:\n\n * Set acpi-wake-type to the USB Controller(Recommended)\n * Create a fake ACPI Device\n * Disable darkwake(not ideal, as background tasks will also turn on the display)\n\nYou can find a great write up on the whole situation and the fixes here: USB Fix.\n\nIt's an excellent read and highly recommend to truly understand what is exactly happening, and it's not like you've done enough reading already with this guide ;p\n\n\n# Method 1 - Add Wake Type Property (Recommended)\n\nSo the ideal method is to declare the XHCI Controller(This is our USB Controller) to be an ACPI wake device, as we don't have compatible ECs for macOS to handle proper wake calls.\n\nTo start, we'll need to grab the PciRoot of our USB Controller(we'll use gfxutil, Generally the names would be XHC, XHC1 and XHCI)\n\n\n\nNow with the PciRoot, open your config.plist and add a new entry under DeviceProperties -> Add, and add your PciRoot. Then create a child with the following attributes:\n\nacpi-wake-type | Data | <01>\n\n\n\n\n# Method 2 - Create a fake ACPI Device\n\nThis method creates a fake ACPI Device that will be associated with the GPE, then add the property of acpi-wake-type with USBWakeFixup.kext.\n\nIt's actually quite easy to setup, you'll need the following:\n\n * USBWakeFixup.kext\n   * Both under EFI/OC/Kexts and your config.plist\n * SSDT-USBW.dsl\n\nTo create the SSDT-USBW for your specific system, you're gonna need the ACPI path of your USB controller. If we look back above to the gfxutil example, we can see it also lists our ACPI path:\n\n * /PC00@0/XHCI@14 -> \\_SB.PC00.XHCI\n\nNow we can shove that into our SSDT:\n\n\n\nNow with that done, you can compile and add it to your EFI and config.plist. See Getting Started With ACPI for more info on compiling SSDTs\n\n\n# Method 3 - Configuring darkwake\n\nBefore we get deep into configuring darkwake, it would be best to explain what darkwake is. A great in-depth thread by holyfield can be found here: DarkWake on macOS Catalina\n\nIn its simplest form, you can think of darkwake as \"partial wake\", where only certain parts of your hardware are lit up for maintenance tasks while others remain asleep(ie. Display). Reason we may care about this is that darkwake can add extra steps to the wake process like keyboard press, but outright disabling it can make our hack wake randomly. So ideally we'd go through the below table to find an ideal value.\n\nNow lets take a look at IOPMrootDomain's source code:\n\n// gDarkWakeFlags\nenum {\n    kDarkWakeFlagHIDTickleEarly      = 0x01, // hid tickle before gfx suppression\n    kDarkWakeFlagHIDTickleLate       = 0x02, // hid tickle after gfx suppression\n    kDarkWakeFlagHIDTickleNone       = 0x03, // hid tickle is not posted\n    kDarkWakeFlagHIDTickleMask       = 0x03,\n    kDarkWakeFlagAlarmIsDark         = 0x0100,\n    kDarkWakeFlagGraphicsPowerState1 = 0x0200,\n    kDarkWakeFlagAudioNotSuppressed  = 0x0400\n};\n\n\nNow lets go through each bit:\n\nBIT    NAME                     COMMENT\n0      N/A                      Supposedly disables darkwake\n1      HID Tickle Early         Helps with wake from lid, may require pwr-button press to\n                                wake in addition\n2      HID Tickle Late          Helps single keypress wake but disables auto-sleep\n3      HID Tickle None          Default darkwake value if none is set\n3      HID Tickle Mask          To be paired with other\n256    Alarm Is Dark            To be explored\n512    Graphics Power State 1   Enables wranglerTickled to wake fully from hibernation and\n                                RTC\n1024   Audio Not Suppressed     Supposedly helps with audio disappearing after wake\n\n * Note that HID = Human-interface devices(Keyboards, mice, pointing devices, etc)\n\nTo apply the above table to your system, it's as simple as grabbing calculator, adding up your desired darkwake values and then applying the final value to your boot-args. However we recommend trying 1 at a time rather than merging all at once, unless you know what you're doing(though you likely wouldn't be reading this guide).\n\nFor this example, lets try and combine kDarkWakeFlagHIDTickleLate and kDarkWakeFlagGraphicsPowerState1:\n\n * 2= kDarkWakeFlagHIDTickleLate\n * 512= kDarkWakeFlagAudioNotSuppressed\n\nSo our final value would be darkwake=514, which we can next place into boot-args:\n\nNVRAM\n|---Add\n  |---7C436110-AB2A-4BBB-A880-FE41995C9F82\n    |---boot-args | Sting | darkwake=514\n\n\nThe below is more for clarification for users who are already using darkwake or are looking into it, specifically clarifying what values no longer work:\n\n * darkwake=8: This hasn't been in the kernel since Mavericks\n   * Correct boot-arg would be darkwake=0\n * darkwake=10: This hasn't been in the kernel since Mavericks\n   * Correct boot-arg would be darkwake=2",normalizedContent:"# keyboard wake issues\n\nso an odd bug with intel's 100 series chipsets and newer is that sometimes macos requires a second keyboard press or some other wake event to power up the monitor as well, with some requiring a keypress+power button to wake. well to fix this, we need to either:\n\n * set acpi-wake-type to the usb controller(recommended)\n * create a fake acpi device\n * disable darkwake(not ideal, as background tasks will also turn on the display)\n\nyou can find a great write up on the whole situation and the fixes here: usb fix.\n\nit's an excellent read and highly recommend to truly understand what is exactly happening, and it's not like you've done enough reading already with this guide ;p\n\n\n# method 1 - add wake type property (recommended)\n\nso the ideal method is to declare the xhci controller(this is our usb controller) to be an acpi wake device, as we don't have compatible ecs for macos to handle proper wake calls.\n\nto start, we'll need to grab the pciroot of our usb controller(we'll use gfxutil, generally the names would be xhc, xhc1 and xhci)\n\n\n\nnow with the pciroot, open your config.plist and add a new entry under deviceproperties -> add, and add your pciroot. then create a child with the following attributes:\n\nacpi-wake-type | data | <01>\n\n\n\n\n# method 2 - create a fake acpi device\n\nthis method creates a fake acpi device that will be associated with the gpe, then add the property of acpi-wake-type with usbwakefixup.kext.\n\nit's actually quite easy to setup, you'll need the following:\n\n * usbwakefixup.kext\n   * both under efi/oc/kexts and your config.plist\n * ssdt-usbw.dsl\n\nto create the ssdt-usbw for your specific system, you're gonna need the acpi path of your usb controller. if we look back above to the gfxutil example, we can see it also lists our acpi path:\n\n * /pc00@0/xhci@14 -> \\_sb.pc00.xhci\n\nnow we can shove that into our ssdt:\n\n\n\nnow with that done, you can compile and add it to your efi and config.plist. see getting started with acpi for more info on compiling ssdts\n\n\n# method 3 - configuring darkwake\n\nbefore we get deep into configuring darkwake, it would be best to explain what darkwake is. a great in-depth thread by holyfield can be found here: darkwake on macos catalina\n\nin its simplest form, you can think of darkwake as \"partial wake\", where only certain parts of your hardware are lit up for maintenance tasks while others remain asleep(ie. display). reason we may care about this is that darkwake can add extra steps to the wake process like keyboard press, but outright disabling it can make our hack wake randomly. so ideally we'd go through the below table to find an ideal value.\n\nnow lets take a look at iopmrootdomain's source code:\n\n// gdarkwakeflags\nenum {\n    kdarkwakeflaghidtickleearly      = 0x01, // hid tickle before gfx suppression\n    kdarkwakeflaghidticklelate       = 0x02, // hid tickle after gfx suppression\n    kdarkwakeflaghidticklenone       = 0x03, // hid tickle is not posted\n    kdarkwakeflaghidticklemask       = 0x03,\n    kdarkwakeflagalarmisdark         = 0x0100,\n    kdarkwakeflaggraphicspowerstate1 = 0x0200,\n    kdarkwakeflagaudionotsuppressed  = 0x0400\n};\n\n\nnow lets go through each bit:\n\nbit    name                     comment\n0      n/a                      supposedly disables darkwake\n1      hid tickle early         helps with wake from lid, may require pwr-button press to\n                                wake in addition\n2      hid tickle late          helps single keypress wake but disables auto-sleep\n3      hid tickle none          default darkwake value if none is set\n3      hid tickle mask          to be paired with other\n256    alarm is dark            to be explored\n512    graphics power state 1   enables wranglertickled to wake fully from hibernation and\n                                rtc\n1024   audio not suppressed     supposedly helps with audio disappearing after wake\n\n * note that hid = human-interface devices(keyboards, mice, pointing devices, etc)\n\nto apply the above table to your system, it's as simple as grabbing calculator, adding up your desired darkwake values and then applying the final value to your boot-args. however we recommend trying 1 at a time rather than merging all at once, unless you know what you're doing(though you likely wouldn't be reading this guide).\n\nfor this example, lets try and combine kdarkwakeflaghidticklelate and kdarkwakeflaggraphicspowerstate1:\n\n * 2= kdarkwakeflaghidticklelate\n * 512= kdarkwakeflagaudionotsuppressed\n\nso our final value would be darkwake=514, which we can next place into boot-args:\n\nnvram\n|---add\n  |---7c436110-ab2a-4bbb-a880-fe41995c9f82\n    |---boot-args | sting | darkwake=514\n\n\nthe below is more for clarification for users who are already using darkwake or are looking into it, specifically clarifying what values no longer work:\n\n * darkwake=8: this hasn't been in the kernel since mavericks\n   * correct boot-arg would be darkwake=0\n * darkwake=10: this hasn't been in the kernel since mavericks\n   * correct boot-arg would be darkwake=2",charsets:{cjk:!0}},{title:"修复USB电源",frontmatter:{},regularPath:"/usb/misc/power.html",relativePath:"usb/misc/power.md",key:"v-8f91aef6",path:"/usb/misc/power.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# 修复USB电源\n\n有了Skylake和更新的SMBIOS，苹果不再通过IOUSBHostFamily提供USB电源设置，这意味着我们需要采用与真正的mac相同的方法，为macOS提供一个USBX设备。这将设置所有USB端口的唤醒和睡眠功率值，并可以帮助修复许多高功率设备:\n\n * 麦克风\n * DACs\n * 网络摄像头\n * 蓝牙适配器\n\n以下SMBIOS需要USBX:\n\n * iMac17,x 及更新版本\n * MacPro7,1 及更新版本\n * iMacPro1,1 及更新版本\n * Macmini8,1 及更新版本\n * MacBook9,x 及更新版本\n * MacBookAir8,x 及更新版本\n * MacBookPro13,x 及更新版本\n\n幸运的是，你可以使用预编译的USBX文件: SSDT-USBX",normalizedContent:"# 修复usb电源\n\n有了skylake和更新的smbios，苹果不再通过iousbhostfamily提供usb电源设置，这意味着我们需要采用与真正的mac相同的方法，为macos提供一个usbx设备。这将设置所有usb端口的唤醒和睡眠功率值，并可以帮助修复许多高功率设备:\n\n * 麦克风\n * dacs\n * 网络摄像头\n * 蓝牙适配器\n\n以下smbios需要usbx:\n\n * imac17,x 及更新版本\n * macpro7,1 及更新版本\n * imacpro1,1 及更新版本\n * macmini8,1 及更新版本\n * macbook9,x 及更新版本\n * macbookair8,x 及更新版本\n * macbookpro13,x 及更新版本\n\n幸运的是，你可以使用预编译的usbx文件: ssdt-usbx",charsets:{cjk:!0}},{title:"修复关机/重启",frontmatter:{},regularPath:"/usb/misc/shutdown.html",relativePath:"usb/misc/shutdown.md",key:"v-6ff7519a",path:"/usb/misc/shutdown.html",lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:null,content:"# 修复关机/重启\n\n因此，在使用macOS时，你可能会遇到一个奇怪的现象:当你关机时，你的PC可能会重新启动。这实际上是由于缺少S5调用导致控制器断电。当然，Windows和Linux实现了一些hack来解决这个问题，但macOS没有这样的修复，相反，我们需要做一些脏活，修复他们的ACPI编写。别担心，这不会影响其他操作系统。\n\n为此，我们需要以下内容:\n\n * FixShutdown-USB-SSDT.dsl\n * _PTS to ZPTS Patch\n * USB控制器的ACPI路径\n\n要找到需要修复的USB控制器，请在您的DSDT中搜索_PRW，并查看其中提到的设备，通常情况下，这将类似于SB.PCI0.XHC。\n\n使用ACPI路径，编辑FixShutdown-USB-SSDT.dsl并将其编译为.aml文件(已组装)。MaciASL可以帮助你做到这一点",normalizedContent:"# 修复关机/重启\n\n因此，在使用macos时，你可能会遇到一个奇怪的现象:当你关机时，你的pc可能会重新启动。这实际上是由于缺少s5调用导致控制器断电。当然，windows和linux实现了一些hack来解决这个问题，但macos没有这样的修复，相反，我们需要做一些脏活，修复他们的acpi编写。别担心，这不会影响其他操作系统。\n\n为此，我们需要以下内容:\n\n * fixshutdown-usb-ssdt.dsl\n * _pts to zpts patch\n * usb控制器的acpi路径\n\n要找到需要修复的usb控制器，请在您的dsdt中搜索_prw，并查看其中提到的设备，通常情况下，这将类似于sb.pci0.xhc。\n\n使用acpi路径，编辑fixshutdown-usb-ssdt.dsl并将其编译为.aml文件(已组装)。maciasl可以帮助你做到这一点",charsets:{cjk:!0}},{title:"系统准备",frontmatter:{},regularPath:"/usb/system-preparation.html",relativePath:"usb/system-preparation.md",key:"v-5f9fb552",path:"/usb/system-preparation.html",headers:[{level:2,title:"检查你需要的重命名",slug:"检查你需要的重命名",normalizedTitle:"检查你需要的重命名",charIndex:33},{level:3,title:"查看IOService",slug:"查看ioservice",normalizedTitle:"查看ioservice",charIndex:48}],lastUpdated:"2/12/2023, 6:36:23 PM",lastUpdatedTimestamp:1676226983e3,headersStr:"检查你需要的重命名 查看IOService",content:"# 系统准备\n\nTable of Contents:\n\n\n\n * 检查你需要的重命名\n   * 查看IOService\n\n\n\n所以在我们进行USB映射之前，我们需要设置一些事情:\n\n * USBInjectAll 添加到在 EFI/OC/Kexts 和 config.plist -> Kernel -> Add\n   * 我们需要这个kext来确保任何没有在ACPI中定义的端口仍然会在macOS中显示，请注意，在Skylake和更新的系统中不需要这一点，因为USB端口是在ACPI中定义的。\n     * 因为oem并不总是包括端口，即使在较新的系统上，我们建议所有英特尔用户使用USBInjectAll，直到正确映射。\n   * 注意，这个不能在AMD上工作\n * config.plist -> Kernel -> Quirks -> XhciPortLimit -> True\n   * 所以我们可以暂时绕过15个端口的限制来映射我们的端口\n * config.plist -> ACPI -> Patch -> EHCI and XHCI ACPI renames\n\n我们需要这些ACPI重命名的原因是由于与苹果自己的USB映射冲突，有趣的是，即使苹果也有USB映射!你实际上可以在Catalina的IOUSBHostFamily kext -> PlugIns -> AppleUSBHostPlatformProperties.kext中找到苹果的USB地图，虽然较新的mac实际上与他们的ACPI表端口地图代替。\n\n不需要ACPI重命名的smbios:\n\n * iMac18,x 及更新版本\n * MacPro7,1 及更新版本\n * Macmini8,1 及更新版本\n * MacBook9,x 及更新版本\n * MacBookAir8,x 及更新版本\n * MacBookPro13,x 及更新版本\n\n因此，对于较旧的SMBIOSes(上面没有列出)，我们需要确保它们的端口映射不连接，而我们尝试自己的USB映射。还有一些端口可能会消失，在应用这些补丁之前，请检查您的ACPI表中是否有这些端口，因为我们不想给错误的设备打补丁。如果你发现你的USB控制器需要重命名，在重命名之前写下它们的原始名称，这将使USB映射过程更容易:\n\n * XHC1 to SHCI: Skylake和较旧的SMBIOS需要\n\nKEY              TYPE      VALUE\nComment          String    XHC1 to SHCI\nCount            Number    <0>\nEnabled          Boolean   YES\nFind             Data      <58484331>\nLimit            Number    <0>\nReplace          Data      <53484349>\nSkip             Number    <0>\nTableLength      Number    <0>\nTableSignature   Data      <>\n\n * EHC1 to EH01: Broadwell和更老版本SMBIOS需要\n\nKEY              TYPE      VALUE\nComment          String    EHC1 to EH01\nCount            Number    <0>\nEnabled          Boolean   YES\nFind             Data      <45484331>\nLimit            Number    <0>\nReplace          Data      <45483031>\nSkip             Number    <0>\nTableLength      Number    <0>\nTableSignature   Data      <>\n\n * EHC2 to EH02: Broadwell和更老版本SMBIOS需要\n\nKEY              TYPE      VALUE\nComment          String    EHC2 to EH02\nCount            Number    <0>\nEnabled          Boolean   YES\nFind             Data      <45484332>\nLimit            Number    <0>\nReplace          Data      <45483032>\nSkip             Number    <0>\nTableLength      Number    <0>\nTableSignature   Data      <>\n\n\n# 检查你需要的重命名\n\n因此，通过重命名，很容易找到你使用的SMBIOS(可以在你的config.plist中找到PlatformInfo -> Generic -> SystemProductName)，并匹配确定你是否需要USB映射:\n\nSMBIOS 只需要 XHC1 重命名:\n\n * iMacPro1,1\n * iMac17,x 和更旧的\n * MacBookAir7,x\n\nSMBIOS 需要 XHC1 and EHC1 重命名:\n\n * MacPro6,1\n * Macmini7,1\n * MacBook8,x\n * MacBookAir6,x\n * MacBookPro12,x\n\nSMBIOS 需要 XHC1, EHC1 和 EHC2 重命名:\n\n * iMac16,x 和更旧的\n * MacPro5,1 和更旧的\n * Macmini6,x 和更旧的\n * MacBookAir5,x 和更旧的\n * MacBookPro11,x 和更旧的\n\n现在我们知道了SMBIOS需要什么重命名，接下来可以检查USB控制器的名称。\n\n\n# 查看IOService\n\n让我们以XHC1为例，执行以下命令:\n\nioreg -l -p IOService -w0 | grep -i XHC1\n\n\n如果你看到这个，你需要重命名:   如果你看到这个，你不需要重命名:\n                  \n\n对所有其他相关的冲突设备(例如EHC1, EHC2)重复此步骤，如表中列出的您的型号。\n\nioreg -l -p IOService -w0 | grep -i EHC1\nioreg -l -p IOService -w0 | grep -i EHC2\n\n\n如果没有返回任何内容(比如正确的图像)，则不需要任何重命名。\n\n如果返回了3个条目中的一个(如左图所示)，则需要为返回的内容重命名。\n\n如果你是后者，你现在想要添加所需的ACPI重命名到你的 config.plist -> ACPI -> Patch,您可以在这里找到一个预先制作的文件(注意，您需要启用您需要的那些):\n\n * usb-rename.plist\n   * 只需复制所需的补丁到您的config.plist\n\n\n# 分型方法\n\n但现在我们必须分成两部分，这取决于你有什么硬件:\n\n * Intel USB 映射\n   * 一个更自动化的过程，不过只适用于英特尔\n * 手动 USB 映射\n   * 更多的一步一步的过程，这是正确映射AMD和第三方USB控制器的唯一方法。",normalizedContent:"# 系统准备\n\ntable of contents:\n\n\n\n * 检查你需要的重命名\n   * 查看ioservice\n\n\n\n所以在我们进行usb映射之前，我们需要设置一些事情:\n\n * usbinjectall 添加到在 efi/oc/kexts 和 config.plist -> kernel -> add\n   * 我们需要这个kext来确保任何没有在acpi中定义的端口仍然会在macos中显示，请注意，在skylake和更新的系统中不需要这一点，因为usb端口是在acpi中定义的。\n     * 因为oem并不总是包括端口，即使在较新的系统上，我们建议所有英特尔用户使用usbinjectall，直到正确映射。\n   * 注意，这个不能在amd上工作\n * config.plist -> kernel -> quirks -> xhciportlimit -> true\n   * 所以我们可以暂时绕过15个端口的限制来映射我们的端口\n * config.plist -> acpi -> patch -> ehci and xhci acpi renames\n\n我们需要这些acpi重命名的原因是由于与苹果自己的usb映射冲突，有趣的是，即使苹果也有usb映射!你实际上可以在catalina的iousbhostfamily kext -> plugins -> appleusbhostplatformproperties.kext中找到苹果的usb地图，虽然较新的mac实际上与他们的acpi表端口地图代替。\n\n不需要acpi重命名的smbios:\n\n * imac18,x 及更新版本\n * macpro7,1 及更新版本\n * macmini8,1 及更新版本\n * macbook9,x 及更新版本\n * macbookair8,x 及更新版本\n * macbookpro13,x 及更新版本\n\n因此，对于较旧的smbioses(上面没有列出)，我们需要确保它们的端口映射不连接，而我们尝试自己的usb映射。还有一些端口可能会消失，在应用这些补丁之前，请检查您的acpi表中是否有这些端口，因为我们不想给错误的设备打补丁。如果你发现你的usb控制器需要重命名，在重命名之前写下它们的原始名称，这将使usb映射过程更容易:\n\n * xhc1 to shci: skylake和较旧的smbios需要\n\nkey              type      value\ncomment          string    xhc1 to shci\ncount            number    <0>\nenabled          boolean   yes\nfind             data      <58484331>\nlimit            number    <0>\nreplace          data      <53484349>\nskip             number    <0>\ntablelength      number    <0>\ntablesignature   data      <>\n\n * ehc1 to eh01: broadwell和更老版本smbios需要\n\nkey              type      value\ncomment          string    ehc1 to eh01\ncount            number    <0>\nenabled          boolean   yes\nfind             data      <45484331>\nlimit            number    <0>\nreplace          data      <45483031>\nskip             number    <0>\ntablelength      number    <0>\ntablesignature   data      <>\n\n * ehc2 to eh02: broadwell和更老版本smbios需要\n\nkey              type      value\ncomment          string    ehc2 to eh02\ncount            number    <0>\nenabled          boolean   yes\nfind             data      <45484332>\nlimit            number    <0>\nreplace          data      <45483032>\nskip             number    <0>\ntablelength      number    <0>\ntablesignature   data      <>\n\n\n# 检查你需要的重命名\n\n因此，通过重命名，很容易找到你使用的smbios(可以在你的config.plist中找到platforminfo -> generic -> systemproductname)，并匹配确定你是否需要usb映射:\n\nsmbios 只需要 xhc1 重命名:\n\n * imacpro1,1\n * imac17,x 和更旧的\n * macbookair7,x\n\nsmbios 需要 xhc1 and ehc1 重命名:\n\n * macpro6,1\n * macmini7,1\n * macbook8,x\n * macbookair6,x\n * macbookpro12,x\n\nsmbios 需要 xhc1, ehc1 和 ehc2 重命名:\n\n * imac16,x 和更旧的\n * macpro5,1 和更旧的\n * macmini6,x 和更旧的\n * macbookair5,x 和更旧的\n * macbookpro11,x 和更旧的\n\n现在我们知道了smbios需要什么重命名，接下来可以检查usb控制器的名称。\n\n\n# 查看ioservice\n\n让我们以xhc1为例，执行以下命令:\n\nioreg -l -p ioservice -w0 | grep -i xhc1\n\n\n如果你看到这个，你需要重命名:   如果你看到这个，你不需要重命名:\n                  \n\n对所有其他相关的冲突设备(例如ehc1, ehc2)重复此步骤，如表中列出的您的型号。\n\nioreg -l -p ioservice -w0 | grep -i ehc1\nioreg -l -p ioservice -w0 | grep -i ehc2\n\n\n如果没有返回任何内容(比如正确的图像)，则不需要任何重命名。\n\n如果返回了3个条目中的一个(如左图所示)，则需要为返回的内容重命名。\n\n如果你是后者，你现在想要添加所需的acpi重命名到你的 config.plist -> acpi -> patch,您可以在这里找到一个预先制作的文件(注意，您需要启用您需要的那些):\n\n * usb-rename.plist\n   * 只需复制所需的补丁到您的config.plist\n\n\n# 分型方法\n\n但现在我们必须分成两部分，这取决于你有什么硬件:\n\n * intel usb 映射\n   * 一个更自动化的过程，不过只适用于英特尔\n * 手动 usb 映射\n   * 更多的一步一步的过程，这是正确映射amd和第三方usb控制器的唯一方法。",charsets:{cjk:!0}}],themeConfig:{repo:"https://github.com/sumingyd/OpenCore-Post-Install",label:"简体中文",selectText:"选择语言",ariaLabel:"选择语言",editLinks:!0,editLinkText:"在 GitHub 上编辑此页",lastUpdated:"上次更新",logo:"/homepage.png",nav:[{text:"指南菜单",items:[{text:"OpenCore安装",link:"https://sumingyd.github.io/OpenCore-Install-Guide/"},{text:"OpenCore安装后",link:"https://sumingyd.github.io/OpenCore-Post-Install/"},{text:"OpenCore多重引导",link:"https://sumingyd.github.io/OpenCore-Multiboot/"},{text:"开始使用ACPI",link:"https://sumingyd.github.io/Getting-Started-With-ACPI/"},{text:"无线购买指南",link:"https://sumingyd.github.io/Wireless-Buyers-Guide/"},{text:"显卡购买指南",link:"https://sumingyd.github.io/GPU-Buyers-Guide/"},{text:"避免购买指南",link:"https://sumingyd.github.io/Anti-Hackintosh-Buyers-Guide/"}]},{text:"QQ群",link:"https://jq.qq.com/?_wv=1027&k=liYHt5VH"}],sidebar:[{title:"简介",collapsable:!1,sidebarDepth:1,children:[""]},{title:"通用",collapsable:!1,sidebarDepth:2,children:[["/universal/audio","修复音频"],["/universal/oc2hdd","无需USB启动"],["/universal/update","更新OpenCore, kexts和macOS"],["/universal/drm","修复 DRM"],["/universal/iservices","修复 iServices"],["/universal/pm","修复电源管理"],["/universal/sleep","修复睡眠"]]},{title:"USB 修复",collapsable:!1,sidebarDepth:1,children:[["/usb/","USB映射: 简介"],["/usb/system-preparation","系统准备"],{title:"USB 映射",collapsable:!0,sidebarDepth:2,children:[["/usb/intel-mapping/intel","Intel USB 映射"],["/usb/manual/manual","Manual 映射"]]},{title:"杂项修复",collapsable:!0,sidebarDepth:1,children:[["/usb/misc/power","修复 USB 电源"],["/usb/misc/shutdown","修复关机/重启"],["/usb/misc/instant-wake","修复瞬间唤醒"],["/usb/misc/keyboard","修复键盘唤醒问题"]]}]},{title:"安全",collapsable:!1,sidebarDepth:2,children:[["/universal/security","安全性和文件库"],{title:"",collapsable:!1,sidebarDepth:2,children:[["/universal/security/filevault","文件库"],["/universal/security/vault","库"],["/universal/security/scanpolicy","扫描策略"],["/universal/security/password","OpenCore菜单密码"],["/universal/security/applesecureboot","苹果安全引导"]]}]},{title:"笔记本电脑细节",collapsable:!1,children:[["/laptop-specific/battery","修复电池读数"]]},{title:"美化",collapsable:!1,children:[["/cosmetic/verbose","修复分辨率和啰嗦模式"],["/cosmetic/gui","添加gui和开机铃声"],["/universal/memory","修复MacPro7,1内存错误"]]},{title:"多引导",collapsable:!1,children:[["https://sumingyd.github.io/OpenCore-Multiboot/","OpenCore 多引导"],["/multiboot/bootstrap","设置启动选项"],["/multiboot/bootcamp","安装bootcamp"]]},{title:"杂项",collapsable:!1,children:[["/misc/rtc","修复 RTC"],["/misc/msr-lock","修复 CFG Lock"],["/misc/nvram","模拟 NVRAM"]]},{title:"GPU 修补",collapsable:!1,children:[["/gpu-patching/","深入GPU修补"],{title:"现代英特尔iGPU",collapsable:!1,children:[["/gpu-patching/intel-patching/","iGPU补丁介绍"],["/gpu-patching/intel-patching/vram","VRAM 补丁"],["/gpu-patching/intel-patching/connector","Connector-type 补丁"],["/gpu-patching/intel-patching/busid","BusID 补丁"]]},{title:"传统英特尔iGPU",collapsable:!1,children:[["/gpu-patching/legacy-intel/","GMA 补丁"]]},{title:"传统Nvidia",collapsable:!1,children:[["/gpu-patching/nvidia-patching/","Nvidia 补丁"]]}]}]}};t(236);Wt.component("Badge",()=>Promise.all([t.e(0),t.e(23)]).then(t.bind(null,483))),Wt.component("ThemeManager",()=>t.e(35).then(t.bind(null,439))),Wt.component("Badge",()=>Promise.all([t.e(0),t.e(20)]).then(t.bind(null,484))),Wt.component("CodeBlock",()=>Promise.all([t.e(0),t.e(21)]).then(t.bind(null,440))),Wt.component("CodeGroup",()=>Promise.all([t.e(0),t.e(22)]).then(t.bind(null,441)));var $s={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",Fs()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},Ws=(t(237),Object(js.a)($s,(function(){var e=this._self._c;return e("transition",{attrs:{name:"fade"}},[this.show?e("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[e("g",{attrs:{transform:"translate(-229 -126.358)"}},[e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports);t(238),t(239);function Xs(e){const n=document.documentElement.getBoundingClientRect(),t=e.getBoundingClientRect();return{x:t.left-n.left,y:t.top-n.top}}var qs=[{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},({Vue:e})=>{e.component("BackToTop",Ws)},{},({Vue:e,router:n})=>{n.options.scrollBehavior=(n,t,o)=>{if(o)return window.scrollTo({top:o.y,behavior:"smooth"});if(n.hash){if(e.$vuepress.$get("disableScrollBehavior"))return!1;const t=document.querySelector(n.hash);return!!t&&window.scrollTo({top:Xs(t).y,behavior:"smooth"})}return window.scrollTo({top:0,behavior:"smooth"})}}],Ys=t(87);class Ks extends class{constructor(){this.store=new Wt({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,n){Wt.set(this.store.state,e,n)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Ks.prototype,{getPageAsyncComponent:as,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:cs});var Qs={install(e){const n=new Ks;e.$vuepress=n,e.prototype.$vuepress=n}};function Zs(e,n){const t=n.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===t)}var Js={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const n=this.pageKey||this.$parent.$page.key;return ps("pageKey",n),Wt.component(n)||Wt.component(n,as(n)),Wt.component(n)?e(n):e("")}},el={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:n,slots:t})=>e("div",{class:["content__"+n.slotKey]},t()[n.slotKey])},nl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},tl=(t(240),t(241),Object(js.a)(nl,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),ol={functional:!0,render(e,{parent:n,children:t}){if(n._isMounted)return t;n.$once("hook:mounted",()=>{n.$forceUpdate()})}};Wt.config.productionTip=!1,Wt.use(Ha),Wt.use(Qs),Wt.mixin(function(e,n,t=Wt){!function(e){e.locales&&Object.keys(e.locales).forEach(n=>{e.locales[n].path=n});Object.freeze(e)}(n),t.$vuepress.$set("siteData",n);const o=new(e(t.$vuepress.$get("siteData"))),r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),i={};return Object.keys(r).reduce((e,n)=>(n.startsWith("$")&&(e[n]=r[n].get),e),i),{computed:i}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let n,t;for(const o in e)"/"===o?t=e[o]:0===this.$page.path.indexOf(o)&&(n=e[o]);return n||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:n}=this.$page.frontmatter;if("string"==typeof n)return n;const t=this.$siteTitle,o=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const e=function(e){if(e){const n=e.filter(e=>"description"===e.name)[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,n){for(let t=0;t<e.length;t++){const o=e[t];if(o.path.toLowerCase()===n.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Hs)),Wt.component("Content",Js),Wt.component("ContentSlotsDistributor",el),Wt.component("OutboundLink",tl),Wt.component("ClientOnly",ol),Wt.component("Layout",ss("Layout")),Wt.component("NotFound",ss("NotFound")),Wt.prototype.$withBase=function(e){const n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.8",hash:"b1cc7a2"},async function(e){const n="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Hs.routerBase||Hs.base,t=new Ha({base:n,mode:"history",fallback:!1,routes:Vs,scrollBehavior:(e,n,t)=>t||(e.hash?!Wt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((n,t,o)=>{if(Zs(e,n.path))o();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){const t=n.path.replace(/\/$/,"")+".html";Zs(e,t)?o(t):o()}else o();else{const t=n.path+"/",r=n.path+".html";Zs(e,r)?o(r):Zs(e,t)?o(t):o()}})}(t);const o={};try{await Promise.all(qs.filter(e=>"function"==typeof e).map(n=>n({Vue:Wt,options:o,router:t,siteData:Hs,isServer:e})))}catch(e){console.error(e)}return{app:new Wt(Object.assign(o,{router:t,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Ys.a.map(n=>e(n)))])})),router:t}}(!1).then(({app:e,router:n})=>{n.onReady(()=>{e.$mount("#app")})})}]);